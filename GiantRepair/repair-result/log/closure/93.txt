Repair : closure_93
Current failed test : com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4 | 2019.09.06 AD at 19:39:55 CDT
Location : com.google.javascript.rhino.Node.propToString:[228, 222, 225, 220, 175, 195, 232, 217, 214, 211]#1.0
Compute Candidate : 2019.09.06 AD at 19:41:01 CDT - 2019.09.06 AD at 20:40:13 CDT , PNumber : 11186, CandNumber : 122 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return null;
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:40:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return null;
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:40:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
-return "is_constant_name";
+return null;
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:40:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return null;
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:40:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return null;
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:40:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return null;
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:40:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return null;
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:40:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return null;
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:40:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return null;
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:40:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return "";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:40:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:40:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
-return "is_constant_name";
+return "";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:40:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:40:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:40:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return "";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:40:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return "";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:41:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:41:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return "";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:41:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
+case 401 :
+
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1693/pattern-ver1-serial/src.main.java.uk.ac.ic.wlgitbridge.snapshot.getdoc.GetDocResult.java-fromJSON.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:41:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return propToString(0);
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:41:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return propToString(0);
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:41:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
-return "is_constant_name";
+return propToString(0);
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:41:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return propToString(0);
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:41:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return propToString(0);
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:41:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return propToString(0);
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:41:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return propToString(0);
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:41:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return propToString(0);
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:41:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return propToString(0);
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:41:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
+propType++;
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:41:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return "is_namespace".trim();
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:41:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "originalname".trim();
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:41:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
-return "is_constant_name";
+return "is_constant_name".trim();
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:41:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic".trim();
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:41:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename".trim();
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:41:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return "parenthesized".trim();
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:42:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return "free_call".trim();
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:42:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "incrdecr".trim();
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:42:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return "jsdoc_info".trim();
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:42:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return new String("is_namespace");
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:42:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return new String("originalname");
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:42:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
-return "is_constant_name";
+return new String("is_constant_name");
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:42:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return new String("synthetic");
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:42:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return new String("sourcename");
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:42:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return new String("parenthesized");
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:42:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return new String("free_call");
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:42:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return new String("incrdecr");
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:42:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return new String("jsdoc_info");
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:42:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
+propType--;
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:42:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return "is_namespace".toLowerCase();
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:42:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "originalname".toLowerCase();
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:42:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
-return "is_constant_name";
+return "is_constant_name".toLowerCase();
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:42:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic".toLowerCase();
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:42:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename".toLowerCase();
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:42:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return "free_call".toLowerCase();
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:43:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return "parenthesized".toLowerCase();
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:43:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "incrdecr".toLowerCase();
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:43:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return "jsdoc_info".toLowerCase();
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:43:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return (String)("is_namespace");
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:43:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return (String)("originalname");
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:43:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
-return "is_constant_name";
+return (String)("is_constant_name");
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:43:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return (String)("synthetic");
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:43:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return (String)("sourcename");
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:43:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return (String)("free_call");
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:43:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return (String)("parenthesized");
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:43:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return (String)("incrdecr");
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:43:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return (String)("jsdoc_info");
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:43:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
-private static final String propToString(int propType){
-switch (propType){
+private static final String propToString(int stepNumber){
+switch (stepNumber){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6757/pattern-ver1-serial/app.src.main.java.verticalstepperform.ernestoyaquello.com.verticalstepperform.NewAlarmFormActivity.java-createStepContentView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:43:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
+int a=0;
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:43:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
+String OUTSTRING="";
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:43:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
+int a=1;
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:43:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
+boolean b=true;
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:43:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
+}
+if("&null".equals(propType)){
+return null;
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:43:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
+if(propType<0){
+return null;
+}
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:44:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return "is_namespace".replaceAll("\r","");
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:44:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "originalname".replaceAll("\r","");
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:44:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
-return "is_constant_name";
+return "is_constant_name".replaceAll("\r","");
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:44:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic".replaceAll("\r","");
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:44:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename".replaceAll("\r","");
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:44:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return "parenthesized".replaceAll("\r","");
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:44:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return "free_call".replaceAll("\r","");
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:44:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "incrdecr".replaceAll("\r","");
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:44:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return "jsdoc_info".replaceAll("\r","");
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:44:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return String.format("%s","is_namespace");
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:44:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return String.format("%s","originalname");
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:44:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
-return "is_constant_name";
+return String.format("%s","is_constant_name");
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:44:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return String.format("%s","synthetic");
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:44:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return String.format("%s","sourcename");
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:44:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return String.format("%s","parenthesized");
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:44:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return String.format("%s","free_call");
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:44:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return String.format("%s","incrdecr");
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:44:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return String.format("%s","jsdoc_info");
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:44:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
+}
+if((Thread.currentThread().interrupted())){
+return null;
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:45:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return "is_namespace"==null?"":"is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:45:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "originalname"==null?"":"originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:45:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
-return "is_constant_name";
+return "is_constant_name"==null?"":"is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:45:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic"==null?"":"synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:45:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename"==null?"":"sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:45:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return "parenthesized"==null?"":"parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:45:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return "free_call"==null?"":"free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:45:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "incrdecr"==null?"":"incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:45:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return "jsdoc_info"==null?"":"jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:45:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return "is_namespace"!=null?"is_namespace":new String();
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:45:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "originalname"!=null?"originalname":new String();
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:45:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
-return "is_constant_name";
+return "is_constant_name"!=null?"is_constant_name":new String();
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:45:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic"!=null?"synthetic":new String();
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:45:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename"!=null?"sourcename":new String();
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:45:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return "parenthesized"!=null?"parenthesized":new String();
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:45:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return "free_call"!=null?"free_call":new String();
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:45:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "incrdecr"!=null?"incrdecr":new String();
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:45:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return "jsdoc_info"!=null?"jsdoc_info":new String();
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:45:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
-return "is_namespace";
+return "is_namespace"==null?new String():"is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:46:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
-return "originalname";
+return "originalname"==null?new String():"originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:46:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic"==null?new String():"synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:46:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
-return "is_constant_name";
+return "is_constant_name"==null?new String():"is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:46:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename"==null?new String():"sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:46:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
-return "parenthesized";
+return "parenthesized"==null?new String():"parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:46:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
-return "incrdecr";
+return "incrdecr"==null?new String():"incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:46:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
-return "free_call";
+return "free_call"==null?new String():"free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:46:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
-return "jsdoc_info";
+return "jsdoc_info"==null?new String():"jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:46:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
+assert (propType>=0):"Receive a negative tratment";
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:46:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private static final String propToString(int propType){
+assert (propType!=0):"Receive a size tratment";
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:46:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[174,237]
------------Candidate---------------
 private static final String propToString(int propType){
+if(propType>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case SIDE_EFFECT_FLAGS :
 
 return "side_effect_flags";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 case FREE_CALL :
 
 return "free_call";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 20:46:29 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.toString:[1032, 1030, 965, 1034, 1033, 1031, 1017, 973, 959, 941, 933, 1029, 963, 971, 930, 928, 1020, 1024, 1025, 1022, 1018, 1016, 980, 978, 979, 976, 977, 974, 975, 966, 967, 964, 972, 931, 932, 929, 939, 938, 934, 960, 961]#1.0
Compute Candidate : 2019.09.06 AD at 20:47:26 CDT - 2019.09.06 AD at 23:05:22 CDT , PNumber : 10932, CandNumber : 1002 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:05:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:05:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+return ;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:05:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+return ;
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:05:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
+return ;
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:05:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:05:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+return ;
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:05:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:05:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+return ;
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:05:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+return ;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:05:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4522/pattern-ver1-serial/core.src.main.java.io.undertow.server.protocol.framed.AbstractFramedChannel.java-receive.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:05:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+return ;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4522/pattern-ver1-serial/core.src.main.java.io.undertow.server.protocol.framed.AbstractFramedChannel.java-receive.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:05:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+return ;
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/1695/pattern-ver1-serial/src.fr.project.bluechat.layout.activity.MainActivity.java-newName.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:06:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
+return ;
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/2057/pattern-ver1-serial/multiplication-game.Main.java-ollie.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:06:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
+return ;
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:06:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+return ;
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:06:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
+return ;
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:06:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+continue;
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:06:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+continue;
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:06:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+return ;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:06:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+return ;
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:06:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+return ;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:06:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+return ;
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:06:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+return ;
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:06:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
+return ;
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:06:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+return ;
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:06:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+return ;
 }
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:06:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:06:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
+return ;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2280/pattern-ver1-serial/Project1.src.searchAlgorithms.BFS.java-search.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:06:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:06:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:07:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:07:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:07:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:07:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
-Object obj=x.objectValue;
+ Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:07:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first.getType()==Token.STRING){
+if(first.getType()==0){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:07:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type==0){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:07:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==0){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:07:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString==null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:07:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
+if(obj==null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:07:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+long lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:07:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<=keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:07:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.Collection;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0,myUid;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:07:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:07:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i>keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:07:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0,MAX_SERVICE_NODES;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:07:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:07:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+break;
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:07:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno==-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:08:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+break;
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/1233/pattern-ver1-serial/crm.src.main.java.com.ogg.crm.ui.activity.CustomerPublicListActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:08:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type<=Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:08:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type<=Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:08:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first.getType()==Token.STRING){
+if(first.getType()<=Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:08:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+float lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:08:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<keys.length;i--){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
-value=obj.toString();
+value=keys.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/3728/pattern-ver1-serial/subsystem.src.main.java.org.jboss.as.camel.integration.deployment.CreateCamelContextDeploymentProcessor.java-deploy.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:08:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
-value=obj.toString();
+value=x.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/3728/pattern-ver1-serial/subsystem.src.main.java.org.jboss.as.camel.integration.deployment.CreateCamelContextDeploymentProcessor.java-deploy.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=""){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/276/pattern-ver1-serial/src.edu.cpp.cs.cs141.final_project.User_Interface.TextUI.TextUserInterface.java-drawAlertText.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:08:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
+if(obj!=""){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/276/pattern-ver1-serial/src.edu.cpp.cs.cs141.final_project.User_Interface.TextUI.TextUserInterface.java-drawAlertText.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:08:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type>=Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:08:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type>=Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:08:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first.getType()==Token.STRING){
+if(first.getType()>=Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:08:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+int type=keys[1];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:08:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type!=Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:08:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type!=Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:08:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first.getType()==Token.STRING){
+if(first.getType()!=Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:08:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+Integer type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:08:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+Integer lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:08:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
-if(printType){
+if(true){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:09:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
-if(printAnnotations){
+if(true){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:09:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
-if(printSource){
+if(true){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:09:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0,jsTypeString;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:09:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0,localLevel;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:09:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
+case 203 :
+
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4533/pattern-ver1-serial/src.com.orange.network.game.protocol.constants.GameConstantsProtos.java-valueOf.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:09:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0,lineno;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V13/7060/pattern-ver1-serial/t-relational.src.main.java.eu.unifiedviews.plugins.transformer.relational.Relational.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:09:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+int type=keys[0];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:09:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno<-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:09:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+int type=keys[2];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:09:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type>Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:09:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type>Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:09:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first.getType()==Token.STRING){
+if(first.getType()>Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:09:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno>-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:09:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
+case 10 :
+
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/2044/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.item.ItemRelocatorModule.java-getRelocatorModule.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:09:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
-sb.append(']');
+sb.append('[');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.results.ui.src-gen.org.osate.results.ui.contentassist.antlr.internal.InternalResultsLexer.java-mT__43.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:09:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
-sb.append(' ');
+sb.append('[');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.results.ui.src-gen.org.osate.results.ui.contentassist.antlr.internal.InternalResultsLexer.java-mT__43.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:09:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
+sb.append('[');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.results.ui.src-gen.org.osate.results.ui.contentassist.antlr.internal.InternalResultsLexer.java-mT__43.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:09:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append('[');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.results.ui.src-gen.org.osate.results.ui.contentassist.antlr.internal.InternalResultsLexer.java-mT__43.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:09:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
-sb.append(' ');
+sb.append('[');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.results.ui.src-gen.org.osate.results.ui.contentassist.antlr.internal.InternalResultsLexer.java-mT__43.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:10:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<keys.length;i++,new ArrayList<KeyBinding>()){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:10:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
+case 13 :
+
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/5275/pattern-ver1-serial/src.edu.uiuc.groupmessage.GroupMessageProtos.java-valueOf.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:10:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
+case 0 :
+
+return ;
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/13/pattern-ver1-serial/src.main.java.org.apache.airavata.services.FileResource.java-findByThriftId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:10:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-2){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:10:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
+case 401 :
+
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1693/pattern-ver1-serial/src.main.java.uk.ac.ic.wlgitbridge.snapshot.getdoc.GetDocResult.java-fromJSON.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:10:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<keys.length;type++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:10:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
+
+case 4 :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2088/pattern-ver1-serial/core.src.com.finalstand.game.Screens.PlayScreen.java-findCreepStartingPos.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:10:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0,_afterComposeMethodCache;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:10:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(toString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/1640/pattern-ver1-serial/spring-social-vkontakte.src.main.java.org.springframework.social.vkontakte.api.impl.WallTemplate.java-getPost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:10:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(toString());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/1640/pattern-ver1-serial/spring-social-vkontakte.src.main.java.org.springframework.social.vkontakte.api.impl.WallTemplate.java-getPost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:10:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(sb!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:10:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
+i++;
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:10:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.List;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0,mActions;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:10:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
-sb.append(first.getString());
+sb.append(first.toString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4714/pattern-ver1-serial/portal-impl.src.com.liferay.portal.security.auth.http.HttpAuthManagerImpl.java-generateDigestChallenge.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:10:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0,mRelationId;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:10:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:11:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:11:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:11:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
-Object obj=x.objectValue;
+ final Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:11:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:11:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ final FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:11:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:11:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:11:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:11:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:11:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:11:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:11:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:11:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:11:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:11:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:11:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
-Object obj=x.objectValue;
+ Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:11:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/6749/pattern-ver1-serial/ml.src.main.java.com.spbsu.ml.data.tools.DynamicBinModelBuilder.java-DynamicBinModelBuilder.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:11:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+String jsTypeString=this.jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:12:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
-sb.append(first.getString());
+sb.append(this.first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:12:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first.getType()==Token.STRING){
+if(this.first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:12:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+this.toString();
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:12:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+this.toString();
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:12:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+this.toString();
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:12:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+this.toString();
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:12:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
+this.toString();
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:12:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+this.toString();
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:12:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+this.toString();
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:12:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+this.toString();
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:12:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
+this.toString();
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:12:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+this.toString();
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:12:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
-sb.append(jsTypeString);
+sb.append(jsTypeString.trim());
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:12:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
+sb.append(" : ".trim());
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:12:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
-sb.append(value);
+sb.append(value.trim());
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:12:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
-sb.append(": ");
+sb.append(": ".trim());
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:12:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
-sb.append(" [");
+sb.append(" [".trim());
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:12:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(propToString(type).trim());
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:12:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(getString().trim());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:12:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
-sb.append(first.getString());
+sb.append(first.getString().trim());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:13:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first.getType()==Token.STRING){
-sb.append(first.getString());
+if(getType()==Token.STRING){
+sb.append(getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/7184/pattern-ver1-serial/src.Board.java-rotate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:13:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.TreeSet;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(jsTypeString.isEmpty()){
+return ;
+}
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/1891/pattern-ver1-serial/src.jp.ac.osaka_u.ist.sdl.prevol.db.retriever.MethodDataRetriever.java-retrieveInSpecifiedFiles.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:13:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.Iterator;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type==-1){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:13:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.Iterator;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==-1){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:13:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.Iterator;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first.getType()==Token.STRING){
+if(first.getType()==-1){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:13:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.isEmpty()){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:13:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first.getType()==Token.STRING){
+if(type==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:13:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+lineno++;
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:13:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+type++;
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:13:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+lineno++;
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:13:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+type++;
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:13:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
-if(Token.printTrees){
+if(!Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:13:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
-if(printType){
+if(!printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:13:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
-if(printSource){
+if(!printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:13:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+lineno++;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:13:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+i++;
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:13:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+i++;
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:13:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
-if(this instanceof ScriptOrFnNode){
+if(true){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:14:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
-if(this instanceof StringNode){
+if(true){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:14:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+lineno--;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:14:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+lineno--;
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:14:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+i--;
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:14:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+i--;
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:14:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
+if(first!=null){
+String jsTypeString=first.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/2709/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.expressions.Point2DExpression.java-getTablesInvolved.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:14:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
-value=obj.toString();
+if(first!=null){
+value=first.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/2709/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.expressions.Point2DExpression.java-getTablesInvolved.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:14:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
-value=obj.toString();
+value=obj.toString().trim();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/973/pattern-ver1-serial/src.com.pindroid.authenticator.AuthenticatorActivity.java-handleLogin.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:14:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append(sof.getEncodedSourceEnd()-type);
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:14:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
+synchronized(this){
 value=String.valueOf(x.intValue);
+}
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:14:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+synchronized(sb){
 sb.append(" : ");
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:14:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+synchronized(sb){
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:14:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+synchronized(sb){
 sb.append(' ');
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:14:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+synchronized(sb){
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:14:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+synchronized(sb){
 sb.append(' ');
+}
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:14:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append((int)(getDouble()));
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:14:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
-value=String.valueOf(x.intValue);
+value=String.valueOf((int)(x.intValue));
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:15:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
-sb.append(']');
+sb.append((int)(']'));
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:15:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(propToString((int)(type)));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:15:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+PropListItem x=lookupProperty((int)(type));
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:15:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
-sb.append(' ');
+sb.append((int)(' '));
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:15:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
-sb.append(lineno);
+sb.append((int)(lineno));
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:15:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
+sb.append((int)(' '));
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:15:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+synchronized(sb){
 sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/5664/pattern-ver1-serial/src.tr.broadcast.BroadcastManager.java-onClaimTokenReceive.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:15:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
-value=obj.toString();
+value="";
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:15:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
-value=obj.toString();
+value=null;
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:15:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
-sb.append(jsTypeString);
+sb.append((jsTypeString).toLowerCase());
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:15:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
-sb.append(first.getString());
+sb.append((first.getString()).toLowerCase());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:15:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
+sb.append((" : ").toLowerCase());
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:15:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append((propToString(type)).toLowerCase());
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:15:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append((getString()).toLowerCase());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:15:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
-sb.append(value);
+sb.append((value).toLowerCase());
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:15:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
-sb.append(": ");
+sb.append((": ").toLowerCase());
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:15:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
-sb.append(" [");
+sb.append((" [").toLowerCase());
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:15:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
-private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean broadcast){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
-if(printType){
+if(broadcast){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4539/pattern-ver1-serial/src.main.java.io.minimum.minecraft.superbvote.votes.rewards.VoteReward.java-broadcastVote.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:15:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
-private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+private void toString(StringBuilder sb,boolean printSource,boolean broadcast,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
-if(printAnnotations){
+if(broadcast){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/4539/pattern-ver1-serial/src.main.java.io.minimum.minecraft.superbvote.votes.rewards.VoteReward.java-broadcastVote.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:15:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+synchronized(this){
 sb.append(" : ");
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:16:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+synchronized(this){
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:16:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+synchronized(this){
 sb.append(' ');
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:16:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+synchronized(this){
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:16:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+synchronized(this){
 sb.append(' ');
+}
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:16:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+synchronized(this){
 sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:16:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0,continentName,countryCode;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:16:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(equals(jsTypeString)){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:16:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+if(equals(lineno)){
+return ;
+}
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:16:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+if(equals(type)){
+return ;
+}
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:16:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
+if(equals(type)){
+return ;
+}
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:16:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(" : ".isEmpty()){
+return ;
+}
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:16:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if(jsTypeString.isEmpty()){
+return ;
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:16:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(" : ".isEmpty()){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:16:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+}
+if(sof.getSourceName().isEmpty()){
+return ;
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:16:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+while(true){
+
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:18:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
+while(true){
+
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:20:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+while(true){
+
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:22:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
+}
+while(true){
+
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:22:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+while(true){
+
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:24:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+while(true){
+
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:26:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+while(true){
+
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:28:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
+}
+while(true){
+
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:28:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
+while(true){
+
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:30:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
-value=String.valueOf(x.intValue);
+value=String.format("%04d",x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/350/pattern-ver1-serial/src.main.java.jp.co.tabocom.teratermstation.model.TargetNode.java-sortChildren.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:30:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type>0){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2696/pattern-ver1-serial/src.main.java.br.com.provaServer.infrastructure.deserialization.gson.GsonDeserialization.java-isWithoutRoot.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:30:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type>0){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2696/pattern-ver1-serial/src.main.java.br.com.provaServer.infrastructure.deserialization.gson.GsonDeserialization.java-isWithoutRoot.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:30:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first.getType()==Token.STRING){
+if(first.getType()>0){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2696/pattern-ver1-serial/src.main.java.br.com.provaServer.infrastructure.deserialization.gson.GsonDeserialization.java-isWithoutRoot.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:31:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+i--;
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/2847/pattern-ver1-serial/core.src.com.mygdx.game.GameScreen.java-updateBossBullet.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:31:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if(sb==null){
+return ;
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:31:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(sb==null){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:31:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+if(sb==null){
+return ;
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:31:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if(jsTypeString==null){
+return ;
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:31:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+if(sb==null){
+return ;
+}
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:31:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(sb==null){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:31:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(sb==null){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:31:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString==null){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:31:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(sb==null){
+return ;
+}
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:31:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+if(sb==null){
+return ;
+}
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:31:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb==null){
+return ;
+}
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:31:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+if(sb==null){
+return ;
+}
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:31:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+if(sb==null){
+return ;
+}
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:31:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb==null){
+return ;
+}
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:32:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb==null){
+return ;
+}
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:32:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+if(sb==null){
+return ;
+}
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:32:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if(sb==null){
+return ;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:32:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+if(sb==null){
+return ;
+}
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:32:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(x==null){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:32:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+if(keys==null){
+return ;
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:32:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(sof==null){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:32:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<keys.length;i++,Charset.forName("UTF-8")){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:32:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if(sb!=null){
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:32:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(sb!=null){
 sb.append(" : ");
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:32:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+if(sb!=null){
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:32:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:32:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(" : "!=null){
 sb.append(" : ");
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:32:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if(jsTypeString!=null){
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:32:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(getString()!=null){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:32:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:32:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+if(jsType==null){
+return ;
+}
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:32:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
+}
 }
+if(sb==null){
+return ;
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:32:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(sb==null){
+return ;
+}
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:33:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(type==keys[i]){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:33:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
+if(type==keys[i]){
+return ;
+}
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:33:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
+if(x==lookupProperty(type)){
+return ;
+}
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:33:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
+}
+if(value==null){
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:33:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString.equals(null)){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:33:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
+if(jsType.equals(null)){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:33:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
+if(obj.equals(null)){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:33:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+if(sb!=null){
 sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/5324/pattern-ver1-serial/src.main.java.de.cismet.cids.custom.objecteditors.wrrl_db_mv.HydrologRouteEditor.java-sldZoomStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:33:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+}
+if(sof==null){
+return ;
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:33:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+if(lineno>0){
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:33:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(' '>0){
 sb.append(' ');
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:33:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+if(getDouble()>0){
 sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:33:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if("index".equals(sb)){
+return ;
+}
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:33:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+if("index".equals(sb)){
+return ;
+}
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:33:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if("index".equals(sb)){
+return ;
+}
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:33:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if("index".equals(jsTypeString)){
+return ;
+}
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:33:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+if("index".equals(sb)){
+return ;
+}
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:33:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+if("index".equals(sb)){
+return ;
+}
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:33:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if("index".equals(sb)){
+return ;
+}
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:34:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+if("index".equals(sb)){
+return ;
+}
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:34:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+if("index".equals(sb)){
+return ;
+}
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:34:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if("index".equals(sb)){
+return ;
+}
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:34:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+if(jsType==null){
+return ;
+}
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4743/pattern-ver1-serial/app.src.main.java.com.wafflestudio.shafe.MapManager.java-initializeMapWithSavedValue.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:34:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(sb.equals("TIME")){
+return ;
+}
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:34:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+if(sb.equals("TIME")){
+return ;
+}
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:34:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb.equals("TIME")){
+return ;
+}
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:34:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(jsTypeString.equals("TIME")){
+return ;
+}
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:34:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+if(sb.equals("TIME")){
+return ;
+}
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:34:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb.equals("TIME")){
+return ;
+}
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:34:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+if(sb.equals("TIME")){
+return ;
+}
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:34:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
+if(sb.equals("TIME")){
+return ;
+}
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:34:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+if(sb.equals("TIME")){
+return ;
+}
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:34:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+if(sb.equals("TIME")){
+return ;
+}
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:34:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if("&null".equals(sb)){
+return ;
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:34:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if("&null".equals(sb)){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:34:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+if("&null".equals(sb)){
+return ;
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:34:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if("&null".equals(jsTypeString)){
+return ;
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:34:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+if("&null".equals(sb)){
+return ;
+}
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:35:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if("&null".equals(sb)){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:35:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+if("&null".equals(sb)){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:35:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if("&null".equals(jsTypeString)){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:35:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if("&null".equals(printSource)){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:35:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if(sb.equals("DATETIME")){
+return ;
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:35:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(sb.equals("DATETIME")){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:35:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+if(sb.equals("DATETIME")){
+return ;
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:35:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if(jsTypeString.equals("DATETIME")){
+return ;
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:35:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+if(sb.equals("DATETIME")){
+return ;
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:35:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+if(sb.equals("DATETIME")){
+return ;
+}
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:35:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(sb.equals("DATETIME")){
+return ;
+}
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:35:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
+if(sb.equals("DATETIME")){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:35:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(sb.equals("DATETIME")){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:35:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+if(sb.equals("DATETIME")){
+return ;
+}
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:35:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:35:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:35:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:35:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ final FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:35:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:36:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
-Object obj=x.objectValue;
+ final Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:36:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:36:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:36:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
+if(x==null){
+continue;
+}
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/2120/pattern-ver1-serial/org.dawb.workbench.ui.src.org.dawb.workbench.ui.editors.PlotDataEditor.java-getSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:36:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:36:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:36:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:36:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
-Object obj=x.objectValue;
+ final Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:36:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final int type=keys[i];
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:36:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ final FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:36:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString.isEmpty()){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:36:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(Token.name(type).trim());
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:36:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+sb.append("]");
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:36:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
+sb.append("]");
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:36:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+sb.append("]");
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:36:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ @SuppressWarnings("UnusedAssignment") int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ @SuppressWarnings("UnusedAssignment") String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:36:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ @SuppressWarnings("UnusedAssignment") PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ @SuppressWarnings("UnusedAssignment") String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:36:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ @SuppressWarnings("UnusedAssignment") String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ @SuppressWarnings("UnusedAssignment") String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:36:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ @SuppressWarnings("UnusedAssignment") FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ @SuppressWarnings("UnusedAssignment") String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:36:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ @SuppressWarnings("UnusedAssignment") ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ @SuppressWarnings("UnusedAssignment") String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:37:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
-Object obj=x.objectValue;
+ @SuppressWarnings("UnusedAssignment") Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ @SuppressWarnings("UnusedAssignment") String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:37:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ @SuppressWarnings("UnusedAssignment") int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ @SuppressWarnings("UnusedAssignment") String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:37:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ @SuppressWarnings("UnusedAssignment") int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ @SuppressWarnings("UnusedAssignment") PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:37:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+jsTypeString=jsTypeString;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:37:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+sb=sb;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:37:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+jsTypeString=jsTypeString;
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:37:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.equals("")){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:37:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(x.equals("")){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:37:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+if(keys.equals("")){
+return ;
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:37:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if(i==4){
+continue;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:37:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+lineno=1000;
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:37:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(true){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:37:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
+if(true){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:37:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
+if(true){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:37:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(true){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:37:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append("Error, "+getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4103/pattern-ver1-serial/src.recommendations.nodes.Product.java-Product.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:37:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
-sb.append(first.getString());
+sb.append("Error, "+first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4103/pattern-ver1-serial/src.recommendations.nodes.Product.java-Product.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:37:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append("https://myschool.ru.is/myschool/"+getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:37:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append("https://myschool.ru.is/myschool/"+getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
-sb.append(first.getString());
+sb.append("https://myschool.ru.is/myschool/"+first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append("https://myschool.ru.is/myschool/"+propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append("https://myschool.ru.is/myschool/"+Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+if(jsType!=null){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/258/pattern-ver1-serial/web.src.main.java.com.epam.freelancer.web.controller.UserController.java-addIsComplaintInOrderings.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+Arrays.sort(keys);
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.equals("-1")){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(x.equals("-1")){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(sof.equals("-1")){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.Arrays;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+Arrays.sort(keys);
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/405/pattern-ver1-serial/twitter-topic-strand-core.src.main.java.twittertopicstrand.util.FileOperations.java-getFiles.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ final FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/6206/pattern-ver1-serial/ColFusionServerBLL.src.main.java.edu.pitt.sis.exp.colfusion.bll.BasicTableBL.java-getAttachmentList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/6206/pattern-ver1-serial/ColFusionServerBLL.src.main.java.edu.pitt.sis.exp.colfusion.bll.BasicTableBL.java-getAttachmentList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+if(jsTypeString.contains("deviantart.com")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.contains("deviantart.com")){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4166/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.ContentType.java-getImageType.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(getString()+" votes");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getDouble()+" votes");
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
-sb.append(first.getString());
+sb.append(first.getString()+" votes");
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(propToString(type)+" votes");
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(Token.name(type)+" votes");
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getDouble()-1);
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4594/pattern-ver1-serial/EzSignin.app.src.main.java.signin.ez.ezsignin.MainActivity.java-populateFieldsWithRecord.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+int a=0;
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+int a=0;
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+int a=0;
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:38:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+int a=0;
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:39:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+int a=0;
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:39:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
+int a=0;
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:39:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+int a=0;
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:39:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
+int a=0;
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:39:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+int a=0;
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:39:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+int a=0;
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:39:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append("There was a problem with the call to ManyWho: "+getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:39:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append("There was a problem with the call to ManyWho: "+getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:39:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
-sb.append(first.getString());
+sb.append("There was a problem with the call to ManyWho: "+first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:39:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append("There was a problem with the call to ManyWho: "+propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:39:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append("There was a problem with the call to ManyWho: "+Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:39:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
-private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean readOnly){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
-if(printType){
+if(!readOnly){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5595/pattern-ver1-serial/chrl-parent.chrl-vaadin-utils.src.main.java.at.chrl.vaadin.component.generator.GeneratedAbstractField.java-GeneratedAbstractField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:39:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
-private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+private void toString(StringBuilder sb,boolean printSource,boolean readOnly,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
-if(printAnnotations){
+if(!readOnly){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5595/pattern-ver1-serial/chrl-parent.chrl-vaadin-utils.src.main.java.at.chrl.vaadin.component.generator.GeneratedAbstractField.java-GeneratedAbstractField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:39:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(jsTypeString.equals(sb)){
+return ;
+}
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:39:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(sb.equals(jsTypeString)){
+return ;
+}
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:39:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.equals(sb)){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:39:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(sb.equals(jsTypeString)){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:39:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb.equals(lineno)){
+return ;
+}
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:39:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+if(sb.equals(printSource)){
+return ;
+}
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:39:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+String OUTSTRING="";
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:40:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+String OUTSTRING="";
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:40:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+String OUTSTRING="";
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:40:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+String OUTSTRING="";
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:40:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+String OUTSTRING="";
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:40:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
+String OUTSTRING="";
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:40:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+String OUTSTRING="";
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:40:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
+String OUTSTRING="";
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:40:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+String OUTSTRING="";
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:40:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+String OUTSTRING="";
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:40:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getDouble()*1000);
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:40:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<keys.length;){
+i++;
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:40:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+if(obj==null){
+return ;
+}
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:40:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
-sb.append(first.getString());
+sb.append(Strings.nullToEmpty(first.getString()));
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:40:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(Strings.nullToEmpty(getString()));
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:40:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(Strings.nullToEmpty(Token.name(type)));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:40:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
-sb.append(jsTypeString);
+sb.append(Strings.nullToEmpty(jsTypeString));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:40:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(Strings.nullToEmpty(propToString(type)));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:40:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
+sb.append(Strings.nullToEmpty(" : "));
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:40:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
-sb.append(value);
+sb.append(Strings.nullToEmpty(value));
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:40:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
+int jsType=5;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:41:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
-value=String.valueOf(x.intValue);
+value="";
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:41:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
-value=String.valueOf(x.intValue);
+value=null;
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:41:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append((Token.name(type)).toLowerCase());
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:41:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(Double.isNaN(type)){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:41:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(Double.isNaN(type)){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(jsTypeString.startsWith("-")){
+return ;
+}
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:41:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:41:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:41:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:41:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:41:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:41:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:41:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:41:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:41:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:41:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:41:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString.equalsIgnoreCase(null)){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:41:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(Math.abs(getDouble()));
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:41:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<keys.length;Math.abs(i++)){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
-value=String.valueOf(x.intValue);
+value=String.valueOf(Math.abs(x.intValue));
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:42:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
-sb.append(']');
+sb.append(Math.abs(']'));
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:42:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(propToString(Math.abs(type)));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:42:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+PropListItem x=lookupProperty(Math.abs(type));
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:42:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
-sb.append(' ');
+sb.append(Math.abs(' '));
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:42:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
-sb.append(lineno);
+sb.append(Math.abs(lineno));
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:42:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
+sb.append(Math.abs(' '));
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:42:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
+if(sb!=null){
 sb.append(value);
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/2073/pattern-ver1-serial/app.src.main.java.me.calebjones.spacelaunchnow.content.database.DatabaseManager.java-itemExists.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:42:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
+if(sb!=null){
 sb.append(']');
+}
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/2073/pattern-ver1-serial/app.src.main.java.me.calebjones.spacelaunchnow.content.database.DatabaseManager.java-itemExists.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:42:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
+if(sb!=null){
 sb.append(": ");
+}
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/2073/pattern-ver1-serial/app.src.main.java.me.calebjones.spacelaunchnow.content.database.DatabaseManager.java-itemExists.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:42:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(sb!=null){
 sb.append(" [");
+}
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/2073/pattern-ver1-serial/app.src.main.java.me.calebjones.spacelaunchnow.content.database.DatabaseManager.java-itemExists.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:42:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+int indexSelection=0;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:42:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
+int indexSelection=0;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:42:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+int indexSelection=0;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:42:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
+int indexSelection=0;
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:42:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
+int indexSelection=0;
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:42:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+int indexSelection=0;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:42:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+int indexSelection=0;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:42:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+int indexSelection=0;
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:43:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+int indexSelection=0;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:43:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
+int indexSelection=0;
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:43:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.Arrays;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+int type=keys[i-1];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:43:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+}
+if(sb.equals("setPackMode")){
+return ;
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:43:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(sb.equals("setPackMode")){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:43:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(sof.equals("setPackMode")){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/2611/pattern-ver1-serial/app.src.main.java.com.example.kristian.ideacreator.IdeasContentProvider.java-call.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:43:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append("PATH: \n"+getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:43:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append("PATH: \n"+getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:43:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append("PATH: \n"+propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:43:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
-sb.append(first.getString());
+sb.append("PATH: \n"+first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:43:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append("PATH: \n"+Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:43:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+sb.append(" & ");
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:43:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
+sb.append(" & ");
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:43:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+sb.append(" & ");
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:43:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+sb.append(" & ");
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:43:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(" & ");
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:43:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
+sb.append(" & ");
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:43:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
+sb.append(" & ");
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:43:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(" & ");
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:43:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
+sb.append(" & ");
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:44:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+sb.append(" & ");
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:44:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(jsTypeString.startsWith("https")){
+return ;
+}
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:44:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.startsWith("https")){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6342/pattern-ver1-serial/src.main.java.org.spo.fw.web.Lib_Utils.java-alterGotoUrl.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:44:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+sb.append("    }\n");
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:44:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
+sb.append("    }\n");
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:44:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+sb.append("    }\n");
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:44:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
+sb.append("    }\n");
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:44:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append("    }\n");
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:44:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append("    }\n");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:44:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
+sb.append("    }\n");
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:44:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(String.valueOf(getString()));
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:44:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(String.valueOf(getDouble()));
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:44:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
-sb.append(first.getString());
+sb.append(String.valueOf(first.getString()));
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:44:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(String.valueOf(Token.name(type)));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:44:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(String.valueOf(propToString(type)));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:44:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
-private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+private void toString(StringBuilder sb,boolean getStorageVolumeAtts,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
-if(printSource){
+if(getStorageVolumeAtts){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
-if(printSource){
+if(getStorageVolumeAtts){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/4721/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiDiscoveryManager.java-getStorageVolumeInfoForCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:44:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+int a=1;
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:44:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+int a=1;
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:44:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+int a=1;
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:44:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+int a=1;
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:45:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
+int a=1;
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:45:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+int a=1;
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:45:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+int a=1;
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:45:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+int a=1;
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:45:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
+int a=1;
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:45:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+int a=1;
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:45:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(getString()+"/logout");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:45:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getDouble()+"/logout");
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:45:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
-sb.append(first.getString());
+sb.append(first.getString()+"/logout");
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:45:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(propToString(type)+"/logout");
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:45:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(Token.name(type)+"/logout");
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:45:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append("\nDealer has: \n"+getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:45:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append("\nDealer has: \n"+getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:45:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append("\nDealer has: \n"+propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:45:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
-sb.append(first.getString());
+sb.append("\nDealer has: \n"+first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:45:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append("\nDealer has: \n"+Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:45:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(jsTypeString.equalsIgnoreCase("/")){
+return ;
+}
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:45:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.equalsIgnoreCase("/")){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/3102/pattern-ver1-serial/src.main.java.com.github.kongchen.swagger.docgen.reader.AbstractReader.java-parseOperationPath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:45:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
+boolean jsType=true;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:46:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+String value;
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:46:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+String value;
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:46:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+String value;
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:46:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
+String value;
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:46:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+String value;
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/7341/pattern-ver1-serial/src.datamanagement.UnitManager.java-createUnit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:46:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
+if(sb!=null){
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5497/pattern-ver1-serial/app.src.main.java.hm.orz.chaos114.android.tumekyouen.TitleActivity.java-afterViews.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:46:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+boolean b=true;
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:46:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+boolean b=true;
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:46:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+boolean b=true;
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:46:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
+boolean b=true;
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:46:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+boolean b=true;
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:46:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+boolean b=true;
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:46:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+boolean b=true;
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:46:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+boolean b=true;
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:46:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+boolean b=true;
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:46:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+boolean b=true;
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:46:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null||jsTypeString.isEmpty()){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:46:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+synchronized(this){
 value=obj.toString();
+}
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:46:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
+synchronized(this){
 sb.append(first.getString());
+}
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:47:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+sb.append(" : ");
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:47:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+sb.append(jsTypeString);
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:47:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+sb.append(' ');
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:47:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+sb.append(" [source name: ");
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:47:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+sb.append("] [encoded source length: ");
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:47:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+sb.append("] [base line: ");
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:47:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+sb.append("] [end line: ");
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:47:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+sb.append(']');
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:47:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
+sb.append(' ');
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:47:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+sb.append(jsTypeString);
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:47:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+sb.append(" : ");
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:47:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+sb.append(jsTypeString);
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:47:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+sb.append(' ');
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:47:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+sb.append(lineno);
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:47:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+sb.append(' ');
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:47:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
+sb.append(' ');
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:47:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+sb.append(" : ");
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:47:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
+sb.append(" : ");
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:47:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+sb.append(" : ");
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:48:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+sb.append(" : ");
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:48:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+sb.append(" : ");
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:48:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+sb.append(" : ");
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:48:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+sb.append(" : ");
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:48:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(" : ");
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:48:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(" : ");
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:48:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
 sb.append(" : ");
+if(jsTypeString!=null){
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:48:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+sb.append(getString());
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:48:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+sb.append(getDouble());
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:48:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+sb.append(']');
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:48:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+sb.append(": ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:48:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+sb.append(" [");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:48:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+sb.append(' ');
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:48:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+sb.append(getDouble());
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:48:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(getDouble());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:48:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(getDouble());
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:48:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+sb.append(" : ");
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:48:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+sb.append(']');
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:48:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+sb.append(": ");
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:48:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+sb.append(" [");
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:49:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+sb.append(' ');
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:49:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+sb.append(jsTypeString);
 if(jsTypeString!=null){
 sb.append(" : ");
-sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:49:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+sb.append(lineno);
 if(lineno!=-1){
 sb.append(' ');
-sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:49:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
+sb.append(" : ");
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/2884/pattern-ver1-serial/src.edu.asu.laits.gui.nodeeditor.CalculationsPanelView.java-processNodeEquation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:49:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+sb.append(" : ");
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:49:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+sb.append(" : ");
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:49:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+sb.append(" : ");
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:49:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+sb.append(" : ");
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:49:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+sb.append(" : ");
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:49:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+sb.append(" [source name: ");
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:49:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+sb.append("] [encoded source length: ");
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:49:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+sb.append("] [base line: ");
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:49:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+sb.append("] [end line: ");
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:49:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+sb.append(']');
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:49:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(true){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:49:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(!" : ".equals("")){
 sb.append(" : ");
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:49:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if(!jsTypeString.equals("")){
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:49:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(!getString().equals("")){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:49:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+sb.append(" : ");
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+sb.append(lineno);
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first.getType()==Token.STRING){
+if(first.getType()==Token.STRING==false){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+sb.append(getDouble());
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
+sb.append(getDouble());
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+sb.append(getDouble());
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1||lineno==Long.MIN_VALUE){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type==Token.NUMBER||type==Long.MIN_VALUE){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append(" : ");
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
+sb.append(" : ");
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+sb.append(' ');
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+sb.append(" [source name: ");
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+sb.append("] [encoded source length: ");
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+sb.append("] [base line: ");
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+sb.append("] [end line: ");
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+sb.append(']');
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
-value=String.valueOf(x.intValue);
+value=String.valueOf(x.intValue).replaceAll("\n","");
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
-value=obj.toString();
+value=obj.toString().replaceAll("\n","");
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
-value=String.valueOf(x.intValue);
+value=(String.valueOf(x.intValue)).replace("\\","\\\\");
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
-value=obj.toString();
+value=(obj.toString()).replace("\\","\\\\");
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+int lineno=getLineno();
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:50:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+int lineno=getLineno();
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+sb.append(value);
 }
 break;
 }
-sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+sb.append(']');
 }
 break;
 }
 sb.append(value);
-sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
+sb.append(']');
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
-sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
-sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
+sb.append(": ");
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
-sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
+sb.append(" [");
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+sb.append(']');
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
-sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
-sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+sb.append(": ");
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
-sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+sb.append(" [");
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getDouble()*-1);
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(getDouble());
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(new BigDecimal(getDouble()).setScale(2,RoundingMode.HALF_UP));
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(new BigDecimal(getString()).setScale(2,RoundingMode.HALF_UP));
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
-sb.append(first.getString());
+sb.append(new BigDecimal(first.getString()).setScale(2,RoundingMode.HALF_UP));
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(new BigDecimal(propToString(type)).setScale(2,RoundingMode.HALF_UP));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(new BigDecimal(Token.name(type)).setScale(2,RoundingMode.HALF_UP));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(' ');
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
-sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(' ');
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(getDouble());
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
+try{
 sb.append(value);
+}finally{
+value="target block property";
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
+try{
 sb.append(value);
+}finally{
+value="last local block";
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
+try{
 sb.append(value);
+}finally{
+value="both";
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:51:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+sb.append(value);
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
-sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/3266/pattern-ver1-serial/src.lejosserver.TouchSensor.java-TouchSensor.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+sb.append(']');
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
-sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V23/3266/pattern-ver1-serial/src.lejosserver.TouchSensor.java-TouchSensor.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+assert (sb!=null);
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+assert (sb!=null);
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+assert (sb!=null);
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+assert (sb!=null);
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+assert (sb!=null);
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
+assert (sb!=null);
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+assert (sb!=null);
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+assert (sb!=null);
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
+assert (sb!=null);
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+assert (sb!=null);
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+assert (!jsTypeString.isEmpty());
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+assert (!jsTypeString.isEmpty());
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+sb.append(']');
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+sb.append(": ");
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+sb.append(" [");
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+sb.append(' ');
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
+try{
 sb.append(jsTypeString);
+}finally{
+sb.append(" : ");
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+try{
 sb.append(" : ");
+}finally{
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
-sb.append(' ');
+try{
 sb.append(lineno);
+}finally{
+sb.append(' ');
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:52:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+try{
 sb.append(' ');
+}finally{
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:53:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+try{
 sb.append(' ');
+}finally{
 sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:53:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(getString().subSequence(0,6));
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5102/pattern-ver1-serial/CloudStarProject.CloudStar.src.main.java.com.cloudstar.util.ResultViewBuilder.java-getResultFilesAndDirectoriesView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:53:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
-sb.append(first.getString());
+sb.append(first.getString().subSequence(0,6));
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5102/pattern-ver1-serial/CloudStarProject.CloudStar.src.main.java.com.cloudstar.util.ResultViewBuilder.java-getResultFilesAndDirectoriesView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:53:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(propToString(type).subSequence(0,6));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5102/pattern-ver1-serial/CloudStarProject.CloudStar.src.main.java.com.cloudstar.util.ResultViewBuilder.java-getResultFilesAndDirectoriesView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:53:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(Token.name(type).subSequence(0,6));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5102/pattern-ver1-serial/CloudStarProject.CloudStar.src.main.java.com.cloudstar.util.ResultViewBuilder.java-getResultFilesAndDirectoriesView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:53:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(Double.isNaN(lineno)){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:53:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first.getType()==Token.STRING){
+if(first.getType()==Token.STRING==true){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:53:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(sb!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:53:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
 if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:53:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+if(sb!=null){
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
+}
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:53:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+if(sb!=null){
+if(jsType!=null){
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
+}
+}
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:53:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+if(sb!=null){
+sb.append(Token.name(type));
+if(this instanceof StringNode){
+sb.append(' ');
+sb.append(getString());
+}else {
+if(type==Token.FUNCTION){
+sb.append(' ');
+if(first.getType()==Token.STRING){
+sb.append(first.getString());
+}
+}else {
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
+}
+}
+}
+if(printSource){
+int lineno=getLineno();
+if(lineno!=-1){
+sb.append(' ');
+sb.append(lineno);
+}
+}
+if(printAnnotations){
+int[] keys=getSortedPropTypes();
+for(int i=0;i<keys.length;i++){
+int type=keys[i];
+PropListItem x=lookupProperty(type);
+sb.append(" [");
+sb.append(propToString(type));
+sb.append(": ");
+String value;
+switch (type){
+case TARGETBLOCK_PROP :
+
+value="target block property";
+break;
+case LOCAL_BLOCK_PROP :
+
+value="last local block";
+break;
+case ISNUMBER_PROP :
+
+switch (x.intValue){
+case BOTH :
+
+value="both";
+break;
+case RIGHT :
+
+value="right";
+break;
+case LEFT :
+
+value="left";
+break;
+default :
+
+throw Kit.codeBug();
+}
+break;
+case SPECIALCALL_PROP :
+
+switch (x.intValue){
+case SPECIALCALL_EVAL :
+
+value="eval";
+break;
+case SPECIALCALL_WITH :
+
+value="with";
+break;
+default :
+
+throw Kit.codeBug();
+}
+break;
+default :
+
+Object obj=x.objectValue;
+if(obj!=null){
+value=obj.toString();
+}else {
+value=String.valueOf(x.intValue);
+}
+break;
+}
+sb.append(value);
+sb.append(']');
+}
+}
+if(printType){
+if(jsType!=null){
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
+}
+}
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:53:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(sb!=null){
+if(Token.printTrees){
+sb.append(Token.name(type));
+if(this instanceof StringNode){
+sb.append(' ');
+sb.append(getString());
+}else {
+if(type==Token.FUNCTION){
+sb.append(' ');
+if(first.getType()==Token.STRING){
+sb.append(first.getString());
+}
+}else {
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
+}
+}
+}
+if(printSource){
+int lineno=getLineno();
+if(lineno!=-1){
+sb.append(' ');
+sb.append(lineno);
+}
+}
+if(printAnnotations){
+int[] keys=getSortedPropTypes();
+for(int i=0;i<keys.length;i++){
+int type=keys[i];
+PropListItem x=lookupProperty(type);
+sb.append(" [");
+sb.append(propToString(type));
+sb.append(": ");
+String value;
+switch (type){
+case TARGETBLOCK_PROP :
+
+value="target block property";
+break;
+case LOCAL_BLOCK_PROP :
+
+value="last local block";
+break;
+case ISNUMBER_PROP :
+
+switch (x.intValue){
+case BOTH :
+
+value="both";
+break;
+case RIGHT :
+
+value="right";
+break;
+case LEFT :
+
+value="left";
+break;
+default :
+
+throw Kit.codeBug();
+}
+break;
+case SPECIALCALL_PROP :
+
+switch (x.intValue){
+case SPECIALCALL_EVAL :
+
+value="eval";
+break;
+case SPECIALCALL_WITH :
+
+value="with";
+break;
+default :
+
+throw Kit.codeBug();
+}
+break;
+default :
+
+Object obj=x.objectValue;
+if(obj!=null){
+value=obj.toString();
+}else {
+value=String.valueOf(x.intValue);
+}
+break;
+}
+sb.append(value);
+sb.append(']');
+}
+}
+if(printType){
+if(jsType!=null){
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
+}
+}
+}
+}
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:53:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+sb.append(' ');
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/442/pattern-ver1-serial/homework-g597-dmitrieva.src.main.java.ru.mipt.java2016.homework.g597.dmitrieva.task1.StackCalculator.java-toReversedPolish.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 3, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:53:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+sb.append(' ');
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/442/pattern-ver1-serial/homework-g597-dmitrieva.src.main.java.ru.mipt.java2016.homework.g597.dmitrieva.task1.StackCalculator.java-toReversedPolish.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 3, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:53:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
+sb.append(' ');
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/442/pattern-ver1-serial/homework-g597-dmitrieva.src.main.java.ru.mipt.java2016.homework.g597.dmitrieva.task1.StackCalculator.java-toReversedPolish.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 3, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:53:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+sb.append(' ');
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/442/pattern-ver1-serial/homework-g597-dmitrieva.src.main.java.ru.mipt.java2016.homework.g597.dmitrieva.task1.StackCalculator.java-toReversedPolish.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 3, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:53:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+sb.append(' ');
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/442/pattern-ver1-serial/homework-g597-dmitrieva.src.main.java.ru.mipt.java2016.homework.g597.dmitrieva.task1.StackCalculator.java-toReversedPolish.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 3, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:53:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+sb.append(' ');
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/442/pattern-ver1-serial/homework-g597-dmitrieva.src.main.java.ru.mipt.java2016.homework.g597.dmitrieva.task1.StackCalculator.java-toReversedPolish.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 3, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:54:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
+sb.append(' ');
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/442/pattern-ver1-serial/homework-g597-dmitrieva.src.main.java.ru.mipt.java2016.homework.g597.dmitrieva.task1.StackCalculator.java-toReversedPolish.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 3, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:54:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+assert (jsTypeString!=jsType.toString());
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:54:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+assert (type!=keys[i]);
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:54:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+assert (x!=lookupProperty(type));
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:54:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+assert (sof!=(ScriptOrFnNode)this);
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:54:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+assert (jsTypeString!=null);
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:54:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
+assert (x!=null);
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:54:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+assert (obj!=null);
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:54:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:54:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:54:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:54:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:54:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:54:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:54:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:54:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:54:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:54:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+if(sb.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:54:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append(getString().replace("\\n","\n"));
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/3956/pattern-ver1-serial/Barlift.app.src.main.java.com.barliftapp.barlift.fragment.DealFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:54:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
-sb.append(first.getString());
+sb.append(first.getString().replace("\\n","\n"));
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/3956/pattern-ver1-serial/Barlift.app.src.main.java.com.barliftapp.barlift.fragment.DealFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:55:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+assert (sb!=null);
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/126/pattern-ver1-serial/main.table.org.gamegineer.table.core.src.org.gamegineer.table.core.ComponentPath.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:55:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+assert (sb!=null);
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/126/pattern-ver1-serial/main.table.org.gamegineer.table.core.src.org.gamegineer.table.core.ComponentPath.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:55:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+assert (sb!=null);
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/126/pattern-ver1-serial/main.table.org.gamegineer.table.core.src.org.gamegineer.table.core.ComponentPath.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:55:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
-sb.append(' ');
+try{
 sb.append(getDouble());
+}finally{
+sb.append(' ');
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/2377/pattern-ver1-serial/common.src.main.java.slash.common.io.Files.java-writeToTempFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:55:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if(jsTypeString.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:55:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
+}
+if(value.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:55:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.isEmpty()){
+System.out.println("Team has to have a name");
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:55:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append(' ');
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:55:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
+sb.append(" [source name: ");
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:55:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append("] [encoded source length: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:55:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append("] [base line: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:55:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append("] [end line: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:55:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append(']');
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:55:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:55:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(" [source name: ");
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:55:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+assert (sb!=null);
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:55:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+assert (sb!=null);
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:55:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+assert (sb!=null);
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:55:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+assert (sb!=null);
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:56:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+assert (sb!=null);
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:56:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+assert (sb!=null);
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:56:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+assert (sb!=null);
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:56:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+assert (sb!=null);
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:56:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
+assert (sb!=null);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:56:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+assert (sb!=null);
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:56:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null||"查看红包".equals(jsTypeString)){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:56:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
+if(jsType!=null||"查看红包".equals(jsType)){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:56:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
+if(obj!=null||"查看红包".equals(obj)){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:56:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1||"查看红包".equals(lineno)){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:56:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type==Token.NUMBER||"查看红包".equals(type)){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:56:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1||lineno==3){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:56:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==Token.FUNCTION||type==3){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:56:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type==Token.NUMBER||type==3){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:56:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+sb.append(first.getString());
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:56:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+sb.append(propToString(type));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:56:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null||jsTypeString==""){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:56:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
+if(obj!=null||obj==""){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:56:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno<0||lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:57:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type<0||type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:57:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type<0||type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:57:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first.getType()==Token.STRING){
+if(first.getType()<0||first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:57:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(sof.getSourceName());
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:57:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(sof.getBaseLineno());
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:57:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+value=obj.toString();
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:57:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+sb.append(propToString(type));
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:57:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
+value=obj.toString();
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:57:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsType!=null){
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:57:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+String jsTypeString=jsType.toString();
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:57:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+String jsTypeString=jsType.toString();
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:57:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(first.getString());
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:57:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+sb.append(propToString(type));
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:57:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+sb.append(propToString(type));
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:57:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1||lineno==0){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:57:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type==Token.NUMBER||type==0){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:57:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
+sb.append(sof.getSourceName());
 if(printSource){
 sb.append(" [source name: ");
-sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:57:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
+sb.append(sof.getBaseLineno());
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:57:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
+sb.append(sof.getEndLineno());
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:57:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:58:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:58:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+if(jsTypeString.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:58:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:58:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+}
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:58:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:58:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:58:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
+}
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:58:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+if(sb.getClass().getSimpleName().startsWith("SystemException")){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:58:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:58:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1||lineno>9){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:58:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type==Token.NUMBER||type>9){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:58:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getDouble()+" -u "+sb);
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:58:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(Token.name(type)+" -u "+sb);
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:58:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getDouble()+" -u "+printSource);
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:58:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getDouble()+" -u "+printAnnotations);
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:58:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append(getDouble()+" -u "+printType);
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:58:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(Token.name(type)+" -u "+printSource);
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:58:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
+sb.append(Token.name(type)+" -u "+printAnnotations);
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:58:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
+sb.append(first.getString());
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/4848/pattern-ver1-serial/marketplace-frontend.src.main.java.org.xine.marketplace.frontend.views.controller.requisitions.RequisitionSaverBean.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:59:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+sb.append(propToString(type));
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:59:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append(sof.getSourceName());
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:59:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append(sof.getBaseLineno());
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:59:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append(sof.getEndLineno());
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:59:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
+sb.append(fn.getFunctionName());
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/1924/pattern-ver1-serial/src.gui.map.MapDrawerPanel.java-restoreSession.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:59:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+sb.append(sof.getSourceName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/1924/pattern-ver1-serial/src.gui.map.MapDrawerPanel.java-restoreSession.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:59:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+sb.append(sof.getBaseLineno());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/1924/pattern-ver1-serial/src.gui.map.MapDrawerPanel.java-restoreSession.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:59:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+sb.append(sof.getEndLineno());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/1924/pattern-ver1-serial/src.gui.map.MapDrawerPanel.java-restoreSession.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:59:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:59:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:59:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:59:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:59:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:59:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:59:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:59:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:59:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.06 AD at 23:59:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:00:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1&&lineno<4000000){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:00:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first.getType()==Token.STRING){
+if(first.getType()==Token.STRING&&first.getType()<4000000){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:00:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+String loc=sof.getSourceName();
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
-sb.append(sof.getSourceName());
+sb.append(loc);
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 2, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:00:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null||jsTypeString==null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:00:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
+if(jsType!=null||jsType==null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:00:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
+if(obj!=null||obj==null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:00:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null||jsTypeString.trim().isEmpty()){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:00:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
-sb.append(first.getString());
+sb.append(first==null?null:first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:00:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1&&lineno!=9999){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:00:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type==Token.NUMBER&&type!=9999){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:00:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(-1>0&&lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:00:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first.getType()==Token.STRING){
+if(Token.STRING>0&&first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:00:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
-sb.append(first.getString());
+sb.append(first!=null?first.getString():null);
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:00:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
+FunctionNode fn=(FunctionNode)this;
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:00:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+FunctionNode fn=(FunctionNode)this;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:00:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+FunctionNode fn=(FunctionNode)this;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:00:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:00:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:00:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:01:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:01:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:01:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:01:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:01:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:01:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:01:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:01:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first.getType()==Token.STRING){
+if(first!=null&&first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6571/pattern-ver1-serial/src.main.java.com.intel.jndn.management.EncodingHelper.java-encodeControlParameters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:01:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-if(first.getType()==Token.STRING){
+if(first==null||first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/1012/pattern-ver1-serial/common.buildcraft.robotics.StationIndex.java-equals.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:01:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:01:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:01:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:01:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:01:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+assert (sb!=null):"Appointments day is not allowed to be null!";
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:01:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:01:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:01:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:01:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:01:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+assert (sb!=null):"Appointments day is not allowed to be null!";
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:01:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+ final String currency=propToString(type);
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(currency);
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/3650/pattern-ver1-serial/projects.OG-Financial.src.com.opengamma.financial.analytics.model.future.InterestRateFutureDefaultValuesFunction.java-canApplyTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 2, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:02:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final String currency=sof.getSourceName();
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
-sb.append(sof.getSourceName());
+sb.append(currency);
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/3650/pattern-ver1-serial/projects.OG-Financial.src.com.opengamma.financial.analytics.model.future.InterestRateFutureDefaultValuesFunction.java-canApplyTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 2, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:02:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+synchronized(this){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:02:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+synchronized(this){
 sb.append(' ');
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:02:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+synchronized(this){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:02:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:02:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:02:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:02:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+if(jsType==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:02:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:02:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:02:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+if(lineno>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:02:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(" : "==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:02:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if(jsTypeString==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:02:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(" : "==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:02:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:02:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+sb.append(Token.name(type));
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:02:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString==null){
+jsTypeString="";
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/755/pattern-ver1-serial/src.org.simiancage.bukkit.messagechangerlite.MessageChangerLite.java-getMessage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:02:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.equals("")){
+jsTypeString="Manchester United FC";
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4958/pattern-ver1-serial/FootballScores.app.src.main.java.barqsoft.footballscores.widget.ScoresWidgetIntentService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:02:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+sb.append(" (");
 sb.append(jsTypeString);
+sb.append(") ");
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+sb.append(" (");
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
+sb.append(") ");
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+sb.append(" (");
 sb.append(lineno);
+sb.append(") ");
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(" (");
+sb.append(") ");
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+sb.append(" (");
 sb.append(getDouble());
+sb.append(") ");
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+sb.append(" (");
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
+sb.append(") ");
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+sb.append(" (");
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
+sb.append(") ");
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
+if(sb!=null){
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(sb!=null){
 sb.append(" : ");
-sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
-sb.append(' ');
+if(sb!=null){
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb!=null){
 sb.append(' ');
-sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
-sb.append(' ');
+if(sb!=null){
 sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+if(sb!=null){
 sb.append(' ');
-sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+value=String.valueOf(x.intValue);
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(sb!=null){
 sb.append(" : ");
+}
+if(sb!=null){
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/1406/pattern-ver1-serial/src.com.netease.qa.emmagee.utils.TrafficInfo.java-getTrafficInfo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb!=null){
 sb.append(' ');
+}
+if(sb!=null){
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/1406/pattern-ver1-serial/src.com.netease.qa.emmagee.utils.TrafficInfo.java-getTrafficInfo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+if(sb!=null){
 sb.append(' ');
+}
+if(sb!=null){
 sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/1406/pattern-ver1-serial/src.com.netease.qa.emmagee.utils.TrafficInfo.java-getTrafficInfo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
-sb.append(']');
+sb.append(']'+",");
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
-sb.append(']');
+sb.append(']'+",");
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(' '+",");
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(" : "!=null){
 sb.append(" : ");
+}
+if(jsTypeString!=null){
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V46/1411/pattern-ver1-serial/hmis-service-v2015.src.main.java.com.servinglynk.hmis.warehouse.service.converter.HealthinsuranceConverter.java-entityToModel.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:03:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(jsTypeString==null){
+return ;
+}
+if(sb==null){
+return ;
+}
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:04:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString==null){
+return ;
+}
+if(sb==null){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:04:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
+try{
 sb.append(value);
+}finally{
+value=String.valueOf(x.intValue);
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:04:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.equals("127.0.0.1")){
+jsTypeString="114.113.202.141";
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/5284/pattern-ver1-serial/src.netease.pomelo.chat.MainActivity.java-responseData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:04:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(sb.equals("CALL_RECEIVED_AT")){
+return ;
+}
 sb.append(" : ");
 sb.append(jsTypeString);
+if(sb.equals("NAME")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:04:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+if(sb.equals("CALL_RECEIVED_AT")){
+return ;
+}
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
+if(sb.equals("NAME")){
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:04:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb.equals("CALL_RECEIVED_AT")){
+return ;
+}
 sb.append(' ');
 sb.append(lineno);
+if(sb.equals("NAME")){
+return ;
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:04:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(jsTypeString.equals("CALL_RECEIVED_AT")){
+return ;
+}
 sb.append(" : ");
 sb.append(jsTypeString);
+if(jsTypeString.equals("NAME")){
+return ;
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:04:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if(sb.equals("CALL_RECEIVED_AT")){
+return ;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
+if(sb.equals("NAME")){
+return ;
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:04:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
+if(sb.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(sb.equals("NAME")){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:04:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+if(sb.equals("CALL_RECEIVED_AT")){
+return ;
+}
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
+}
+if(sb.equals("NAME")){
+return ;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:04:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(sb.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+if(sb.equals("NAME")){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:04:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.equals("CALL_RECEIVED_AT")){
+return ;
+}
+if(jsTypeString.equals("NAME")){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:04:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(sof.getSourceName());
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append(sof.getSourceName());
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:04:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(sof.getBaseLineno());
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
+sb.append(sof.getBaseLineno());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:04:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(sof.getEndLineno());
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
+sb.append(sof.getEndLineno());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:04:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null&&!jsTypeString.equals("")){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:04:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
+if(jsType!=null&&!jsType.equals("")){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:04:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
+if(obj!=null&&!obj.equals("")){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:04:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
-sb.append(jsTypeString);
+sb.append(" : ");
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:04:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
+sb.append(jsTypeString);
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:05:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1339/pattern-ver1-serial/app.src.main.java.com.mobile.mipago.mipago.MainActivity.java-onKeyDown.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:05:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1339/pattern-ver1-serial/app.src.main.java.com.mobile.mipago.mipago.MainActivity.java-onKeyDown.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:05:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1339/pattern-ver1-serial/app.src.main.java.com.mobile.mipago.mipago.MainActivity.java-onKeyDown.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:05:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb!=null){
 sb.append(' ');
+}
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1339/pattern-ver1-serial/app.src.main.java.com.mobile.mipago.mipago.MainActivity.java-onKeyDown.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:05:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+if(sb!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5497/pattern-ver1-serial/app.src.main.java.hm.orz.chaos114.android.tumekyouen.TitleActivity.java-afterViews.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:05:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+if(sb!=null){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5497/pattern-ver1-serial/app.src.main.java.hm.orz.chaos114.android.tumekyouen.TitleActivity.java-afterViews.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:05:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(" : "!=null){
 sb.append(" : ");
+}else {
+sb.append("");
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/6520/pattern-ver1-serial/src.main.java.org.metadatacenter.submission.biosample.core.BioSampleValidator.java-generateBioSampleSubmissionXML.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:05:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if(jsTypeString!=null){
 sb.append(jsTypeString);
+}else {
+sb.append("");
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/6520/pattern-ver1-serial/src.main.java.org.metadatacenter.submission.biosample.core.BioSampleValidator.java-generateBioSampleSubmissionXML.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:05:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
+if(propToString(type)!=null){
 sb.append(propToString(type));
+}else {
+sb.append("");
+}
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/6520/pattern-ver1-serial/src.main.java.org.metadatacenter.submission.biosample.core.BioSampleValidator.java-generateBioSampleSubmissionXML.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:05:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
+if(value!=null){
 sb.append(value);
+}else {
+sb.append("");
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/6520/pattern-ver1-serial/src.main.java.org.metadatacenter.submission.biosample.core.BioSampleValidator.java-generateBioSampleSubmissionXML.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:05:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
+if(": "!=null){
 sb.append(": ");
+}else {
+sb.append("");
+}
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/6520/pattern-ver1-serial/src.main.java.org.metadatacenter.submission.biosample.core.BioSampleValidator.java-generateBioSampleSubmissionXML.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:05:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
+}
+if(x==null||value==null){
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3334/pattern-ver1-serial/src.org.nschmidt.ldparteditor.data.VM03Adjacency.java-linkedCommonFaces.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:05:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
+}
+if(value==null||x==null){
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3334/pattern-ver1-serial/src.org.nschmidt.ldparteditor.data.VM03Adjacency.java-linkedCommonFaces.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:05:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
+}
+if(value==null){
+value=keys.toString();
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/70/pattern-ver1-serial/app.src.main.java.kr.ac.snu.imlab.scdc.service.core.SCDCService.java-changeConfig.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:05:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
+}
+if(value==null){
+value=x.toString();
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/70/pattern-ver1-serial/app.src.main.java.kr.ac.snu.imlab.scdc.service.core.SCDCService.java-changeConfig.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:05:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
+}
+if(value==null){
+value=sb.toString();
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/70/pattern-ver1-serial/app.src.main.java.kr.ac.snu.imlab.scdc.service.core.SCDCService.java-changeConfig.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:06:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(x==null){
+throw new IllegalStateException("User isn't registered! "+type);
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:06:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
+if(value!=String.valueOf(x.intValue)){
 sb.append(value);
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:06:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
+if(value!=String.valueOf(x.intValue)){
 sb.append(']');
+}
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:06:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+if(jsTypeString.startsWith("/")){
+jsTypeString=jsTypeString.substring(1);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:06:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.startsWith("/")){
+jsTypeString=jsTypeString.substring(1);
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:06:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
 sb.append(jsTypeString);
+sb.append(" : ");
+if(jsTypeString!=null){
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:06:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+if(jsTypeString!=null){
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/5263/pattern-ver1-serial/site.src.main.java.org.eastbar.site.ConsoleListener.java-stopListen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:06:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
+if(sb!=null){
 sb.append(": ");
+}
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
-sb.append(value);
-sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/4517/pattern-ver1-serial/alexandria.app.src.main.java.it.jaschke.alexandria.MainActivity.java-restoreActionBar.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:06:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(sb!=null){
 sb.append(" [");
+}
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
-sb.append(value);
-sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/4517/pattern-ver1-serial/alexandria.app.src.main.java.it.jaschke.alexandria.MainActivity.java-restoreActionBar.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:06:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
-sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
-sb.append(value);
+if(sb!=null){
 sb.append(']');
+}
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/4517/pattern-ver1-serial/alexandria.app.src.main.java.it.jaschke.alexandria.MainActivity.java-restoreActionBar.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:06:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(sb!=null){
 sb.append(" [");
+}
 sb.append(propToString(type));
-sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
-sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/4517/pattern-ver1-serial/alexandria.app.src.main.java.it.jaschke.alexandria.MainActivity.java-restoreActionBar.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:06:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
+if(sb!=null){
 sb.append(propToString(type));
+}
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
-sb.append(value);
-sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/4517/pattern-ver1-serial/alexandria.app.src.main.java.it.jaschke.alexandria.MainActivity.java-restoreActionBar.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:06:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
+if(sb!=null){
 sb.append(propToString(type));
-sb.append(": ");
+}
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
-sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/4517/pattern-ver1-serial/alexandria.app.src.main.java.it.jaschke.alexandria.MainActivity.java-restoreActionBar.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 0, DEL : 6
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:06:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if(sb==null||jsTypeString==null){
+throw new NullPointerException();
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:06:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(sb==null||jsTypeString==null){
+throw new NullPointerException();
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:06:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
+}
+if(sb==null||value==null){
+throw new NullPointerException();
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:06:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.contains("phpreturn")){
+jsTypeString=jsTypeString.replace("php","php\n");
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/2350/pattern-ver1-serial/src.main.java.ru.andyskvo.main.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:06:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.contains("#")){
+jsTypeString=jsTypeString.split("#")[0];
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3981/pattern-ver1-serial/hdiv-core.src.main.java.org.hdiv.filter.ValidatorHelperRequest.java-restoreState.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:06:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/430/pattern-ver1-serial/UniversalPhotoStudio.src.com.gmail.charleszq.picorner.ui.ImageDetailFragment.java-onActivityCreated.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:07:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+if(lineno==12){
+return ;
+}else {
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4902/pattern-ver1-serial/app.src.main.java.com.cs180project.ucrclasses.BaseCalendarActivity.java-interpretTime.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:07:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
-sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
+if(": "!=null){
 sb.append(value);
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:07:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
-sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
+if(" ["!=null){
 sb.append(value);
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/1112/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.xtremio.XtremIOSnapshotOperations.java-createGroupSnapshots.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:07:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
-value=obj.toString();
-}else {
+if(obj==null){
 value=String.valueOf(x.intValue);
+}else {
+value=obj.toString();
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/7842/pattern-ver1-serial/plugins.org.csstudio.saverestore.ui.src.org.csstudio.saverestore.ui.util.RepositoryTree.java-getValueFromComponent.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:07:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+if(jsTypeString.endsWith("/")==false){
+jsTypeString=jsTypeString+"/";
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:07:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.endsWith("/")==false){
+jsTypeString=jsTypeString+"/";
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:07:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+synchronized(this){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
+}
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:07:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+if(lineno!=-1){
+sb.append(' ');
+sb.append(lineno);
+}
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 1, DEL : 10
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:07:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
-sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:07:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
-sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:07:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
-sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:07:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
-sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:07:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
 if(jsTypeString!=null){
+if(sb!=null){
 sb.append(" : ");
+}
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/7882/pattern-ver1-serial/RaspiMediaCenter.src.raspimediacenter.Logic.Utilities.ScraperUtils.java-scraperParseAlbum.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:07:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
+if(" : "!=null){
+if(sb!=null){
 sb.append(jsTypeString);
+}
+sb.append(" : ");
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/7882/pattern-ver1-serial/RaspiMediaCenter.src.raspimediacenter.Logic.Utilities.ScraperUtils.java-scraperParseAlbum.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:07:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 8, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:07:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+synchronized(this){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:08:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+synchronized(this){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:08:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+long startTime=System.currentTimeMillis();
 sb.append(" : ");
 sb.append(jsTypeString);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:08:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+long startTime=System.currentTimeMillis();
 sb.append(' ');
 sb.append(lineno);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:08:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+long startTime=System.currentTimeMillis();
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:08:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
+long startTime=System.currentTimeMillis();
 value=String.valueOf(x.intValue);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:08:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+long startTime=System.currentTimeMillis();
 value=obj.toString();
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:08:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+long startTime=System.currentTimeMillis();
 sb.append(' ');
 sb.append(getDouble());
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:08:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+long startTime=System.currentTimeMillis();
 sb.append(' ');
 sb.append(getString());
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:08:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+long startTime=System.currentTimeMillis();
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:08:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+long startTime=System.currentTimeMillis();
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:08:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+long startTime=System.currentTimeMillis();
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:08:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:08:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:08:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:08:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(printSource){
+int lineno=getLineno();
+if(lineno!=-1){
+sb.append(' ');
+sb.append(lineno);
+}
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
-}
 }
 }
-if(printSource){
-int lineno=getLineno();
-if(lineno!=-1){
-sb.append(' ');
-sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:08:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
-}
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:08:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:09:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
-if(first.getType()==Token.STRING){
-sb.append(first.getString());
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:09:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+synchronized(this){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:09:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/1889/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.internal.partition.impl.PartitionReplicaStateChecker.java-isReplicaInSyncState.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 0, DEL : 16
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:09:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3131/pattern-ver1-serial/src.cofh.tweak.asmhooks.render.RenderGlobal.java-markRenderers.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:09:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
+}else {
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2567/pattern-ver1-serial/bridge-impl.src.main.java.com.liferay.faces.bridge.internal.BridgePhaseBaseImpl.java-initBridgeRequestScope.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:09:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+if(jsType!=null){
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 1, DEL : 16
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:09:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(jsType!=null){
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
+}
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 1, DEL : 16
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:09:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+if(jsType!=null){
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
+}
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 1, DEL : 16
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:09:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.substring(11,19).equals("00:00:00")){
+jsTypeString=jsTypeString.substring(0,11)+"23:59:59"+jsTypeString.substring(19);
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/2005/pattern-ver1-serial/dspace-oai.src.main.java.org.dspace.xoai.filter.DateUntilFilter.java-buildSolrQuery.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:09:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null&&jsTypeString.trim().length()==0){
+jsTypeString=null;
+}
+if(jsTypeString!=null||jsTypeString.trim().length()==0){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5053/pattern-ver1-serial/src.edu.clemson.lph.civet.prefs.CivetConfig.java-getEmailErrorsDirPath.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 7, INS : 12, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:09:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.toString().contains("E")&&jsTypeString.toString().charAt(jsTypeString.indexOf("E")+1)!='-'&&Integer.parseInt(jsTypeString.toString().substring(jsTypeString.indexOf("E")+1,jsTypeString.length()))<=15){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/476/pattern-ver1-serial/app.src.main.java.com.davidsgk.microcalc.MainActivity.java-Interpreter.pattern
MATCHLEVEL : ALL
ALL : 30, UPD : 0, INS : 30, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:09:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 36, UPD : 0, INS : 1, DEL : 35
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:09:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
+synchronized(this){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
+}
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 52, UPD : 52, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:09:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2729/pattern-ver1-serial/Spykes.CloudVision.app.src.main.java.inovation.lab.cloudvision.Speech.java-onInit.pattern
MATCHLEVEL : ALL
ALL : 52, UPD : 52, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:09:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
+sb.append(getDouble());
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6693/pattern-ver1-serial/app.src.main.java.mindpop.learnpop.WebItem.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 55, UPD : 55, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:09:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 63, UPD : 0, INS : 0, DEL : 63
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:09:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 63, UPD : 63, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:09:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 63, UPD : 63, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:09:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
-}
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/2485/pattern-ver1-serial/plugin-commons.src.main.java.com.photon.phresco.plugin.commons.PluginUtils.java-startNode.pattern
MATCHLEVEL : ALL
ALL : 63, UPD : 63, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:10:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
-if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/2485/pattern-ver1-serial/plugin-commons.src.main.java.com.photon.phresco.plugin.commons.PluginUtils.java-startNode.pattern
MATCHLEVEL : ALL
ALL : 63, UPD : 63, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:10:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/430/pattern-ver1-serial/UniversalPhotoStudio.src.com.gmail.charleszq.picorner.ui.ImageDetailFragment.java-onActivityCreated.pattern
MATCHLEVEL : ALL
ALL : 63, UPD : 63, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:10:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
+}
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 64, UPD : 0, INS : 1, DEL : 63
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:10:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
+}
+}else {
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
 }
 }else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 64, UPD : 0, INS : 1, DEL : 63
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:10:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
+}
+}else {
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
 }
 }else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
+}
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 64, UPD : 0, INS : 1, DEL : 63
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:10:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
+}
+}
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 64, UPD : 0, INS : 1, DEL : 63
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:10:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first.getType()==Token.STRING){
-sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
 }else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
-}
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4389/pattern-ver1-serial/app.src.main.java.com.gamble.unopp.GameScreenActivity.java-playCard.pattern
MATCHLEVEL : ALL
ALL : 77, UPD : 0, INS : 0, DEL : 77
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:10:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first.getType()==Token.STRING){
-sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
-}
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 77, UPD : 77, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:10:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first.getType()==Token.STRING){
-sb.append(first.getString());
-}
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 77, UPD : 77, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
+}
+}
+}else {
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
 }
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 77, UPD : 77, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:10:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first.getType()==Token.STRING){
-sb.append(first.getString());
-}
 }else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
-}
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2933/pattern-ver1-serial/common.common-io.src.main.java.com.twelvemonkeys.io.AbstractCachedSeekableStream.java-seekImpl.pattern
MATCHLEVEL : ALL
ALL : 77, UPD : 77, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:10:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first.getType()==Token.STRING){
-sb.append(first.getString());
-}
 }else {
-if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2933/pattern-ver1-serial/common.common-io.src.main.java.com.twelvemonkeys.io.AbstractCachedSeekableStream.java-seekImpl.pattern
MATCHLEVEL : ALL
ALL : 77, UPD : 77, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:10:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
-}
-}
-if(printAnnotations){
-int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
-sb.append(" [");
-sb.append(propToString(type));
-sb.append(": ");
-String value;
-switch (type){
-case TARGETBLOCK_PROP :
-
-value="target block property";
-break;
-case LOCAL_BLOCK_PROP :
-
-value="last local block";
-break;
-case ISNUMBER_PROP :
-
-switch (x.intValue){
-case BOTH :
-
-value="both";
-break;
-case RIGHT :
-
-value="right";
-break;
-case LEFT :
-
-value="left";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-case SPECIALCALL_PROP :
-
-switch (x.intValue){
-case SPECIALCALL_EVAL :
-
-value="eval";
-break;
-case SPECIALCALL_WITH :
-
-value="with";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-default :
-
-Object obj=x.objectValue;
-if(obj!=null){
-value=obj.toString();
-}else {
-value=String.valueOf(x.intValue);
-}
-break;
-}
-sb.append(value);
-sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/1697/pattern-ver1-serial/yamcs-core.src.main.java.org.yamcs.xtceproc.AlarmChecker.java-performAlarmCheckingEnumerated.pattern
MATCHLEVEL : ALL
ALL : 90, UPD : 0, INS : 0, DEL : 90
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:10:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
+}else {
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 211, UPD : 211, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:10:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
+import java.util.Random;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
+}
+}
+}else {
+if(type==Token.FUNCTION){
+sb.append(' ');
+if(first.getType()==Token.STRING){
+sb.append(first.getString());
+}
+}else {
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V10/7613/pattern-ver1-serial/src.team006.RobotTasks.java-attackMoveToLocation.pattern
MATCHLEVEL : ALL
ALL : 211, UPD : 211, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:10:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
+}
+}
+}else {
+int[] keys=getSortedPropTypes();
+for(int i=0;i<keys.length;i++){
+int type=keys[i];
+PropListItem x=lookupProperty(type);
+sb.append(" [");
+sb.append(propToString(type));
+sb.append(": ");
+String value;
+switch (type){
+case TARGETBLOCK_PROP :
+
+value="target block property";
+break;
+case LOCAL_BLOCK_PROP :
+
+value="last local block";
+break;
+case ISNUMBER_PROP :
+
+switch (x.intValue){
+case BOTH :
+
+value="both";
+break;
+case RIGHT :
+
+value="right";
+break;
+case LEFT :
+
+value="left";
+break;
+default :
+
+throw Kit.codeBug();
+}
+break;
+case SPECIALCALL_PROP :
+
+switch (x.intValue){
+case SPECIALCALL_EVAL :
+
+value="eval";
+break;
+case SPECIALCALL_WITH :
+
+value="with";
+break;
+default :
+
+throw Kit.codeBug();
+}
+break;
+default :
+
+Object obj=x.objectValue;
+if(obj!=null){
+value=obj.toString();
+}else {
+value=String.valueOf(x.intValue);
 }
+break;
 }
+sb.append(value);
+sb.append(']');
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V36/2665/pattern-ver1-serial/tajo-client.src.main.java.org.apache.tajo.client.TajoDump.java-main.pattern
MATCHLEVEL : ALL
ALL : 211, UPD : 211, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:10:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
-if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first.getType()==Token.STRING){
-sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
-}
-}
-if(printSource){
-int lineno=getLineno();
-if(lineno!=-1){
-sb.append(' ');
-sb.append(lineno);
-}
-}
-if(printAnnotations){
-int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
-sb.append(" [");
-sb.append(propToString(type));
-sb.append(": ");
-String value;
-switch (type){
-case TARGETBLOCK_PROP :
-
-value="target block property";
-break;
-case LOCAL_BLOCK_PROP :
-
-value="last local block";
-break;
-case ISNUMBER_PROP :
-
-switch (x.intValue){
-case BOTH :
-
-value="both";
-break;
-case RIGHT :
-
-value="right";
-break;
-case LEFT :
-
-value="left";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-case SPECIALCALL_PROP :
-
-switch (x.intValue){
-case SPECIALCALL_EVAL :
-
-value="eval";
-break;
-case SPECIALCALL_WITH :
-
-value="with";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-default :
-
-Object obj=x.objectValue;
-if(obj!=null){
-value=obj.toString();
-}else {
-value=String.valueOf(x.intValue);
-}
-break;
-}
-sb.append(value);
-sb.append(']');
-}
-}
-if(printType){
-if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/3408/pattern-ver1-serial/COMP90015ChatClient.src.tiredale.client.ChatClientSocketThread.java-IdentityChangeResponse.pattern
MATCHLEVEL : ALL
ALL : 211, UPD : 211, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:10:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
-if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first.getType()==Token.STRING){
-sb.append(first.getString());
-}
-}else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
-}
-}
-}
-if(printSource){
-int lineno=getLineno();
-if(lineno!=-1){
-sb.append(' ');
-sb.append(lineno);
-}
-}
-if(printAnnotations){
-int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
-sb.append(" [");
-sb.append(propToString(type));
-sb.append(": ");
-String value;
-switch (type){
-case TARGETBLOCK_PROP :
-
-value="target block property";
-break;
-case LOCAL_BLOCK_PROP :
-
-value="last local block";
-break;
-case ISNUMBER_PROP :
-
-switch (x.intValue){
-case BOTH :
-
-value="both";
-break;
-case RIGHT :
-
-value="right";
-break;
-case LEFT :
-
-value="left";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-case SPECIALCALL_PROP :
-
-switch (x.intValue){
-case SPECIALCALL_EVAL :
-
-value="eval";
-break;
-case SPECIALCALL_WITH :
-
-value="with";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-default :
-
-Object obj=x.objectValue;
-if(obj!=null){
-value=obj.toString();
-}else {
-value=String.valueOf(x.intValue);
-}
-break;
-}
-sb.append(value);
-sb.append(']');
-}
-}
-if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/3408/pattern-ver1-serial/COMP90015ChatClient.src.tiredale.client.ChatClientSocketThread.java-IdentityChangeResponse.pattern
MATCHLEVEL : ALL
ALL : 211, UPD : 211, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:10:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
-if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
-}else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 if(first.getType()==Token.STRING){
 sb.append(first.getString());
 }
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
-}
-}
-}
-if(printSource){
-int lineno=getLineno();
-if(lineno!=-1){
-sb.append(' ');
-sb.append(lineno);
-}
-}
-if(printAnnotations){
-int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
-sb.append(" [");
-sb.append(propToString(type));
-sb.append(": ");
-String value;
-switch (type){
-case TARGETBLOCK_PROP :
-
-value="target block property";
-break;
-case LOCAL_BLOCK_PROP :
-
-value="last local block";
-break;
-case ISNUMBER_PROP :
-
-switch (x.intValue){
-case BOTH :
-
-value="both";
-break;
-case RIGHT :
-
-value="right";
-break;
-case LEFT :
-
-value="left";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-case SPECIALCALL_PROP :
-
-switch (x.intValue){
-case SPECIALCALL_EVAL :
-
-value="eval";
-break;
-case SPECIALCALL_WITH :
-
-value="with";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-default :
-
-Object obj=x.objectValue;
-if(obj!=null){
-value=obj.toString();
-}else {
-value=String.valueOf(x.intValue);
-}
-break;
-}
-sb.append(value);
-sb.append(']');
-}
-}
-if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/3408/pattern-ver1-serial/COMP90015ChatClient.src.tiredale.client.ChatClientSocketThread.java-IdentityChangeResponse.pattern
MATCHLEVEL : ALL
ALL : 211, UPD : 211, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:11:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
-if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first.getType()==Token.STRING){
-sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
-}else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
-}
-}
-}
-if(printSource){
-int lineno=getLineno();
-if(lineno!=-1){
-sb.append(' ');
-sb.append(lineno);
-}
-}
-if(printAnnotations){
-int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
-sb.append(" [");
-sb.append(propToString(type));
-sb.append(": ");
-String value;
-switch (type){
-case TARGETBLOCK_PROP :
-
-value="target block property";
-break;
-case LOCAL_BLOCK_PROP :
-
-value="last local block";
-break;
-case ISNUMBER_PROP :
-
-switch (x.intValue){
-case BOTH :
-
-value="both";
-break;
-case RIGHT :
-
-value="right";
-break;
-case LEFT :
-
-value="left";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-case SPECIALCALL_PROP :
-
-switch (x.intValue){
-case SPECIALCALL_EVAL :
-
-value="eval";
-break;
-case SPECIALCALL_WITH :
-
-value="with";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-default :
-
-Object obj=x.objectValue;
-if(obj!=null){
-value=obj.toString();
-}else {
-value=String.valueOf(x.intValue);
-}
-break;
-}
-sb.append(value);
-sb.append(']');
-}
-}
-if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/3408/pattern-ver1-serial/COMP90015ChatClient.src.tiredale.client.ChatClientSocketThread.java-IdentityChangeResponse.pattern
MATCHLEVEL : ALL
ALL : 211, UPD : 211, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:11:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
-if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first.getType()==Token.STRING){
-sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
-}
-}
-if(printSource){
-int lineno=getLineno();
-if(lineno!=-1){
-sb.append(' ');
-sb.append(lineno);
-}
-}
-if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
-}
-}
-if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/5941/pattern-ver1-serial/app.src.main.java.com.juztoss.rhythmo.services.PlaybackService.java-gotoNext.pattern
MATCHLEVEL : ALL
ALL : 211, UPD : 211, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:11:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
-if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first.getType()==Token.STRING){
-sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
-}
-}
-if(printSource){
-int lineno=getLineno();
-if(lineno!=-1){
-sb.append(' ');
-sb.append(lineno);
-}
-}
-if(printAnnotations){
-int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
-sb.append(" [");
-sb.append(propToString(type));
-sb.append(": ");
-String value;
-switch (type){
-case TARGETBLOCK_PROP :
-
-value="target block property";
-break;
-case LOCAL_BLOCK_PROP :
-
-value="last local block";
-break;
-case ISNUMBER_PROP :
-
-switch (x.intValue){
-case BOTH :
-
-value="both";
-break;
-case RIGHT :
-
-value="right";
-break;
-case LEFT :
-
-value="left";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-case SPECIALCALL_PROP :
-
-switch (x.intValue){
-case SPECIALCALL_EVAL :
-
-value="eval";
-break;
-case SPECIALCALL_WITH :
-
-value="with";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-default :
-
-Object obj=x.objectValue;
-if(obj!=null){
-value=obj.toString();
-}else {
-value=String.valueOf(x.intValue);
-}
-break;
-}
-sb.append(value);
-sb.append(']');
-}
-}
-if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
-}
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3131/pattern-ver1-serial/src.cofh.tweak.asmhooks.render.RenderGlobal.java-markRenderers.pattern
MATCHLEVEL : ALL
ALL : 211, UPD : 211, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:11:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
-if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first.getType()==Token.STRING){
-sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
-}
-}
-if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
-}
-}
-if(printAnnotations){
-int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
-sb.append(" [");
-sb.append(propToString(type));
-sb.append(": ");
-String value;
-switch (type){
-case TARGETBLOCK_PROP :
-
-value="target block property";
-break;
-case LOCAL_BLOCK_PROP :
-
-value="last local block";
-break;
-case ISNUMBER_PROP :
-
-switch (x.intValue){
-case BOTH :
-
-value="both";
-break;
-case RIGHT :
-
-value="right";
-break;
-case LEFT :
-
-value="left";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-case SPECIALCALL_PROP :
-
-switch (x.intValue){
-case SPECIALCALL_EVAL :
-
-value="eval";
-break;
-case SPECIALCALL_WITH :
-
-value="with";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-default :
-
-Object obj=x.objectValue;
-if(obj!=null){
-value=obj.toString();
-}else {
-value=String.valueOf(x.intValue);
-}
-break;
-}
-sb.append(value);
-sb.append(']');
-}
-}
-if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3131/pattern-ver1-serial/src.cofh.tweak.asmhooks.render.RenderGlobal.java-markRenderers.pattern
MATCHLEVEL : ALL
ALL : 211, UPD : 211, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:11:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/rhino/Node.java[923,1039]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
-sb.append(Token.name(type));
-if(this instanceof StringNode){
-sb.append(' ');
-sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-if(first.getType()==Token.STRING){
-sb.append(first.getString());
-}
-}else {
-if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
-sb.append(']');
-}
-}else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
-}
-}
-if(printSource){
-int lineno=getLineno();
-if(lineno!=-1){
-sb.append(' ');
-sb.append(lineno);
-}
-}
-if(printAnnotations){
-int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
-sb.append(" [");
-sb.append(propToString(type));
-sb.append(": ");
-String value;
-switch (type){
-case TARGETBLOCK_PROP :
-
-value="target block property";
-break;
-case LOCAL_BLOCK_PROP :
-
-value="last local block";
-break;
-case ISNUMBER_PROP :
-
-switch (x.intValue){
-case BOTH :
-
-value="both";
-break;
-case RIGHT :
-
-value="right";
-break;
-case LEFT :
-
-value="left";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-case SPECIALCALL_PROP :
-
-switch (x.intValue){
-case SPECIALCALL_EVAL :
-
-value="eval";
-break;
-case SPECIALCALL_WITH :
-
-value="with";
-break;
-default :
-
-throw Kit.codeBug();
-}
-break;
-default :
-
-Object obj=x.objectValue;
-if(obj!=null){
-value=obj.toString();
-}else {
-value=String.valueOf(x.intValue);
-}
-break;
-}
-sb.append(value);
 sb.append(']');
-}
-}
-if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3131/pattern-ver1-serial/src.cofh.tweak.asmhooks.render.RenderGlobal.java-markRenderers.pattern
MATCHLEVEL : ALL
ALL : 211, UPD : 211, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:11:18 CDT
--------------- END -----------------
Location : com.google.javascript.jscomp.ProcessClosurePrimitives.replace:[790, 784, 796, 798, 799, 800, 789, 804, 756, 748, 805, 783, 785, 807, 750, 751, 792, 770, 771, 772, 773, 778, 774, 777, 776, 757, 758, 761, 762, 766, 765, 764, 763, 769, 768]#1.0
Compute Candidate : 2019.09.07 AD at 00:12:33 CDT - 2019.09.07 AD at 00:40:31 CDT , PNumber : 4152, CandNumber : 308 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
+return ;
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
+return ;
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
+return ;
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
+return ;
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
+return ;
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
+return ;
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
+return ;
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
+return ;
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
+import java.util.Locale;
+
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
-Preconditions.checkNotNull(parentName);
+Preconditions.checkNotNull(parentName,Locale.US);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2959/pattern-ver1-serial/lib.src.main.java.org.theta4j.Theta.java-getDateTime.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
+import java.util.Locale;
+
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
-Preconditions.checkNotNull(parentName.replacementNode);
+Preconditions.checkNotNull(parentName.replacementNode,Locale.US);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2959/pattern-ver1-serial/lib.src.main.java.org.theta4j.Theta.java-getDateTime.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
+return ;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
-candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
+candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,false);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V13/6998/pattern-ver1-serial/api.src.main.java.org.ednovo.gooru.domain.service.ScollectionServiceImpl.java-createCollectionItem.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
-ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+ ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
-int indexOfDot=namespace.indexOf('.');
+ int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
-Node valueNode=nameNode.getNext();
+ Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
-Node nameNode=assignNode.getFirstChild();
+ Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
-Node assignNode=candidateDefinition.getFirstChild();
+ Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
-Node varNode=new Node(Token.VAR,nameNode);
+ Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
-Preconditions.checkNotNull(parentName);
+Preconditions.checkNotNull(parentName,false);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2675/pattern-ver1-serial/core.org.eclipse.cdt.core.parser.org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTConditionalExpression.java-convertToMatch.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
-Preconditions.checkNotNull(parentName.replacementNode);
+Preconditions.checkNotNull(parentName.replacementNode,false);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2675/pattern-ver1-serial/core.org.eclipse.cdt.core.parser.org.eclipse.cdt.internal.core.dom.parser.cpp.CPPASTConditionalExpression.java-convertToMatch.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
-if(nameNode.getType()==Token.NAME){
+if(nameNode.getType()==0){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
-Preconditions.checkNotNull(parentName);
+Preconditions.checkNotNull(parentName,parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/1763/pattern-ver1-serial/MyApplication.app.src.main.java.com.gcode.notes.controllers.BaseController.java-setNewContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
-Preconditions.checkNotNull(parentName.replacementNode);
+Preconditions.checkNotNull(parentName.replacementNode,parentName);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/1763/pattern-ver1-serial/MyApplication.app.src.main.java.com.gcode.notes.controllers.BaseController.java-setNewContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
+replacementNode=createDeclarationNode();
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
+replacementNode=createDeclarationNode();
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
+replacementNode=createDeclarationNode();
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
+replacementNode=createDeclarationNode();
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
+replacementNode=createDeclarationNode();
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
+replacementNode=createDeclarationNode();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
-Preconditions.checkNotNull(parentName);
+Preconditions.checkNotNull(parentName,0);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
-Preconditions.checkNotNull(parentName.replacementNode);
+Preconditions.checkNotNull(parentName.replacementNode,0);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
-int indexOfDot=namespace.indexOf('.');
+int indexOfDot=namespace.indexOf('.',0);
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
-Preconditions.checkNotNull(parentName.replacementNode);
+Preconditions.checkNotNull(parentName,parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7601/pattern-ver1-serial/src.neu.ComputerPlayer.java-checkImmidiateFour.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
-parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
+replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3555/pattern-ver1-serial/bpm.bonita-core.bonita-process-engine.src.main.java.org.bonitasoft.engine.api.impl.PlatformAPIImpl.java-createTenantFolderInBonitaHome.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
-if(nameNode.getType()==Token.NAME){
+if(assignNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
-Node valueNode=nameNode.getNext();
+Node valueNode=assignNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
-if(indexOfDot==-1){
+if(indexOfDot<=-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
-if(nameNode.getType()==Token.NAME){
+if(nameNode.getType()<=Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
-assignNode.removeChild(valueNode);
+replacementNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6964/pattern-ver1-serial/storm-core.src.jvm.backtype.storm.elasticity.ElasticTaskHolder.java-handleScalingOutSubtaskCommand.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
-assignNode.removeChild(valueNode);
+valueNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6964/pattern-ver1-serial/storm-core.src.jvm.backtype.storm.elasticity.ElasticTaskHolder.java-handleScalingOutSubtaskCommand.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
-nameNode.addChildToFront(valueNode);
+replacementNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6964/pattern-ver1-serial/storm-core.src.jvm.backtype.storm.elasticity.ElasticTaskHolder.java-handleScalingOutSubtaskCommand.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
-assignNode.removeChild(valueNode);
+nameNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6964/pattern-ver1-serial/storm-core.src.jvm.backtype.storm.elasticity.ElasticTaskHolder.java-handleScalingOutSubtaskCommand.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
-nameNode.addChildToFront(valueNode);
+valueNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6964/pattern-ver1-serial/storm-core.src.jvm.backtype.storm.elasticity.ElasticTaskHolder.java-handleScalingOutSubtaskCommand.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
-nameNode.setJSDocInfo(assignNode.getJSDocInfo());
+nameNode.setJSDocInfo(varNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/79/pattern-ver1-serial/src.main.java.com.brxt.service.impl.ReportManagerImpl.java-getFinanceCheckList.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
-nameNode.setJSDocInfo(assignNode.getJSDocInfo());
+nameNode.setJSDocInfo(valueNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/3728/pattern-ver1-serial/subsystem.src.main.java.org.jboss.as.camel.integration.deployment.CreateCamelContextDeploymentProcessor.java-deploy.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
-nameNode.setJSDocInfo(assignNode.getJSDocInfo());
+nameNode.setJSDocInfo(nameNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/3728/pattern-ver1-serial/subsystem.src.main.java.org.jboss.as.camel.integration.deployment.CreateCamelContextDeploymentProcessor.java-deploy.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
-if(nameNode.getType()==Token.NAME){
+if(replacementNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1651/pattern-ver1-serial/src.main.java.au.com.rayh.XCodeBuilder.java-perform.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
-Node valueNode=nameNode.getNext();
+Node valueNode=replacementNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1651/pattern-ver1-serial/src.main.java.au.com.rayh.XCodeBuilder.java-perform.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
-varNode.copyInformationFrom(candidateDefinition);
+replacementNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1651/pattern-ver1-serial/src.main.java.au.com.rayh.XCodeBuilder.java-perform.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
-if(indexOfDot==-1){
+if(indexOfDot>=-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
-if(nameNode.getType()==Token.NAME){
+if(nameNode.getType()>=Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
-Preconditions.checkNotNull(parentName);
+Preconditions.checkNotNull("",parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1081/pattern-ver1-serial/src.main.java.edu.kit.ipd.crowdcontrol.objectservice.moneytransfer.MoneyTransferManager.java-sendNotification.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
-Preconditions.checkNotNull(parentName.replacementNode);
+Preconditions.checkNotNull("",parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1081/pattern-ver1-serial/src.main.java.edu.kit.ipd.crowdcontrol.objectservice.moneytransfer.MoneyTransferManager.java-sendNotification.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
-int indexOfDot=namespace.indexOf('.');
+int indexOfDot=namespace.indexOf("",'.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1081/pattern-ver1-serial/src.main.java.edu.kit.ipd.crowdcontrol.objectservice.moneytransfer.MoneyTransferManager.java-sendNotification.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
-if(indexOfDot==-1){
+if(indexOfDot!=-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
-if(nameNode.getType()==Token.NAME){
+if(nameNode.getType()!=Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
-int indexOfDot=namespace.indexOf('.');
+Integer indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
-Preconditions.checkNotNull(parentName.replacementNode);
+Preconditions.checkNotNull(1,parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositories.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
-Preconditions.checkNotNull(parentName);
+Preconditions.checkNotNull(1,parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositories.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
-int indexOfDot=namespace.indexOf('.');
+int indexOfDot=namespace.indexOf(1,'.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositories.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
-ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+ProvidedName parentName=providedNames.remove(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/2156/pattern-ver1-serial/src.server.Server.java-addScheduledFailure.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
-Preconditions.checkNotNull(parentName);
+Preconditions.checkNotNull(parentName,replacementNode);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7663/pattern-ver1-serial/tools.dbutils.src.main.java.com.emc.storageos.dbutils.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
-Preconditions.checkNotNull(parentName.replacementNode);
+Preconditions.checkNotNull(parentName.replacementNode,replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7663/pattern-ver1-serial/tools.dbutils.src.main.java.com.emc.storageos.dbutils.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
-firstNode.getParent().addChildBefore(replacementNode,firstNode);
+firstNode.addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5764/pattern-ver1-serial/SmartTrader.app.src.main.java.com.loveboyuan.smarttrader.InventoryActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
-candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
+candidateDefinition.replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5764/pattern-ver1-serial/SmartTrader.app.src.main.java.com.loveboyuan.smarttrader.InventoryActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
-parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
+parentName.replacementNode.addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5764/pattern-ver1-serial/SmartTrader.app.src.main.java.com.loveboyuan.smarttrader.InventoryActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
-if(indexOfDot==-1){
+if(indexOfDot==0){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
-Node varNode=new Node(Token.VAR,nameNode);
+ final Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
-ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+ final ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
-Node nameNode=assignNode.getFirstChild();
+ final Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
-ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+ final ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
-Node valueNode=nameNode.getNext();
+ final Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
-ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+ final ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
-Node assignNode=candidateDefinition.getFirstChild();
+ final Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
-ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+ final ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
-int indexOfDot=namespace.indexOf('.');
+ final int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
-ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+ final ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
-Node varNode=new Node(Token.VAR,nameNode);
+ final Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
-int indexOfDot=namespace.indexOf('.');
+ final int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
-Node nameNode=assignNode.getFirstChild();
+ final Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
-int indexOfDot=namespace.indexOf('.');
+ final int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
-Node nameNode=assignNode.getFirstChild();
+ final Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
-Node valueNode=nameNode.getNext();
+ final Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
-Node assignNode=candidateDefinition.getFirstChild();
-Node nameNode=assignNode.getFirstChild();
+ final Node assignNode=candidateDefinition.getFirstChild();
+ final Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
-Node varNode=new Node(Token.VAR,nameNode);
+ Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
-ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+ ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
-Node nameNode=assignNode.getFirstChild();
+ Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
-Node valueNode=nameNode.getNext();
+ Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
-Node assignNode=candidateDefinition.getFirstChild();
-Node nameNode=assignNode.getFirstChild();
+ Node assignNode=candidateDefinition.getFirstChild();
+ Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
-Node varNode=new Node(Token.VAR,nameNode);
+ Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
-int indexOfDot=namespace.indexOf('.');
+ int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
-Node valueNode=nameNode.getNext();
+ Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
-Node varNode=new Node(Token.VAR,nameNode);
+ Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
-Node nameNode=assignNode.getFirstChild();
+ Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
-Node varNode=new Node(Token.VAR,nameNode);
+ Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
-Node assignNode=candidateDefinition.getFirstChild();
+ Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
-Node varNode=new Node(Token.VAR,nameNode);
+ Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
-ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+ProvidedName parentName=providedNames.get(this.namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
-firstNode.getParent().addChildBefore(replacementNode,firstNode);
+this.firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
-candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
+this.candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
-int indexOfDot=namespace.indexOf('.');
+int indexOfDot=this.namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
+this.replace();
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
+this.replace();
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
+this.replace();
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
+this.replace();
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
+this.replace();
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
+this.replace();
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
+this.replace();
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
+this.replace();
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
+this.replace();
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
+this.replace();
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
-Preconditions.checkNotNull(parentName);
-Preconditions.checkNotNull(parentName.replacementNode);
+Preconditions.checkNotNull(parentName,parentName);
+Preconditions.checkNotNull(parentName.replacementNode,parentName);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/5489/pattern-ver1-serial/src.main.java.com.peace.auto.bl.ShengLingQuan.java-CanDo.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
+import java.util.Iterator;
+
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
-if(nameNode.getType()==Token.NAME){
+if(nameNode.getType()==-1){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+indexOfDot++;
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
+indexOfDot++;
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
+indexOfDot++;
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
+indexOfDot++;
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
+indexOfDot--;
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
+indexOfDot--;
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
+indexOfDot--;
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+indexOfDot--;
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+if(parentName==null){
+return ;
+}
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
+if(valueNode==null){
+return ;
+}
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
+if(nameNode==null){
+return ;
+}
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
-Preconditions.checkNotNull(parentName);
+Preconditions.checkNotNull(parentName,Charset.forName("UTF-8"));
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
-Preconditions.checkNotNull(parentName.replacementNode);
+Preconditions.checkNotNull(parentName.replacementNode,Charset.forName("UTF-8"));
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
+if(parentName.replacementNode.getParent()!=null){
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
+}
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
+if(compiler.getNodeForCodeInsertion(minimumModule)!=null){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
+}
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
+if(firstNode.getParent()!=null){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
+}
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
+if(compiler.getNodeForCodeInsertion(minimumModule)!=replacementNode){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
+}
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/7075/pattern-ver1-serial/app.src.main.java.com.gustavoparreira.realtimetile.Player.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
+if(explicitNode!=null){
 if(explicitNode!=null){
 explicitNode.detachFromParent();
+}
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/7075/pattern-ver1-serial/app.src.main.java.com.gustavoparreira.realtimetile.Player.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
+if(compiler!=null){
 compiler.reportCodeChange();
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/7075/pattern-ver1-serial/app.src.main.java.com.gustavoparreira.realtimetile.Player.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
+if(parentName.replacementNode!=null){
 Preconditions.checkNotNull(parentName.replacementNode);
+}
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+if(parentName!=null){
 Preconditions.checkNotNull(parentName);
+}
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
+if(replacementNode!=null){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
+}
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
+import java.util.Collection;
+
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
+if(varNode==null){
+return ;
+}
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3593/pattern-ver1-serial/velvetdb-mapdb.src.main.java.com.zakgof.db.velvet.mapdb.MapDbVelvet.java-isBelow.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
+parentName=this;
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
+if(namespace==null){
+return ;
+}
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
+if(providedNames==null){
+return ;
+}
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
+if(namespace==null){
+return ;
+}
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
+if(namespace==null){
+return ;
+}
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
+if(providedNames==null){
+return ;
+}
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
+if(namespace==null){
+return ;
+}
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
+}
+if(indexOfDot==namespace.indexOf('.')){
+return ;
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
+}
 }
+if(replacementNode==null){
+return ;
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
+if(parentName==null){
+return ;
+}
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
+if(parentName==null){
+return ;
+}
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
-if(firstModule==minimumModule){
+if(firstModule.equals(minimumModule)){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
-if(firstNode==null){
+if(firstNode.equals(null)){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
-if(explicitNode!=null){
+if(explicitNode.equals(null)){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
+synchronized(this){
 replacementNode=candidateDefinition;
 return ;
+}
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
+synchronized(this){
 explicitNode.detachFromParent();
+}
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
-if(NodeUtil.isExpressionNode(candidateDefinition)){
+if(!NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
-if(firstModule==minimumModule){
+if(minimumModule.equals(firstModule)){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7020/pattern-ver1-serial/simulator.src.main.java.com.hazelcast.simulator.protocol.connector.AbstractServerConnector.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+if("index".equals(parentName)){
+return ;
+}
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
+if("index".equals(indexOfDot)){
+return ;
+}
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
+if("index".equals(indexOfDot)){
+return ;
+}
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
+if("index".equals(nameNode)){
+return ;
+}
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
+if("index".equals(nameNode)){
+return ;
+}
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+if(parentName.equals("TIME")){
+return ;
+}
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
+if(nameNode.equals("TIME")){
+return ;
+}
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
+if(nameNode.equals("TIME")){
+return ;
+}
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+if("&null".equals(parentName)){
+return ;
+}
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+if("&null".equals(indexOfDot)){
+return ;
+}
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
+if("&null".equals(indexOfDot)){
+return ;
+}
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
+if("&null".equals(valueNode)){
+return ;
+}
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+if(parentName.equals("DATETIME")){
+return ;
+}
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
+if(nameNode.equals("DATETIME")){
+return ;
+}
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
+if(nameNode.equals("DATETIME")){
+return ;
+}
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
+if(parentName.replacementNode==null){
+return ;
+}
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2437/pattern-ver1-serial/app.src.main.java.org.gdg.frisbee.android.onboarding.FirstStartStep1Fragment.java-addChapters.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
+if(parentName.replacementNode.getParent()==null){
+return ;
+}
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2437/pattern-ver1-serial/app.src.main.java.org.gdg.frisbee.android.onboarding.FirstStartStep1Fragment.java-addChapters.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
+compiler.reportCodeChange();
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
-compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
+explicitNode.detachFromParent();
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+compiler.reportCodeChange();
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
-compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+explicitNode.detachFromParent();
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
-Node valueNode=nameNode.getNext();
+ final Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
-Node varNode=new Node(Token.VAR,nameNode);
+ final Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
-int indexOfDot=namespace.indexOf('.');
+ final int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
+compiler.reportCodeChange();
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
-compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
+explicitNode.detachFromParent();
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+compiler.reportCodeChange();
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
+if(nameNode!=null){
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
+}
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4155/pattern-ver1-serial/Calendar.src.edu.wpi.cs.wpisuitetng.modules.calendar.view.AddEventPanel.java-populateEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
+compiler.reportCodeChange();
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
-compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
+explicitNode.detachFromParent();
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
+compiler.reportCodeChange();
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
-compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
+indexOfDot=indexOfDot;
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
+explicitNode.detachFromParent();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
-explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
+compiler.reportCodeChange();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
-compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
+compiler.reportCodeChange();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
+explicitNode.detachFromParent();
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
-explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
-if(indexOfDot==-1){
+if(indexOfDot+indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
-Node nameNode=assignNode.getFirstChild();
+ final Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
-int indexOfDot=namespace.indexOf('.');
+ final int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
-ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+ final ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
-Node assignNode=candidateDefinition.getFirstChild();
+ final Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
-int indexOfDot=namespace.indexOf('.');
+ final int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
-ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+ final ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+if(parentName.equals("")){
+return ;
+}
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
+if(replacementNode.equals("")){
+return ;
+}
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
+compiler.reportCodeChange();
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
-compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
+compiler.reportCodeChange();
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
-if(firstModule==minimumModule){
+if(true){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
-if(firstNode==null){
+if(true){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
-if(explicitNode!=null){
+if(true){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
-if(NodeUtil.isExpressionNode(candidateDefinition)){
+if(true){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
+if(parentName.replacementNode!=null){
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
+}
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/6062/pattern-ver1-serial/src.main.java.org.openarchives.resourcesync.ResourceSyncDescription.java-addCapabilityList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
-if(NodeUtil.isExpressionNode(candidateDefinition)){
+if(NodeUtil.isExpressionNode(candidateDefinition)==false){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
+if(indexOfDot<0){
+return ;
+}
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
+if(indexOfDot<0){
+return ;
+}
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
+if(namespace!=null){
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
+}
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/258/pattern-ver1-serial/web.src.main.java.com.epam.freelancer.web.controller.UserController.java-addIsComplaintInOrderings.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
+if(replacementNode==null){
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
+}
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
+if(replacementNode==null){
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
+}
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
+if(replacementNode==null){
 replacementNode=candidateDefinition;
+}
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
+if(replacementNode==null){
 replacementNode=varNode;
+}
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
+if(candidateDefinition!=null){
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
+}
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4078/pattern-ver1-serial/com.profidatagroup.e4.advancedlaunch.src.ch.parisi.e4.advancedlaunch.tabs.LaunchTab.java-editLaunchConfiguration.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+if(parentName.equals("-1")){
+return ;
+}
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
+if(nameNode.equals("-1")){
+return ;
+}
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
+if(valueNode.equals("-1")){
+return ;
+}
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
+if(replacementNode!=null){
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
+}
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/991/pattern-ver1-serial/CEO.src.cs2103.CommandParser.java-separateParameters.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+Preconditions.checkNotNull(parentName.replacementNode);
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
-ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot).trim());
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
+Preconditions.checkNotNull(parentName);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
-replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+replacementNode=createDeclarationNode();
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
-replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
+replacementNode=createDeclarationNode();
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
-replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
+replacementNode=candidateDefinition;
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
-replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
+replacementNode=candidateDefinition;
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
-replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
+replacementNode=candidateDefinition;
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
-replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
+replacementNode=candidateDefinition;
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
-replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
+replacementNode=candidateDefinition;
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
+replacementNode=createDeclarationNode();
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
-replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
+replacementNode=createDeclarationNode();
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
+replacementNode=createDeclarationNode();
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
-replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
+replacementNode=createDeclarationNode();
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
+replacementNode=createDeclarationNode();
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
-replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
+replacementNode=createDeclarationNode();
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
+replacementNode=createDeclarationNode();
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
-replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
+replacementNode=createDeclarationNode();
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
+replacementNode=createDeclarationNode();
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
-replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/389/pattern-ver1-serial/src.profilGestion.java-gestion.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
+replacementNode=candidateDefinition;
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
-replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
-if(firstNode==null){
 replacementNode=candidateDefinition;
+if(firstNode==null){
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
-replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
+replacementNode=createDeclarationNode();
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+replacementNode=createDeclarationNode();
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
+replacementNode=candidateDefinition;
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
-replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
+replacementNode=createDeclarationNode();
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+replacementNode=candidateDefinition;
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
-replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
+replacementNode=createDeclarationNode();
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
+replacementNode=createDeclarationNode();
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
-if(indexOfDot==-1){
+if(true){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
-if(nameNode.getType()==Token.NAME){
+if(true){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
+if(!parentName.replacementNode.equals("")){
 Preconditions.checkNotNull(parentName.replacementNode);
+}
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+if(!parentName.equals("")){
 Preconditions.checkNotNull(parentName);
+}
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
+if(!replacementNode.equals("")){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
+}
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
-if(nameNode.getType()==Token.NAME){
+if(nameNode.getType()==Token.NAME==false){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
-replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
+replacementNode=candidateDefinition;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
-replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
+replacementNode=createDeclarationNode();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
-replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
+replacementNode=candidateDefinition;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
-ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+ProvidedName parentName=providedNames.get("https://myschool.ru.is/myschool/"+namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
+varNode.copyInformationFrom(candidateDefinition);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
-if(indexOfDot==-1){
+if(indexOfDot==-1||indexOfDot==Long.MIN_VALUE){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
-if(nameNode.getType()==Token.NAME){
+if(nameNode.getType()==Token.NAME||nameNode.getType()==Long.MIN_VALUE){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
+assignNode.removeChild(nameNode);
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
-if(indexOfDot==-1){
+if(indexOfDot==-1||"查看红包".equals(indexOfDot)){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
-if(firstNode==null){
+if(firstNode==null||"查看红包".equals(firstNode)){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
-if(explicitNode!=null){
+if(explicitNode!=null||"查看红包".equals(explicitNode)){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
-if(firstModule==minimumModule){
+if(firstModule==minimumModule||"查看红包".equals(firstModule)){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
-if(nameNode.getType()==Token.NAME){
+if(nameNode.getType()==Token.NAME||"查看红包".equals(nameNode.getType())){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
-if(indexOfDot==-1){
+if(indexOfDot==-1||indexOfDot==3){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
-if(nameNode.getType()==Token.NAME){
+if(nameNode.getType()==Token.NAME||nameNode.getType()==3){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
+synchronized(this){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
+}
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
+synchronized(this){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
+}
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
-if(nameNode.getType()==Token.NAME){
+if(nameNode!=null&&nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/6389/pattern-ver1-serial/src.org.ohmage.conditionevaluator.comparator.SingleChoiceDataPointComparator.java-lessThan.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
-if(indexOfDot==-1){
+if(indexOfDot<0||indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
-if(nameNode.getType()==Token.NAME){
+if(nameNode.getType()<0||nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
+nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
-nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
+nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
-replacementNode=candidateDefinition;
-return ;
+explicitNode.detachFromParent();
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
-explicitNode.detachFromParent();
+replacementNode=candidateDefinition;
+return ;
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
+nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
+nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
+if(explicitNode!=null){
+explicitNode.detachFromParent();
+}
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
-}
 }
-if(explicitNode!=null){
-explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
+if(namespace==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
+if(providedNames==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
+if(parentName.replacementNode==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
+if(parentName.replacementNode.getParent()==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
+if(indexOfDot>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
+if(indexOfDot>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
+compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
+compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+if(parentName==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
+if(namespace.substring(0,indexOfDot)==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
+if(parentName.replacementNode==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
+if(indexOfDot<=0){
+indexOfDot=1;
+}
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
-replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
+if(replacementNode!=createDeclarationNode()){
 compiler.reportCodeChange();
+}
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
+if(replacementNode!=candidateDefinition){
 compiler.reportCodeChange();
-replacementNode=candidateDefinition;
+}
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
+candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
-if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
+if(indexOfDot==-1){
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
+compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
-compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
+compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
-compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
-if(candidateDefinition!=null&&explicitNode!=null){
+if(candidateDefinition!=null&&explicitNode!=null||"查看红包".equals(candidateDefinition!=null)){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
+if(parentName.replacementNode!=null&&replacementNode!=null){
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
+}
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/523/pattern-ver1-serial/src.se.chalmers.lidkopingsh.model.Order.java-sync.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
+if(parentName.replacementNode!=null){
 Preconditions.checkNotNull(parentName.replacementNode);
+}else {
+Preconditions.checkNotNull("");
+}
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/6520/pattern-ver1-serial/src.main.java.org.metadatacenter.submission.biosample.core.BioSampleValidator.java-generateBioSampleSubmissionXML.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+if(parentName!=null){
 Preconditions.checkNotNull(parentName);
+}else {
+Preconditions.checkNotNull("");
+}
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/6520/pattern-ver1-serial/src.main.java.org.metadatacenter.submission.biosample.core.BioSampleValidator.java-generateBioSampleSubmissionXML.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
+if(varNode==null){
+varNode=replacementNode;
+}else {
 replacementNode=varNode;
+}
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3590/pattern-ver1-serial/src.main.java.ch.bfh.btx8081.w2015.blue.HealthVisApp.View.PatientDetailView.java-refreshView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
-if(candidateDefinition!=null&&explicitNode!=null){
+if(candidateDefinition!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/6020/pattern-ver1-serial/src.main.java.org.basex.data.MapTree.java-deletePreTree.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
-if(candidateDefinition!=null&&explicitNode!=null){
+if(true){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+if(parentName==null){
+throw new IllegalStateException("User isn't registered! "+indexOfDot);
+}
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
+if(valueNode==null){
+throw new IllegalStateException("User isn't registered! "+nameNode);
+}
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
+if(nameNode==null){
+throw new IllegalStateException("User isn't registered! "+assignNode);
+}
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
+if(varNode==null){
+throw new IllegalStateException("User isn't registered! "+nameNode);
+}
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
+if(firstNode.getParent()!=null){
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
+}
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
+if(compiler.getNodeForCodeInsertion(minimumModule)!=null){
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
+}
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
+if(indexOfDot==3){
+System.out.println("debug");
+}
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
+if(indexOfDot==3){
+System.out.println("debug");
+}
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
+if(indexOfDot==3){
+System.out.println("debug");
+}
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
+if(indexOfDot==3){
+System.out.println("debug");
+}
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
+if(indexOfDot==3){
+System.out.println("debug");
+}
+if(indexOfDot==3){
+System.out.println("debug");
+}
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
+synchronized(this){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
+}
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 35, UPD : 35, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
-if(firstModule==minimumModule){
-firstNode.getParent().addChildBefore(replacementNode,firstNode);
-}else {
-int indexOfDot=namespace.indexOf('.');
-if(indexOfDot==-1){
-compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
-}else {
-ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
-Preconditions.checkNotNull(parentName);
-Preconditions.checkNotNull(parentName.replacementNode);
-parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
-}
-}
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 41, UPD : 0, INS : 0, DEL : 41
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
+if(firstModule==minimumModule){
+firstNode.getParent().addChildBefore(replacementNode,firstNode);
+}else {
+int indexOfDot=namespace.indexOf('.');
+if(indexOfDot==-1){
+compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
+}else {
+ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
+Preconditions.checkNotNull(parentName);
+Preconditions.checkNotNull(parentName.replacementNode);
+parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
+}
+}
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
 }else {
 replacementNode=createDeclarationNode();
-if(firstModule==minimumModule){
-firstNode.getParent().addChildBefore(replacementNode,firstNode);
-}else {
-int indexOfDot=namespace.indexOf('.');
-if(indexOfDot==-1){
-compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
-}else {
-ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
-Preconditions.checkNotNull(parentName);
-Preconditions.checkNotNull(parentName.replacementNode);
-parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
-}
-}
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 42, UPD : 0, INS : 1, DEL : 41
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
+synchronized(this){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
+}
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 51, UPD : 51, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
 }
 }
-}else {
-replacementNode=createDeclarationNode();
-if(firstModule==minimumModule){
-firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
-}
-}
-if(explicitNode!=null){
-explicitNode.detachFromParent();
 }
-compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 51, UPD : 51, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
-candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
-Node assignNode=candidateDefinition.getFirstChild();
-Node nameNode=assignNode.getFirstChild();
-if(nameNode.getType()==Token.NAME){
-Node valueNode=nameNode.getNext();
-assignNode.removeChild(nameNode);
-assignNode.removeChild(valueNode);
-nameNode.addChildToFront(valueNode);
-Node varNode=new Node(Token.VAR,nameNode);
-varNode.copyInformationFrom(candidateDefinition);
-candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
-nameNode.setJSDocInfo(assignNode.getJSDocInfo());
-compiler.reportCodeChange();
-replacementNode=varNode;
-}
+explicitNode.detachFromParent();
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
-explicitNode.detachFromParent();
+candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
+Node assignNode=candidateDefinition.getFirstChild();
+Node nameNode=assignNode.getFirstChild();
+if(nameNode.getType()==Token.NAME){
+Node valueNode=nameNode.getNext();
+assignNode.removeChild(nameNode);
+assignNode.removeChild(valueNode);
+nameNode.addChildToFront(valueNode);
+Node varNode=new Node(Token.VAR,nameNode);
+varNode.copyInformationFrom(candidateDefinition);
+candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
+nameNode.setJSDocInfo(assignNode.getJSDocInfo());
+compiler.reportCodeChange();
+replacementNode=varNode;
+}
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 53, UPD : 53, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
-if(NodeUtil.isExpressionNode(candidateDefinition)){
-candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
-Node assignNode=candidateDefinition.getFirstChild();
-Node nameNode=assignNode.getFirstChild();
-if(nameNode.getType()==Token.NAME){
-Node valueNode=nameNode.getNext();
-assignNode.removeChild(nameNode);
-assignNode.removeChild(valueNode);
-nameNode.addChildToFront(valueNode);
-Node varNode=new Node(Token.VAR,nameNode);
-varNode.copyInformationFrom(candidateDefinition);
-candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
-nameNode.setJSDocInfo(assignNode.getJSDocInfo());
-compiler.reportCodeChange();
-replacementNode=varNode;
-}
-}
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 54, UPD : 0, INS : 0, DEL : 54
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
-replacementNode=candidateDefinition;
-return ;
-}
-if(candidateDefinition!=null&&explicitNode!=null){
-explicitNode.detachFromParent();
-compiler.reportCodeChange();
-replacementNode=candidateDefinition;
-if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
+}
 }
+if(candidateDefinition!=null&&explicitNode!=null){
+explicitNode.detachFromParent();
+compiler.reportCodeChange();
+replacementNode=candidateDefinition;
+if(NodeUtil.isExpressionNode(candidateDefinition)){
+replacementNode=candidateDefinition;
+return ;
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 54, UPD : 54, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
-if(firstNode==null){
-replacementNode=candidateDefinition;
-return ;
-}
-if(candidateDefinition!=null&&explicitNode!=null){
-explicitNode.detachFromParent();
-compiler.reportCodeChange();
-replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
+}
 }
+if(firstNode==null){
+replacementNode=candidateDefinition;
+return ;
 }
+if(candidateDefinition!=null&&explicitNode!=null){
+explicitNode.detachFromParent();
+compiler.reportCodeChange();
+replacementNode=candidateDefinition;
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 55, UPD : 0, INS : 1, DEL : 54
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
+compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
+}
+}else {
+replacementNode=createDeclarationNode();
+if(firstModule==minimumModule){
+firstNode.getParent().addChildBefore(replacementNode,firstNode);
+}else {
+int indexOfDot=namespace.indexOf('.');
+if(indexOfDot==-1){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
-}
 }
-}else {
-replacementNode=createDeclarationNode();
-if(firstModule==minimumModule){
-firstNode.getParent().addChildBefore(replacementNode,firstNode);
-}else {
-int indexOfDot=namespace.indexOf('.');
-if(indexOfDot==-1){
-compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 56, UPD : 56, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
+firstNode.getParent().addChildBefore(replacementNode,firstNode);
+}
+}else {
+replacementNode=createDeclarationNode();
+if(firstModule==minimumModule){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
-}
 }
-}else {
-replacementNode=createDeclarationNode();
-if(firstModule==minimumModule){
-firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 56, UPD : 56, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
 }
 if(candidateDefinition!=null&&explicitNode!=null){
+synchronized(this){
 explicitNode.detachFromParent();
 compiler.reportCodeChange();
 replacementNode=candidateDefinition;
 if(NodeUtil.isExpressionNode(candidateDefinition)){
 candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
 Node assignNode=candidateDefinition.getFirstChild();
 Node nameNode=assignNode.getFirstChild();
 if(nameNode.getType()==Token.NAME){
 Node valueNode=nameNode.getNext();
 assignNode.removeChild(nameNode);
 assignNode.removeChild(valueNode);
 nameNode.addChildToFront(valueNode);
 Node varNode=new Node(Token.VAR,nameNode);
 varNode.copyInformationFrom(candidateDefinition);
 candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
 nameNode.setJSDocInfo(assignNode.getJSDocInfo());
 compiler.reportCodeChange();
 replacementNode=varNode;
+}
 }
 }
 }else {
 replacementNode=createDeclarationNode();
 if(firstModule==minimumModule){
 firstNode.getParent().addChildBefore(replacementNode,firstNode);
 }else {
 int indexOfDot=namespace.indexOf('.');
 if(indexOfDot==-1){
 compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
 }else {
 ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
 Preconditions.checkNotNull(parentName);
 Preconditions.checkNotNull(parentName.replacementNode);
 parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
 }
 }
 if(explicitNode!=null){
 explicitNode.detachFromParent();
 }
 compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 61, UPD : 61, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_93_buggy/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java[740,809]
------------Candidate---------------
 void replace(){
 if(firstNode==null){
 replacementNode=candidateDefinition;
 return ;
-}
-if(candidateDefinition!=null&&explicitNode!=null){
-explicitNode.detachFromParent();
-compiler.reportCodeChange();
-replacementNode=candidateDefinition;
-if(NodeUtil.isExpressionNode(candidateDefinition)){
-candidateDefinition.putBooleanProp(Node.IS_NAMESPACE,true);
-Node assignNode=candidateDefinition.getFirstChild();
-Node nameNode=assignNode.getFirstChild();
-if(nameNode.getType()==Token.NAME){
-Node valueNode=nameNode.getNext();
-assignNode.removeChild(nameNode);
-assignNode.removeChild(valueNode);
-nameNode.addChildToFront(valueNode);
-Node varNode=new Node(Token.VAR,nameNode);
-varNode.copyInformationFrom(candidateDefinition);
-candidateDefinition.getParent().replaceChild(candidateDefinition,varNode);
-nameNode.setJSDocInfo(assignNode.getJSDocInfo());
-compiler.reportCodeChange();
-replacementNode=varNode;
-}
-}
-}else {
-replacementNode=createDeclarationNode();
-if(firstModule==minimumModule){
-firstNode.getParent().addChildBefore(replacementNode,firstNode);
-}else {
-int indexOfDot=namespace.indexOf('.');
-if(indexOfDot==-1){
-compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
-}else {
-ProvidedName parentName=providedNames.get(namespace.substring(0,indexOfDot));
-Preconditions.checkNotNull(parentName);
-Preconditions.checkNotNull(parentName.replacementNode);
-parentName.replacementNode.getParent().addChildAfter(replacementNode,parentName.replacementNode);
-}
-}
-if(explicitNode!=null){
-explicitNode.detachFromParent();
-}
-compiler.reportCodeChange();
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/1359/pattern-ver1-serial/src.main.java.com.ivstuart.tmud.state.Mob.java-checkIdleTimeAndKickout.pattern
MATCHLEVEL : ALL
ALL : 119, UPD : 0, INS : 0, DEL : 119
Failing Tests:[com.google.javascript.jscomp.ProcessClosurePrimitivesTest::testProvideInIndependentModules4]
---------START : 2019.09.06 AD at 19:39:55 CDT
---------TIME : 2019.09.07 AD at 00:40:31 CDT
--------------- END -----------------
Finish : closure-93 > patch : 0 | Start : Fri Sep 06 19:39:55 CDT 2019 | End : 2019.09.07 AD at 00:40:31 CDT
