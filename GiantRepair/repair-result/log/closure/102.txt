Repair : closure_102
Current failed test : com.google.javascript.jscomp.CompilerRunnerTest::testIssue115 | 2019.09.07 AD at 05:41:20 CDT
Location : com.google.javascript.rhino.jstype.FunctionType.toString:[656, 660, 661, 662, 664, 665, 666, 667, 669, 670, 671, 673, 674, 675, 679, 680, 690, 691, 692, 693, 695, 657, 677, 681, 682, 683, 685, 687]#1.0
Compute Candidate : 2019.09.07 AD at 05:42:30 CDT - 2019.09.07 AD at 06:32:07 CDT , PNumber : 11347, CandNumber : 771 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+continue;
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:32:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+continue;
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:32:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+continue;
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:32:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
-StringBuilder b=new StringBuilder(32);
+ StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:32:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
-Node p=call.parameters.getFirstChild();
+ Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:32:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+ int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:32:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
-boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
+ boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:32:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+int paramNum=(call==null&&call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:32:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
-if(paramNum>0){
+if(paramNum>1){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:32:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
-if(paramNum>0){
+if(paramNum>=0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:32:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
-while(p!=null){
+while(p==null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:32:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
+return null;
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:32:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+return null;
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:32:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+return null;
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:32:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
+return null;
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:32:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+return null;
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:33:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
+return null;
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:33:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+return null;
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:33:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+return null;
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:33:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
-return "Function";
+return null;
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:33:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+long paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:33:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+p=p.getNext();
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:33:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+p=p.getNext();
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:33:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+p=p.getNext();
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:33:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+p=p.getNext();
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:33:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
-return "Function";
+return "";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:33:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+break;
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:33:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+break;
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:33:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+break;
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:33:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+float paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:33:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+int paramNum=(call==null||call.parameters!=null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/6105/pattern-ver1-serial/src.main.java.com.chord4js.ServiceId.java-ServiceId.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:33:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+int paramNum=(call==null||b==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:33:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+int paramNum=(b==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:33:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
-if(paramNum>0){
+if(paramNum<0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:34:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
-if(paramNum>0){
+if(paramNum!=0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:34:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+Integer paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:34:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
-if(hasKnownTypeOfThis){
+if(true){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:34:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
-if(hasKnownTypeOfThis){
+if(true){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:34:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
+if(hasKnownTypeOfThis){
+b.append(", ");
+}
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:34:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.io.IOException;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
+return null;
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/3389/pattern-ver1-serial/NewMessageTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:34:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
-if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
+if(this!=registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:34:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append(b.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V22/4198/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.OIndexManagerShared.java-fromStream.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:34:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
-b.append(", ");
+b.append(",");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/6096/pattern-ver1-serial/org.gitools.ui.app.src.main.java.org.gitools.ui.app.datasources.biomart.filter.FilterSelectComponent.java-getFilters.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:34:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
-b.append(", ");
+b.append(",");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/6096/pattern-ver1-serial/org.gitools.ui.app.src.main.java.org.gitools.ui.app.datasources.biomart.filter.FilterSelectComponent.java-getFilters.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:34:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
-b.append("function (");
+b.append(",");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/6096/pattern-ver1-serial/org.gitools.ui.app.src.main.java.org.gitools.ui.app.datasources.biomart.filter.FilterSelectComponent.java-getFilters.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:34:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
-b.append("this:");
+b.append(",");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/6096/pattern-ver1-serial/org.gitools.ui.app.src.main.java.org.gitools.ui.app.datasources.biomart.filter.FilterSelectComponent.java-getFilters.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:34:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
-b.append(")");
+b.append(",");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/6096/pattern-ver1-serial/org.gitools.ui.app.src.main.java.org.gitools.ui.app.datasources.biomart.filter.FilterSelectComponent.java-getFilters.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:34:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
-b.append(": ");
+b.append(",");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/6096/pattern-ver1-serial/org.gitools.ui.app.src.main.java.org.gitools.ui.app.datasources.biomart.filter.FilterSelectComponent.java-getFilters.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:34:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+if(p.isVarArgs()){
+appendVarArgsString(b,p.getJSType());
+}else {
+b.append(p.getJSType().toString());
+}
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V26/1681/pattern-ver1-serial/src.edu.umn.cs.melt.copper.compiletime.srcbuilders.single.ParserFragmentEngineBuilder.java-writeRunProductionSemanticAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:34:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
-while(p!=null){
+while(b!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:34:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
-if(call!=null&&call.returnType!=null){
+if(b!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:34:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
-if(call!=null&&call.returnType!=null){
+if(call!=null&&b!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:34:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+return "An arena doesn't seem to be built yet.";
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/1665/pattern-ver1-serial/src.me.dalton.capturethepoints.CaptureThePoints.java-checkMainArena.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:35:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+return "An arena doesn't seem to be built yet.";
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/1665/pattern-ver1-serial/src.me.dalton.capturethepoints.CaptureThePoints.java-checkMainArena.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:35:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
+return "An arena doesn't seem to be built yet.";
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/1665/pattern-ver1-serial/src.me.dalton.capturethepoints.CaptureThePoints.java-checkMainArena.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:35:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+return "An arena doesn't seem to be built yet.";
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/1665/pattern-ver1-serial/src.me.dalton.capturethepoints.CaptureThePoints.java-checkMainArena.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:35:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+return "An arena doesn't seem to be built yet.";
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/1665/pattern-ver1-serial/src.me.dalton.capturethepoints.CaptureThePoints.java-checkMainArena.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:35:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
+return "";
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6074/pattern-ver1-serial/RXTXRobot.src.rxtxrobot.RXTXRobot.java-sendRaw.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:35:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+return "";
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6074/pattern-ver1-serial/RXTXRobot.src.rxtxrobot.RXTXRobot.java-sendRaw.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:35:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+return "";
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6074/pattern-ver1-serial/RXTXRobot.src.rxtxrobot.RXTXRobot.java-sendRaw.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:35:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
+return "";
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6074/pattern-ver1-serial/RXTXRobot.src.rxtxrobot.RXTXRobot.java-sendRaw.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:35:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+return "";
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6074/pattern-ver1-serial/RXTXRobot.src.rxtxrobot.RXTXRobot.java-sendRaw.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:35:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
+return "";
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6074/pattern-ver1-serial/RXTXRobot.src.rxtxrobot.RXTXRobot.java-sendRaw.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:35:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+return "";
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6074/pattern-ver1-serial/RXTXRobot.src.rxtxrobot.RXTXRobot.java-sendRaw.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:35:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+return "";
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6074/pattern-ver1-serial/RXTXRobot.src.rxtxrobot.RXTXRobot.java-sendRaw.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:35:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
-boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
+Boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/934/pattern-ver1-serial/mifosng-provider.src.main.java.org.mifosplatform.accounting.journalentry.serialization.JournalEntryCommandFromApiJsonDeserializer.java-commandFromApiJson.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:35:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+b.append(typeOfThis.toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:35:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+b.append(typeOfThis.toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:35:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
+b.append(typeOfThis.toString());
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/5087/pattern-ver1-serial/src.main.java.ch.vorburger.raspberry.turtle.Turtle.java-haltInSeconds.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:35:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
+b.append(", ");
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:35:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(p.toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5764/pattern-ver1-serial/SmartTrader.app.src.main.java.com.loveboyuan.smarttrader.InventoryActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:36:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(p.toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5764/pattern-ver1-serial/SmartTrader.app.src.main.java.com.loveboyuan.smarttrader.InventoryActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:36:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
-return b.toString();
+return this.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:36:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
-return "Function";
+return this.toString();
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:36:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
-StringBuilder b=new StringBuilder(32);
+ final StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
-boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
+ final boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:36:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
-StringBuilder b=new StringBuilder(32);
+ final StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+ final int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:36:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
-boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
+ final int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+ final boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:36:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
-StringBuilder b=new StringBuilder(32);
+ StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
-Node p=call.parameters.getFirstChild();
+ Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:36:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
-StringBuilder b=new StringBuilder(32);
+ StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
-boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
+ boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:36:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
-StringBuilder b=new StringBuilder(32);
+ StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+ int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:36:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+ int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
-Node p=call.parameters.getFirstChild();
+ Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:36:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
-boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
+ boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
-Node p=call.parameters.getFirstChild();
+ Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:36:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
-boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
+ int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+ boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:36:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
-return b.toString();
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:36:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
-if(p.isVarArgs()){
+if(!p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:36:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
-if(p.isVarArgs()){
+if(!p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:36:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
-if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
+if(this==this.registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:36:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
-boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
+boolean hasKnownTypeOfThis=!this.typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:36:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append(this.typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:36:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
-return b.toString();
+return "";
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:36:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append((typeOfThis.toString()).toLowerCase());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V29/5971/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.smis.SmisCommandHelper.java-getExistingPortGroupsFromArray.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
+this.toString();
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
+this.toString();
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+this.toString();
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+this.toString();
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+this.toString();
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
+this.toString();
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
+this.toString();
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+this.toString();
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
+this.toString();
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+this.toString();
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
-b.append("function (");
+b.append("function (".trim());
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
-b.append("this:");
+b.append("this:".trim());
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
-b.append(", ");
+b.append(", ".trim());
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
-b.append(")");
+b.append(")".trim());
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
-b.append(": ");
+b.append(": ".trim());
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
-b.append(", ");
+b.append(", ".trim());
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append(typeOfThis.toString().trim());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
-boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
+boolean hasKnownTypeOfThis=!isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append(toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V11/7184/pattern-ver1-serial/src.Board.java-rotate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+paramNum++;
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
-if(hasKnownTypeOfThis){
+if(!hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
-if(hasKnownTypeOfThis){
+if(!hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:37:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
+paramNum++;
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:38:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
+paramNum++;
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:38:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+paramNum++;
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:38:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+paramNum++;
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:38:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
+paramNum++;
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:38:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+paramNum++;
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:38:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+paramNum++;
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:38:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
+paramNum++;
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:38:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
-return "Function";
+return "Function".trim();
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:38:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
-return b.toString();
+return b.toString().trim();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:38:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
-if(p.isVarArgs()){
+if(true){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:38:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
-if(p.isVarArgs()){
+if(true){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:38:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+paramNum--;
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:38:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
-return b.toString();
+return new String(b.toString());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:38:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
-return "Function";
+return new String("Function");
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:38:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
+paramNum--;
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:38:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
+paramNum--;
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:38:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+paramNum--;
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:38:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+paramNum--;
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:39:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
+paramNum--;
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:39:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+paramNum--;
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:39:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+paramNum--;
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:39:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
-return b.toString();
+return (String)b.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:39:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
-p=p.getNext();
+p=p;
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:39:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+synchronized(this){
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+}
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:39:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+synchronized(this){
 p=p.getNext();
+}
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+synchronized(b){
 b.append("this:");
+}
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:39:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
+synchronized(b){
 b.append(typeOfThis.toString());
+}
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:39:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
+synchronized(b){
 b.append(", ");
+}
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:39:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+synchronized(b){
 b.append(", ");
+}
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:39:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
+synchronized(b){
 b.append(": ");
+}
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:39:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
+synchronized(b){
 b.append(call.returnType);
+}
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/5664/pattern-ver1-serial/src.tr.broadcast.BroadcastManager.java-onClaimTokenReceive.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:39:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+int paramNum=(call==null||call.parameters==null)?0:1;
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4284/pattern-ver1-serial/object-filter.src.main.java.org.infinispan.objectfilter.impl.util.Interval.java-compareTo.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:39:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
-p=p.getNext();
+p=null;
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:39:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
-p=p.getNext();
+p=null;
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:39:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
-return "Function";
+return "Function".toLowerCase();
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:39:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
-return b.toString();
+return b.toString().toLowerCase();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:39:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
-b.append("function (");
+b.append(("function (").toLowerCase());
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:40:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
-b.append("this:");
+b.append(("this:").toLowerCase());
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:40:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
-b.append(", ");
+b.append((", ").toLowerCase());
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:40:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
-b.append(")");
+b.append((")").toLowerCase());
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:40:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
-b.append(": ");
+b.append((": ").toLowerCase());
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:40:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
-b.append(", ");
+b.append((", ").toLowerCase());
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:40:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+synchronized(this){
 b.append("this:");
+}
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:40:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
+synchronized(this){
 b.append(typeOfThis.toString());
+}
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:40:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+synchronized(this){
 b.append(p.getJSType().toString());
+}
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:40:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
+synchronized(this){
 b.append(": ");
+}
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:40:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
-return b.toString();
+return (String)(b.toString());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:40:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
-return "Function";
+return (String)("Function");
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:40:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+int paramNum=(call==null||call.parameters==null)?0:-1;
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/262/pattern-ver1-serial/src.main.java.com.github.ddth.djs.bo.log.TaskLogBo.java-getDurationPickup.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:40:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+}
+while(true){
+
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:42:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+while(true){
+
+}
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:42:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
+while(true){
+
+}
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:44:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+while(true){
+
+}
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:44:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+while(true){
+
+}
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:46:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
+while(true){
+
+}
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:48:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
+while(true){
+
+}
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:50:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+while(true){
+
+}
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:50:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+while(true){
+
+}
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:50:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+int paramNum=(call==null||call.parameters==null)?0:0;
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1552/pattern-ver1-serial/src.main.java.net.sourceforge.fenixedu.domain.Tutorship.java-compare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:50:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+return null;
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+return null;
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V27/4615/pattern-ver1-serial/src.at.jku.ssw.cmm.launcher.AddProfileListener.java-mouseClicked.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:50:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+return null;
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+return null;
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V27/4615/pattern-ver1-serial/src.at.jku.ssw.cmm.launcher.AddProfileListener.java-mouseClicked.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:51:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
+synchronized(this){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
+}
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:51:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
+synchronized(this){
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
+}
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:51:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
+synchronized(this){
 if(hasKnownTypeOfThis){
 b.append(", ");
+}
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:51:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+synchronized(this){
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+}
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:51:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
+synchronized(this){
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+}
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:51:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
+synchronized(this){
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+}
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:51:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
-b.append("function (");
+b.append(("function (").toUpperCase());
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:51:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
-b.append("this:");
+b.append(("this:").toUpperCase());
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:51:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
-b.append(", ");
+b.append((", ").toUpperCase());
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:51:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
-b.append(")");
+b.append((")").toUpperCase());
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:51:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
-b.append(": ");
+b.append((": ").toUpperCase());
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:51:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
-b.append(", ");
+b.append((", ").toUpperCase());
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:51:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append((typeOfThis.toString()).toUpperCase());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:51:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+if(b!=null){
 b.append("this:");
+}
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:51:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
+if(b!=null){
 b.append(typeOfThis.toString());
+}
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:51:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
+if(typeOfThis.toString()!=null){
 b.append(typeOfThis.toString());
+}
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:51:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+if(p.getJSType().toString()!=null){
 b.append(p.getJSType().toString());
+}
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:51:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
+if(b!=null){
 b.append(", ");
+}
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:51:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
+synchronized(this){
 return "Function";
+}
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:52:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
+synchronized(this){
 b.append(", ");
+}
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:52:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append((p.getJSType().toString()).toLowerCase());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V29/5971/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.smis.SmisCommandHelper.java-getExistingPortGroupsFromArray.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:52:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append((p.getJSType().toString()).toLowerCase());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V29/5971/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.smis.SmisCommandHelper.java-getExistingPortGroupsFromArray.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:52:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(p.getJSType().toString().trim());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:52:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+b.append("]");
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:52:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
+b.append("]");
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:52:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
+b.append("]");
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:52:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+b.append("]");
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:52:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+b.append("]");
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:52:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+b.append("]");
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:52:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+b.append("]");
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:52:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
+b.append("]");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:52:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+b.append("]");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:52:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+b.append("]");
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:52:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
-StringBuilder b=new StringBuilder(32);
+ @SuppressWarnings("UnusedAssignment") StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+ @SuppressWarnings("UnusedAssignment") int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
-Node p=call.parameters.getFirstChild();
+ @SuppressWarnings("UnusedAssignment") Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:52:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
-StringBuilder b=new StringBuilder(32);
+ @SuppressWarnings("UnusedAssignment") StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
-boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
+ @SuppressWarnings("UnusedAssignment") boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
-Node p=call.parameters.getFirstChild();
+ @SuppressWarnings("UnusedAssignment") Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:52:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
-StringBuilder b=new StringBuilder(32);
+ @SuppressWarnings("UnusedAssignment") StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
-boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
+ @SuppressWarnings("UnusedAssignment") int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+ @SuppressWarnings("UnusedAssignment") boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:52:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+int paramNum=(call==null||call.parameters.equals(null))?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5953/pattern-ver1-serial/src.main.java.org.corfudb.runtime.TXRuntime.java-readsSomethingWrittenBy.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:53:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+b=b;
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:53:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+if(p!=null){
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+}
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4672/pattern-ver1-serial/main.src.main.java.com.example.wduello.collectionmanager.ItemListFragment.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:53:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
+if(p!=null){
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+}
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4672/pattern-ver1-serial/main.src.main.java.com.example.wduello.collectionmanager.ItemListFragment.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:53:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
-if(paramNum>0){
+if(true){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:53:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
-if(hasKnownTypeOfThis){
+if(hasKnownTypeOfThis&&hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:53:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
-if(hasKnownTypeOfThis){
+if(hasKnownTypeOfThis&&hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:53:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
-if(p.isVarArgs()){
+if(p.isVarArgs()==false){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:53:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
-if(p.isVarArgs()){
+if(p.isVarArgs()==false){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:53:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append("https://myschool.ru.is/myschool/"+typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:53:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append("https://myschool.ru.is/myschool/"+p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:53:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append("https://myschool.ru.is/myschool/"+p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:53:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+if(p==null){
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+}
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:53:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+if(p==null){
 p=p.getNext();
+}
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:53:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
+if(call.parameters!=null){
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+}
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/5761/pattern-ver1-serial/src.main.java.jp.sf.amateras.mirage.type.enumerate.EnumOneBasedOrdinalValueType.java-isSupport.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:53:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
-if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
+if(this==null){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V22/1940/pattern-ver1-serial/src.Puissance4.java-undo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:53:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+if("this:"!=null){
 b.append("this:");
+}
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V11/7255/pattern-ver1-serial/parser.src.main.java.me.vertretungsplan.objects.Substitution.java-setTeacher.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:53:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
+if(", "!=null){
 b.append(", ");
+}
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V11/7255/pattern-ver1-serial/parser.src.main.java.me.vertretungsplan.objects.Substitution.java-setTeacher.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:53:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
+if(": "!=null){
 b.append(": ");
+}
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V11/7255/pattern-ver1-serial/parser.src.main.java.me.vertretungsplan.objects.Substitution.java-setTeacher.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:53:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+if(", "!=null){
 b.append(", ");
+}
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/2525/pattern-ver1-serial/UnivMobile.src.org.unpidf.univmobile.ui.fragments.GeoCampusFragment.java-addNewPoi.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:54:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append("Succeeded to create a home: "+typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/5704/pattern-ver1-serial/myapplication.src.main.java.tinkermode.com.myapplication.VerifyAccountActivity.java-done.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:54:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append("Succeeded to create a home: "+p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/5704/pattern-ver1-serial/myapplication.src.main.java.tinkermode.com.myapplication.VerifyAccountActivity.java-done.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:54:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append("Succeeded to create a home: "+p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/5704/pattern-ver1-serial/myapplication.src.main.java.tinkermode.com.myapplication.VerifyAccountActivity.java-done.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:54:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append(typeOfThis.toString()+" votes");
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:54:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(p.getJSType().toString()+" votes");
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:54:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(p.getJSType().toString()+" votes");
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:54:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
+int a=0;
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:54:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+int a=0;
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:54:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+int a=0;
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:54:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+int a=0;
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:54:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
+int a=0;
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:54:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+int a=0;
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:54:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
+int a=0;
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:54:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
+int a=0;
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:54:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+int a=0;
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:54:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
+int a=0;
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:54:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append("There was a problem with the call to ManyWho: "+typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:54:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append("There was a problem with the call to ManyWho: "+p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:54:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append("There was a problem with the call to ManyWho: "+p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(p.getJSType().toString().trim());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/3379/pattern-ver1-serial/Android-Client.app.src.main.java.vitymobi.com.todobluemix.ActivityLogin.java-validanteCredentials.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
+String OUTSTRING="";
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
+String OUTSTRING="";
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+String OUTSTRING="";
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+String OUTSTRING="";
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+String OUTSTRING="";
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+String OUTSTRING="";
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
+String OUTSTRING="";
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
+String OUTSTRING="";
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+String OUTSTRING="";
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
+String OUTSTRING="";
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
-while(p!=null){
+while(true){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/1657/pattern-ver1-serial/reversi.src.main.java.org.kratos.reversi.application.View.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append(Strings.nullToEmpty(typeOfThis.toString()));
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(Strings.nullToEmpty(p.getJSType().toString()));
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(Strings.nullToEmpty(p.getJSType().toString()));
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
-b.append("function (");
+b.append(Strings.nullToEmpty("function ("));
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
-b.append("this:");
+b.append(Strings.nullToEmpty("this:"));
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
-b.append(", ");
+b.append(Strings.nullToEmpty(", "));
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
-b.append(")");
+b.append(Strings.nullToEmpty(")"));
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
+int call=5;
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:55:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
+int parameters=5;
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:56:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
-if(paramNum>0){
+if(Double.isNaN(paramNum)){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:56:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
-if(p.isVarArgs()){
+if(p.isVarArgs()==true){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:56:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
-if(p.isVarArgs()){
+if(p.isVarArgs()==true){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:56:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
+if(b!=null){
 b.append(": ");
+}
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/387/pattern-ver1-serial/AugmentedBizzClient.src.com.app.augmentedbizz.application.data.DataManager.java-clearLocalBuffer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:56:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:56:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:56:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:56:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:56:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:56:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:56:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:56:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:56:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:56:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+if(b!=null){
 b.append(p.getJSType().toString());
+}
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V28/644/pattern-ver1-serial/tapglue-android-sdk.src.main.java.com.tapglue.networking.TGNetworkManager.java-onResponse.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:56:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+if(equals(b)){
+return null;
+}
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:56:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
+if(equals(b)){
+return null;
+}
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:56:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
+if(equals(b)){
+return null;
+}
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:56:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+if(equals(b)){
+return null;
+}
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:56:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+if(equals(b)){
+return null;
+}
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:57:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
+}
+if(equals(b)){
+return null;
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:57:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
+if(equals(hasKnownTypeOfThis)){
+return null;
+}
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:57:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
+}
+if(equals(paramNum)){
+return null;
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:57:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
+if(equals(hasKnownTypeOfThis)){
+return null;
+}
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:57:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+int indexSelection=0;
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:57:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
+int indexSelection=0;
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:57:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+int indexSelection=0;
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:57:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+int indexSelection=0;
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:57:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
+int indexSelection=0;
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:57:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+int indexSelection=0;
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:57:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
+int indexSelection=0;
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:57:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+int indexSelection=0;
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:57:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+int indexSelection=0;
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:57:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+if(p.getJSType().toString().isEmpty()){
+return null;
+}
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:57:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+if(p.getJSType().toString().isEmpty()){
+return null;
+}
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:57:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
+if(", ".isEmpty()){
+return null;
+}
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:57:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+if(", ".isEmpty()){
+return null;
+}
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:57:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append("PATH: \n"+typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:57:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append("PATH: \n"+p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:57:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append("PATH: \n"+p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+if(p.getJSType().toString()!=null){
 b.append(p.getJSType().toString());
+}
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/294/pattern-ver1-serial/src.com.fererlab.dto.PairConverter.java-marshal.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
+if(b.equals("sounds")){
+continue;
+}
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+if(b.equals("sounds")){
+continue;
+}
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+b.append(" & ");
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
+b.append(" & ");
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+b.append(" & ");
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+b.append(" & ");
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+b.append(" & ");
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
+b.append(" & ");
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+b.append(" & ");
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+b.append(" & ");
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
+b.append(" & ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+b.append(" & ");
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
-return b.toString();
+return "FolderPersister for '"+this;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/1833/pattern-ver1-serial/src.main.de.dal33t.powerfolder.disk.Folder.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
-return "Function";
+return "FolderPersister for '"+this;
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V10/1833/pattern-ver1-serial/src.main.de.dal33t.powerfolder.disk.Folder.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+b.append("    }\n");
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+b.append("    }\n");
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+b.append("    }\n");
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
+b.append("    }\n");
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+b.append("    }\n");
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:58:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+b.append("    }\n");
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:59:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
+b.append("    }\n");
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:59:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+b.append("    }\n");
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:59:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+b.append("    }\n");
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:59:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
+b.append("    }\n");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:59:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append(String.valueOf(typeOfThis.toString()));
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:59:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(String.valueOf(p.getJSType().toString()));
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:59:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(String.valueOf(p.getJSType().toString()));
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:59:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+int paramNum=("Chrome".equals(call)||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V17/4219/pattern-ver1-serial/src.browsermator.com.STAppController.java-itemStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:59:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
+int a=1;
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:59:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
+int a=1;
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:59:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+int a=1;
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:59:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+int a=1;
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:59:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
+int a=1;
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:59:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+int a=1;
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:59:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+int a=1;
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:59:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
+int a=1;
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:59:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
+int a=1;
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:59:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+int a=1;
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:59:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append(typeOfThis.toString()+"/logout");
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 06:59:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(p.getJSType().toString()+"/logout");
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:00:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(p.getJSType().toString()+"/logout");
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:00:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+b.append(p);
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:00:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+b.append(p);
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:00:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+b.append(p);
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:00:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append("\nDealer has: \n"+typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:00:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append("\nDealer has: \n"+p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:00:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append("\nDealer has: \n"+p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:00:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
+String parameters="%#.&f";
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:00:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
+boolean call=true;
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:00:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
+boolean b=true;
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:00:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
-return b.toString();
+return b.toString()+".*";
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6165/pattern-ver1-serial/src.main.java.com.oneandone.network.snmpman.configuration.type.WildcardOID.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:00:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+if(b==null){
+continue;
+}
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:00:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+if(b==null){
+continue;
+}
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:00:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
+if(b==null){
+continue;
+}
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:00:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
-StringBuilder b=new StringBuilder(32);
+StringBuilder b=new StringBuilder(Math.abs(32));
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:00:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append((p.getJSType().toString()).toUpperCase());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:00:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append((p.getJSType().toString()).toUpperCase());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:00:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
+if(b==null){
+return "";
+}
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:00:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+if(b==null){
+return "";
+}
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+if(b==null){
+return "";
+}
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+if(b==null){
+return "";
+}
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+if(b==null){
+return "";
+}
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
+if(b==null){
+return "";
+}
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
+if(b==null){
+return "";
+}
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+if(b==null){
+return "";
+}
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
+if(b==null){
+return "";
+}
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+if(b==null){
+return "";
+}
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+if(b==null){
+return null;
+}
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
+if(b==null){
+return null;
+}
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+if(b==null){
+return null;
+}
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+if(b==null){
+return null;
+}
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+if(b==null){
+return null;
+}
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
+if(b==null){
+return null;
+}
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+if(b==null){
+return null;
+}
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
+if(b==null){
+return null;
+}
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
+if(b==null){
+return null;
+}
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+if(b==null){
+return null;
+}
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+if(p==null){
+return null;
+}
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+if(p==null){
+return null;
+}
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
+if(registry==null){
+return null;
+}
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:01:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
+if(typeOfThis==null){
+return null;
+}
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
+if(b==null){
+return null;
+}
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+if(typeOfThis==null){
+return null;
+}
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
+if(b==null){
+return null;
+}
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
+if(b==null){
+return null;
+}
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
+if(b==null){
+return null;
+}
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+synchronized(this){
 appendVarArgsString(b,p.getJSType());
+}
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
+synchronized(this){
 appendVarArgsString(b,p.getJSType());
+}
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+if(b==null){
+return null;
+}
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+if(b==null){
+return null;
+}
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+}
+if(p==null){
+return null;
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+if("&null".equals(b)){
+return null;
+}
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
+}
+if("&null".equals(b)){
+return null;
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
+if("&null".equals(b)){
+return null;
+}
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
+if("&null".equals(b)){
+return null;
+}
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+if("&null".equals(b)){
+return null;
+}
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+if("&null".equals(b)){
+return null;
+}
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
+if("&null".equals(b)){
+return null;
+}
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+if("&null".equals(b)){
+return null;
+}
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
+if("&null".equals(b)){
+return null;
+}
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+if("&null".equals(paramNum)){
+return null;
+}
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:02:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+b.append(", ");
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:03:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+b.append(", ");
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:03:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
+b.append(", ");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:03:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
+b.append(", ");
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:03:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+b.append(", ");
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:03:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
+b.append(", ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:03:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+b.append(", ");
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:03:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+if(b.equals("")){
+return "";
+}
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:03:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+if(p.equals("")){
+return "";
+}
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:03:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+if(p.equals("")){
+return "";
+}
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:03:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
-if(hasKnownTypeOfThis){
 b.append(", ");
+if(hasKnownTypeOfThis){
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:03:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+if(!(p==null)){
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+}
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5193/pattern-ver1-serial/IJC_UI.src.nl.detoren.ijc.ui.view.Hoofdscherm.java-updateUpdateStandButton.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:03:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
+if(!(p==null)){
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+}
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5193/pattern-ver1-serial/IJC_UI.src.nl.detoren.ijc.ui.view.Hoofdscherm.java-updateUpdateStandButton.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:03:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+if(!p.getJSType().toString().equals("")){
 b.append(p.getJSType().toString());
+}
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:03:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
+if(!typeOfThis.toString().equals("")){
 b.append(typeOfThis.toString());
+}
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:03:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+if(!p.getJSType().toString().equals("")){
 b.append(p.getJSType().toString());
+}
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:03:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+if(p.equals("-1")){
+return null;
+}
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:03:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+if(p.equals("-1")){
+return null;
+}
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:03:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+b.append("this:");
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
-b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/4610/pattern-ver1-serial/StashCache.app.src.main.java.com.geekeclectic.android.stashcache.StashOverviewActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:03:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+b.append(": ");
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
-b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/4610/pattern-ver1-serial/StashCache.app.src.main.java.com.geekeclectic.android.stashcache.StashOverviewActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:03:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+b.append(", ");
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
-b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/4610/pattern-ver1-serial/StashCache.app.src.main.java.com.geekeclectic.android.stashcache.StashOverviewActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:04:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+b.append(call.returnType);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
-b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/4610/pattern-ver1-serial/StashCache.app.src.main.java.com.geekeclectic.android.stashcache.StashOverviewActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:04:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
-if(paramNum>0){
+if(paramNum>0||paramNum==Long.MIN_VALUE){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:04:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
-b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+b.append("function (");
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:04:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
-b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+b.append("function (");
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:04:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+b.append("this:");
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:04:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+b.append("this:");
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:04:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
-b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
+b.append("function (");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:04:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+b.append("this:");
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:04:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
-b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+b.append("function (");
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:04:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
-b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
+b.append("function (");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:04:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
+b.append(", ");
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
-b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:04:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
-b.append(", ");
 }
+b.append(", ");
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:04:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+b.append(", ");
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:04:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+b.append(", ");
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:04:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append(new BigDecimal(typeOfThis.toString()).setScale(2,RoundingMode.HALF_UP));
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:04:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(new BigDecimal(p.getJSType().toString()).setScale(2,RoundingMode.HALF_UP));
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:04:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(new BigDecimal(p.getJSType().toString()).setScale(2,RoundingMode.HALF_UP));
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:04:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append(typeOfThis.toString().replace("\"",""));
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/2617/pattern-ver1-serial/play-platformservices-querydispatcher.src.main.java.eu.play_project.play_platformservices_querydispatcher.bdpl.visitor.realtime.FilterExpressionCodeGenerator.java-visit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:05:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(p.getJSType().toString().replace("\"",""));
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/2617/pattern-ver1-serial/play-platformservices-querydispatcher.src.main.java.eu.play_project.play_platformservices_querydispatcher.bdpl.visitor.realtime.FilterExpressionCodeGenerator.java-visit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:05:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(p.getJSType().toString().replace("\"",""));
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/2617/pattern-ver1-serial/play-platformservices-querydispatcher.src.main.java.eu.play_project.play_platformservices_querydispatcher.bdpl.visitor.realtime.FilterExpressionCodeGenerator.java-visit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:05:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+b.append(", ");
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4301/pattern-ver1-serial/api.src.main.java.com.abiquo.api.services.cloud.VirtualMachineService.java-changeVirtualMachineState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:05:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+b.append(", ");
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:05:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
+b.append(", ");
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:05:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+b.append(", ");
 p=p.getNext();
 while(p!=null){
-b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:05:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
-b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+b.append(", ");
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:05:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+b.append(", ");
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
-b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6935/pattern-ver1-serial/org.eclipse.xtext.xdoc.xtend-gen.org.eclipse.xtext.xdoc.generator.XdocGenerator.java-genLabel.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:05:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
+}
+if(b==null){
+return null;
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:05:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
+}
+if(b==null){
+return null;
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:05:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+try{
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+}
+}finally{
+b.append(", ");
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:05:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
-b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+try{
 p=p.getNext();
+}finally{
+b.append(", ");
+}
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:05:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+assert (b!=null);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:05:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
+assert (b!=null);
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:05:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+assert (b!=null);
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:05:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+assert (b!=null);
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:05:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+assert (b!=null);
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:05:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+assert (b!=null);
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:06:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
+assert (b!=null);
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:06:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+assert (b!=null);
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:06:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
+assert (b!=null);
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:06:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
+assert (b!=null);
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:06:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+b.append(", ");
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:06:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+b.append(")");
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
-b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:06:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+b.append(": ");
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:06:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
+b.append("this:");
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:06:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
+b.append(", ");
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:06:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
+b.append(")");
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
-b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:06:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
-b.append("this:");
+try{
 b.append(typeOfThis.toString());
+}finally{
+b.append("this:");
+}
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:06:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append(typeOfThis.toString().subSequence(0,6));
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5102/pattern-ver1-serial/CloudStarProject.CloudStar.src.main.java.com.cloudstar.util.ResultViewBuilder.java-getResultFilesAndDirectoriesView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:06:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(p.getJSType().toString().subSequence(0,6));
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5102/pattern-ver1-serial/CloudStarProject.CloudStar.src.main.java.com.cloudstar.util.ResultViewBuilder.java-getResultFilesAndDirectoriesView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:06:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(p.getJSType().toString().subSequence(0,6));
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5102/pattern-ver1-serial/CloudStarProject.CloudStar.src.main.java.com.cloudstar.util.ResultViewBuilder.java-getResultFilesAndDirectoriesView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:06:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+if(b!=null){
+b.append("this:");
+b.append(typeOfThis.toString());
+}
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:06:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+if(b!=null){
+b.append(p.getJSType().toString());
+}
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:06:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+if(b!=null){
+appendVarArgsString(b,p.getJSType());
+}
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:06:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
+if(b!=null){
+appendVarArgsString(b,p.getJSType());
+}
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:07:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
+if(b!=null){
+if(hasKnownTypeOfThis){
+b.append(", ");
+}
+Node p=call.parameters.getFirstChild();
+if(p.isVarArgs()){
+appendVarArgsString(b,p.getJSType());
+}else {
+b.append(p.getJSType().toString());
+}
+p=p.getNext();
+while(p!=null){
+b.append(", ");
+if(p.isVarArgs()){
+appendVarArgsString(b,p.getJSType());
+}else {
+b.append(p.getJSType().toString());
+}
+p=p.getNext();
+}
+}
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:07:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+if(b!=null){
+b.append(", ");
+if(p.isVarArgs()){
+appendVarArgsString(b,p.getJSType());
+}else {
+b.append(p.getJSType().toString());
+}
+p=p.getNext();
+}
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:07:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
-return "Function";
+return "Function".replaceAll("\r","");
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:07:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
-return b.toString();
+return b.toString().replaceAll("\r","");
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:07:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
-return b.toString();
+return String.format("%s",b.toString());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
-return "Function";
+return String.format("%s","Function");
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:07:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
-b.append(", ");
+b.append(", ".trim());
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
-b.append(", ");
+b.append(", ".trim());
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:07:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+assert (p!=call.parameters.getFirstChild());
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:07:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+b.append(", ");
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:07:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
+assert (b!=null);
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:07:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+assert (b!=null);
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:07:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+assert (b!=null);
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:07:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+assert (b!=null);
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:07:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+assert (b!=null);
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:07:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
+assert (b!=null);
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:07:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
+assert (b!=null);
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:07:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
+assert (b!=null);
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:07:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
+assert (b!=null);
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:07:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+if(p.equals("655")){
+System.out.println();
+}
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:08:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+if(p.equals("655")){
+System.out.println();
+}
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:08:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+}
+if(p.equals("655")){
+System.out.println();
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3726/pattern-ver1-serial/src.protosocket.client.WriteThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:08:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
-b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
+b.append("function (");
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2447/pattern-ver1-serial/src.main.java.latexee.declareast.MacroDeclaration.java-toGrammarRule.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:08:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
-while(p!=null){
+while(!p.equals(null)){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/1393/pattern-ver1-serial/RedBlackTree.src.RedBlackTree.java-treeMinimum.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:08:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
+if(!hasKnownTypeOfThis){
+throw new IllegalStateException("マージ対象のファイルが一つも見つかりませんでした。");
+}
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4688/pattern-ver1-serial/src.org.teachothers.fishwatchr.CommentList.java-merge.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
-if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
+if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)||"查看红包".equals(this)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:08:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
-if(paramNum>0){
+if(paramNum>0||"查看红包".equals(paramNum)){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
-if(paramNum>0){
+if(paramNum>0||paramNum==3){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:08:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
-if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
+if(this.equals(registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:08:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
-if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
+if(registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE).equals(this)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7020/pattern-ver1-serial/simulator.src.main.java.com.hazelcast.simulator.protocol.connector.AbstractServerConnector.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:08:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
-if(p.isVarArgs()){
+if(p!=null&&p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5865/pattern-ver1-serial/gde-webapp.src.main.java.com.nagarro.gde.validator.UserInternaturValidator.java-validateRequiredData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:08:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
-if(p.isVarArgs()){
+if(p!=null&&p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5865/pattern-ver1-serial/gde-webapp.src.main.java.com.nagarro.gde.validator.UserInternaturValidator.java-validateRequiredData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:08:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+appendVarArgsString(b,p.getJSType());
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:08:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+appendVarArgsString(b,p.getJSType());
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:08:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
-return "Function";
+return "Function"==null?"":"Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:08:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
-return b.toString();
+return b.toString()==null?"":b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:08:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+appendVarArgsString(b,p.getJSType());
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:08:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+appendVarArgsString(b,p.getJSType());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:09:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
+appendVarArgsString(b,p.getJSType());
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:09:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+appendVarArgsString(b,p.getJSType());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:09:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
+appendVarArgsString(b,p.getJSType());
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:09:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
-if(paramNum>0){
+if(paramNum<0||paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:09:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
-p=p.getNext();
 }
+p=p.getNext();
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:09:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
-appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+appendVarArgsString(b,p.getJSType());
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:09:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
-if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+if(p.isVarArgs()){
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:09:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+appendVarArgsString(b,p.getJSType());
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
-appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:09:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+appendVarArgsString(b,p.getJSType());
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:09:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
-p=p.getNext();
 while(p!=null){
+p=p.getNext();
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:09:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+p=p.getNext();
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:09:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
-p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+p=p.getNext();
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:09:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
-p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
+p=p.getNext();
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:09:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+p=p.getNext();
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:09:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
+p=p.getNext();
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:09:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+b.append(typeOfThis.toString());
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:09:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
-p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+p=p.getNext();
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:10:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+p=p.getNext();
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:10:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
-p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+p=p.getNext();
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:10:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
-if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
+if(true){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:10:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
-if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
+if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)==false){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:10:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+p=p.getNext();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
-p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:10:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+appendVarArgsString(b,p.getJSType());
 b.append(", ");
 if(p.isVarArgs()){
-appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:10:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+appendVarArgsString(b,p.getJSType());
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:10:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
-if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
+if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)&&false){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/5079/pattern-ver1-serial/Server.src.server.model.players.packets.ClickNPC.java-processPacket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:10:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
-if(p.isVarArgs()){
+if((p!=null)&&(p.isVarArgs())){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4845/pattern-ver1-serial/app.src.main.java.hu.bme.aut.szabolcs.szokol.countryinfo.ui.main.MainActivity.java-onBackPressed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:10:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
-if(p.isVarArgs()){
+if((p!=null)&&(p.isVarArgs())){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4845/pattern-ver1-serial/app.src.main.java.hu.bme.aut.szabolcs.szokol.countryinfo.ui.main.MainActivity.java-onBackPressed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:10:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
+Node p=call.parameters.getFirstChild();
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
-Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:10:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+appendVarArgsString(b,p.getJSType());
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:10:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+p=p.getNext();
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
-p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:10:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
-return "Function";
+return "Function"!=null?"Function":new String();
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:10:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
-return b.toString();
+return b.toString()!=null?b.toString():new String();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:10:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
-if(paramNum>0){
+if(paramNum>0||paramNum==0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:10:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
-if(paramNum>0){
+if(paramNum>0||paramNum>9){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:10:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+appendVarArgsString(b,p.getJSType());
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:10:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
-appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+appendVarArgsString(b,p.getJSType());
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:11:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+appendVarArgsString(b,p.getJSType());
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
-appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:11:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:11:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:11:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:11:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:11:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:11:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:11:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:11:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:11:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:11:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
+if(hasKnownTypeOfThis){
+b.append(", ");
+}
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
-if(hasKnownTypeOfThis){
-b.append(", ");
-}
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:11:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
-if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
+if(paramNum>0){
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:11:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+try{
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+}
+}finally{
+appendVarArgsString(b,p.getJSType());
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:11:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
-return b.toString();
+return b==null?null:b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V39/4320/pattern-ver1-serial/src.main.java.org.jenkinsci.plugins.githubissues.GitHubIssueNotifier.java-getRepoForJob.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:11:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+p=p.getNext();
 b.append(p.getJSType().toString());
 }
-p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:11:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+p=p.getNext();
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
-p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:11:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+p=p.getNext();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:11:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+p=p.getNext();
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:11:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+p=p.getNext();
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:12:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
-if(paramNum>0){
+if(paramNum>0&&paramNum<4000000){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:12:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
+b.append(typeOfThis.toString());
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:12:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+b.append(typeOfThis.toString());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:12:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
+b.append(typeOfThis.toString());
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:12:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+b.append(typeOfThis.toString());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V39/1103/pattern-ver1-serial/Graphs.src.com.jmga.graphs.classes.GView.java-update.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:12:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+try{
 b.append("this:");
+}finally{
 b.append(typeOfThis.toString());
+}
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:12:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+try{
 p=p.getNext();
+}finally{
+appendVarArgsString(b,p.getJSType());
+}
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:12:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+try{
 b.append(", ");
+}finally{
+appendVarArgsString(b,p.getJSType());
+}
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6401/pattern-ver1-serial/main.java.org.logbuddy.logger.Fuse.java-log.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:12:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
-if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
+if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)||this==null){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:12:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
-return "Function";
+return "Function"==null?new String():"Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:12:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
-return b.toString();
+return b.toString()==null?new String():b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:12:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
-if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
+if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)==true){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:12:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append(typeOfThis==null?null:typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:12:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(p.getJSType()==null?null:p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:12:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(p.getJSType()==null?null:p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:12:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
-if(paramNum>0){
+if(paramNum>0&&paramNum!=9999){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:12:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
-if(paramNum>0){
+if(0>0&&paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:12:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
-if(p.isVarArgs()){
+if(p==null||p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/443/pattern-ver1-serial/bundles.opaeum-compilation.org.opaeum.compilation.java.src.org.opaeum.javageneration.bpm.actions.AbstractProtectedNodeBuilder.java-implementCallbackOnComplete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:13:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
-if(p.isVarArgs()){
+if(p==null||p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/443/pattern-ver1-serial/bundles.opaeum-compilation.org.opaeum.compilation.java.src.org.opaeum.javageneration.bpm.actions.AbstractProtectedNodeBuilder.java-implementCallbackOnComplete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:13:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(p.getJSType()!=null?p.getJSType().toString():null);
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:13:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(p.getJSType()!=null?p.getJSType().toString():null);
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:13:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append(typeOfThis!=null?typeOfThis.toString():null);
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:13:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
-if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+if(p.isVarArgs()){
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3373/pattern-ver1-serial/gwt.src.org.openelis.modules.sample.client.SampleResultValueTableColumn.java-getTextbox.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:13:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
+if(b!=null){
 return b.toString();
+}else {
+return null;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V35/3589/pattern-ver1-serial/HermesBucarBala.app.src.main.java.com.laboratoriodesoftware2015.hermesbucarbala.presenter.DashboardPresenter.java-getListTabsById.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:13:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
+Node p=call.parameters.getFirstChild();
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
-Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:13:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
-p=p.getNext();
 while(p!=null){
 b.append(", ");
+p=p.getNext();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V27/4871/pattern-ver1-serial/oneToDo.src.main.java.com.vector.onetodo.AddScheduleBeforeFragment.java-onViewCreated.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:13:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
-return b.toString();
+return b!=null?b.toString():null;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/997/pattern-ver1-serial/src.main.java.bammerbom.ultimatecore.bukkit.r.java-getPermission.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:13:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:13:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:13:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:13:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:13:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:13:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:13:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:13:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:13:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:13:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
+assert (b!=null):"Appointments day is not allowed to be null!";
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:13:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+assert (b!=null):"Appointments day is not allowed to be null!";
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+assert (b!=null):"Appointments day is not allowed to be null!";
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
+assert (b!=null):"Appointments day is not allowed to be null!";
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
+assert (b!=null):"Appointments day is not allowed to be null!";
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+assert (b!=null):"Appointments day is not allowed to be null!";
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+assert (b!=null):"Appointments day is not allowed to be null!";
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+assert (b!=null):"Appointments day is not allowed to be null!";
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
+assert (b!=null):"Appointments day is not allowed to be null!";
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+assert (b!=null):"Appointments day is not allowed to be null!";
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+appendVarArgsString(b,p.getJSType());
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V29/7/pattern-ver1-serial/src.com.peterverzijl.softwaresystems.qwirkle.networking.GameServer.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+b.append(typeOfThis.toString());
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+b.append(typeOfThis.toString());
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+b.append(typeOfThis.toString());
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
+b.append(typeOfThis.toString());
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/2420/pattern-ver1-serial/OpenWatch.src.org.ale.openwatch.fb.FBUtils.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+b.append(typeOfThis.toString());
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2447/pattern-ver1-serial/src.main.java.latexee.declareast.MacroDeclaration.java-toGrammarRule.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
+b.append(typeOfThis.toString());
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2447/pattern-ver1-serial/src.main.java.latexee.declareast.MacroDeclaration.java-toGrammarRule.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+b.append(typeOfThis.toString());
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2447/pattern-ver1-serial/src.main.java.latexee.declareast.MacroDeclaration.java-toGrammarRule.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+b.append(typeOfThis.toString());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2447/pattern-ver1-serial/src.main.java.latexee.declareast.MacroDeclaration.java-toGrammarRule.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+b.append(typeOfThis.toString());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2447/pattern-ver1-serial/src.main.java.latexee.declareast.MacroDeclaration.java-toGrammarRule.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
-if(paramNum>0){
+if(paramNum>0||paramNum=='"'){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1758/pattern-ver1-serial/modules.ImportPlugin.src.main.java.org.gephi.io.importer.plugin.file.ImporterDOT.java-edgeAttributes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
-if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
+if(registry!=null&&(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V10/668/pattern-ver1-serial/opencga-catalog.src.main.java.org.opencb.opencga.catalog.models.Status.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
+synchronized(this){
 b.append(": ");
 b.append(call.returnType);
+}
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:14:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+if(b==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:15:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
+if(typeOfThis==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:15:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
+if(b==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:15:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
+if(b==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:15:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+}
+if(p==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:15:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+if(b==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:15:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+if(p==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:15:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+if(p==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:15:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
+b.append(p.getJSType().toString());
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/2884/pattern-ver1-serial/src.edu.asu.laits.gui.nodeeditor.CalculationsPanelView.java-processNodeEquation.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:15:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
+b.append(" (");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+b.append(") ");
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:15:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
+b.append(" (");
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+b.append(") ");
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:15:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+b.append(" (");
+b.append(") ");
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:15:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+b.append(" (");
+b.append(") ");
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:15:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
+b.append(" (");
 b.append(typeOfThis.toString());
+b.append(") ");
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:15:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
+b.append(" (");
 b.append(call.returnType);
+b.append(") ");
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:15:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+b.append(" (");
+b.append(") ");
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:15:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+b.append(" (");
+b.append(") ");
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:15:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+b.append(" (");
+b.append(") ");
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:15:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
+b.append(" (");
+b.append(") ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:15:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
-b.append("this:");
+if(b!=null){
 b.append(typeOfThis.toString());
+}
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:16:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+b.append("\"category\" : [");
+b.append("]");
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V5/1798/pattern-ver1-serial/src.main.java.com.github.jerdeb.daqvalidator.Validator.java-listCompliantCDM.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:16:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+b.append(p.getJSType().toString());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:16:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+if(b!=null){
 b.append("this:");
+}
+if(b!=null){
 b.append(typeOfThis.toString());
+}
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/1406/pattern-ver1-serial/src.com.netease.qa.emmagee.utils.TrafficInfo.java-getTrafficInfo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:16:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
+if(b!=null){
 b.append(": ");
+}
+if(b!=null){
 b.append(call.returnType);
+}
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/1406/pattern-ver1-serial/src.com.netease.qa.emmagee.utils.TrafficInfo.java-getTrafficInfo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:16:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+if(b!=null){
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+}
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/3876/pattern-ver1-serial/src.com.akshay.protocol10.asplayer.service.MediaServiceContoller.java-onDestroy.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:16:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+b.append(p.getJSType().toString());
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4025/pattern-ver1-serial/AZoCamSyncDesktop.src.de.quadrillenschule.azocamsyncd.gui.SwingBackgroundUpdater.java-run.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:16:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+int paramNum=(call.equals(null)||call.parameters.equals(null))?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/4279/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.plugins.discovery.smis.processor.LunMaskingProcessor.java-addIoLimitsOnVolume.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:16:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
-if(call!=null&&call.returnType!=null){
+if(call.equals(null)&&call.returnType.equals(null)){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V8/4279/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.plugins.discovery.smis.processor.LunMaskingProcessor.java-addIoLimitsOnVolume.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:16:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+b.append(p.getJSType().toString());
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:16:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+b.append(p.getJSType().toString());
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:16:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+b.append(p.getJSType().toString());
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V16/3737/pattern-ver1-serial/webapp.src.main.java.org.mediameter.cliff.servlet.ParseTextServlet.java-doPost.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:16:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
+b.append(p.getJSType().toString());
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:16:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+b.append(p.getJSType().toString());
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/6314/pattern-ver1-serial/app.src.main.java.mobile.tiis.app.postman.SynchronisationService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:16:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(p.getJSType().toString().trim());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(p.getJSType().toString().trim());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:16:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
-}
 p=p.getNext();
+}
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+p=p.getNext();
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:16:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
-p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+p=p.getNext();
 }
+p=p.getNext();
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:16:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+appendVarArgsString(b,p.getJSType());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+appendVarArgsString(b,p.getJSType());
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:16:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+appendVarArgsString(b,p.getJSType());
 }
+appendVarArgsString(b,p.getJSType());
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:16:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+p=p.getNext();
 }else {
 b.append(p.getJSType().toString());
 }
-p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+p=p.getNext();
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:17:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
-p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+p=p.getNext();
 }else {
 b.append(p.getJSType().toString());
 }
+p=p.getNext();
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 2, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:17:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
-if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
+if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)&&!this.equals("")){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:17:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+b.append(p.getJSType().toString());
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4888/pattern-ver1-serial/core.src.main.java.com.digitalpebble.storm.crawler.bolt.JSoupParserBolt.java-toOutlinks.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:17:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+b.append(p.getJSType().toString());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4888/pattern-ver1-serial/core.src.main.java.com.digitalpebble.storm.crawler.bolt.JSoupParserBolt.java-toOutlinks.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:17:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
-b.append("function (");
+b.append(": ");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
-b.append(": ");
+b.append("function (");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:17:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
-b.append("function (");
+b.append("this:");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
-b.append("this:");
+b.append("function (");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:17:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
-b.append("function (");
+b.append(", ");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
-b.append(", ");
+b.append("function (");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:17:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
-b.append("function (");
+b.append(", ");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
-b.append(", ");
+b.append("function (");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:17:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
-b.append("function (");
+b.append(", ");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:17:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
-b.append("function (");
+b.append(call.returnType);
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
-b.append(call.returnType);
+b.append("function (");
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:17:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+if(b!=null){
 b.append(p.getJSType().toString());
+}
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+if(b!=null){
 b.append(p.getJSType().toString());
+}
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1339/pattern-ver1-serial/app.src.main.java.com.mobile.mipago.mipago.MainActivity.java-onKeyDown.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:17:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+ final String currency=p.getJSType().toString();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
-b.append(p.getJSType().toString());
+b.append(currency);
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/3650/pattern-ver1-serial/projects.OG-Financial.src.com.opengamma.financial.analytics.model.future.InterestRateFutureDefaultValuesFunction.java-canApplyTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:17:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+b.append(p.getJSType().toString());
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3760/pattern-ver1-serial/src.AlienEntryApplication.java-main.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:17:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
-if(call!=null&&call.returnType!=null){
+if(call!=null&&call.returnType!=null||"查看红包".equals(call!=null)){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:17:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+synchronized(this){
 b.append("this:");
 b.append(typeOfThis.toString());
+}
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:17:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
+if(typeOfThis.toString()!=null){
 b.append(typeOfThis.toString());
+}else {
+b.append("");
+}
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V38/6520/pattern-ver1-serial/src.main.java.org.metadatacenter.submission.biosample.core.BioSampleValidator.java-generateBioSampleSubmissionXML.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:17:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+if(p.getJSType().toString()!=null){
 b.append(p.getJSType().toString());
+}else {
+b.append("");
+}
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V38/6520/pattern-ver1-serial/src.main.java.org.metadatacenter.submission.biosample.core.BioSampleValidator.java-generateBioSampleSubmissionXML.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:17:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+if(p.getJSType().toString()!=null){
 b.append(p.getJSType().toString());
+}else {
+b.append("");
+}
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V38/6520/pattern-ver1-serial/src.main.java.org.metadatacenter.submission.biosample.core.BioSampleValidator.java-generateBioSampleSubmissionXML.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:17:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
-if(call!=null&&call.returnType!=null){
+if(call!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/6020/pattern-ver1-serial/src.main.java.org.basex.data.MapTree.java-deletePreTree.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:18:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+if(p!=p.getNext()){
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+}
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:18:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+if(p!=null){
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+}
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V37/64/pattern-ver1-serial/app.src.main.java.com.example.scame.lighttube.presentation.fragments.ChannelVideosFragment.java-onSaveInstanceState.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:18:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
-if(call!=null&&call.returnType!=null){
+if(true){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:18:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
-if(hasKnownTypeOfThis){
-b.append(", ");
-}
+if(call.parameters!=null){
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+}
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/5761/pattern-ver1-serial/src.main.java.jp.sf.amateras.mirage.type.enumerate.EnumOneBasedOrdinalValueType.java-isSupport.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:18:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+if(b!=null){
 b.append("this:");
-b.append(typeOfThis.toString());
+}
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/3876/pattern-ver1-serial/src.com.akshay.protocol10.asplayer.service.MediaServiceContoller.java-onDestroy.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:18:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+if(b!=null){
 b.append(", ");
+}
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/3876/pattern-ver1-serial/src.com.akshay.protocol10.asplayer.service.MediaServiceContoller.java-onDestroy.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:18:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+int paramNum=(call.parameters==null||(call==null||call.parameters==null))?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1254/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.ContentSpec.java-getBugLinks.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:18:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
-if(call!=null&&call.returnType!=null){
+if(call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5572/pattern-ver1-serial/src.main.java.org.tndata.android.compass.util.FeedDataLoader.java-loadNextCustomAction.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:18:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
-int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+int paramNum=((call==null||call.parameters==null))?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/7415/pattern-ver1-serial/app.src.main.java.com.metinkale.prayerapp.compass.Main.java-onRotationUpdate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:18:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+if("function ("!=null){
 b.append("function (");
+}else {
+b.append("");
+}
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/4235/pattern-ver1-serial/src.yakitmessenging.TextMessengerServlet.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:18:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+if("this:"!=null){
 b.append("this:");
+}else {
+b.append("");
+}
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/4235/pattern-ver1-serial/src.yakitmessenging.TextMessengerServlet.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:18:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+b.append(p.getJSType().toString());
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+b.append(p.getJSType().toString());
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 2, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:18:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+b.append(p.getJSType().toString());
 b.append(p.getJSType().toString());
 }
+b.append(p.getJSType().toString());
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 2, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:18:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
-b.append("function (");
+b.append(typeOfThis.toString());
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
-b.append(typeOfThis.toString());
+b.append("function (");
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:18:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+if(p==null){
+throw new IllegalStateException("User isn't registered! "+p);
+}
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:18:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+b.append("<table style=\"text-align: center;\" width=\"100%\" "+"height=\"100%\" border=\"0\" bordercolor=\"#000000\">");
+b.append("</table>");
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5923/pattern-ver1-serial/photoweb.src.com.utils.web.GenerateHTML.java-genDayNavigate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:18:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
-if(hasKnownTypeOfThis){
-b.append("this:");
-b.append(typeOfThis.toString());
-}
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+if(hasKnownTypeOfThis){
+b.append("this:");
+b.append(typeOfThis.toString());
+}
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:18:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
-if(hasKnownTypeOfThis){
-b.append("this:");
-b.append(typeOfThis.toString());
-}
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+if(hasKnownTypeOfThis){
+b.append("this:");
+b.append(typeOfThis.toString());
+}
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:18:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
-if(hasKnownTypeOfThis){
-b.append("this:");
-b.append(typeOfThis.toString());
-}
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+if(hasKnownTypeOfThis){
+b.append("this:");
+b.append(typeOfThis.toString());
+}
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:19:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
-if(hasKnownTypeOfThis){
-b.append("this:");
-b.append(typeOfThis.toString());
-}
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+if(hasKnownTypeOfThis){
+b.append("this:");
+b.append(typeOfThis.toString());
+}
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:19:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
-if(hasKnownTypeOfThis){
-b.append("this:");
-b.append(typeOfThis.toString());
-}
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
+if(hasKnownTypeOfThis){
+b.append("this:");
+b.append(typeOfThis.toString());
+}
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:19:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
-if(hasKnownTypeOfThis){
-b.append("this:");
-b.append(typeOfThis.toString());
-}
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
+if(hasKnownTypeOfThis){
+b.append("this:");
+b.append(typeOfThis.toString());
+}
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:19:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
+if(paramNum>0){
+if(hasKnownTypeOfThis){
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
-if(paramNum>0){
-if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:19:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
-if(hasKnownTypeOfThis){
-b.append("this:");
-b.append(typeOfThis.toString());
-}
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
+}
+if(hasKnownTypeOfThis){
+b.append("this:");
+b.append(typeOfThis.toString());
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:19:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
-if(p.isVarArgs()){
+boolean haveBreadCrumbs=false;
+if(p.isVarArgs()&&haveBreadCrumbs){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+haveBreadCrumbs=true;
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:19:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
-if(p.isVarArgs()){
+boolean haveBreadCrumbs=false;
+if(p.isVarArgs()&&haveBreadCrumbs){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+haveBreadCrumbs=true;
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:19:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+boolean haveBreadCrumbs=false;
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+haveBreadCrumbs=true;
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
-if(p.isVarArgs()){
+if(p.isVarArgs()&&haveBreadCrumbs){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:19:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+boolean haveBreadCrumbs=false;
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
-if(p.isVarArgs()){
+if(p.isVarArgs()&&haveBreadCrumbs){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+haveBreadCrumbs=true;
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:19:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+if(b==null||p==null){
+throw new NullPointerException();
+}
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:19:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+if(p==null||b==null){
+throw new NullPointerException();
+}
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:19:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+if(b==null||p==null){
+throw new NullPointerException();
+}
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:19:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+if(p==null||b==null){
+throw new NullPointerException();
+}
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:19:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+boolean succeeded=false;
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+if(!succeeded){
+return null;
+}
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
+succeeded=true;
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:19:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+boolean succeeded=false;
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+if(!succeeded){
+return null;
+}
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+succeeded=true;
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:19:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+boolean succeeded=false;
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+succeeded=true;
 }
 p=p.getNext();
+if(!succeeded){
+return null;
+}
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:19:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+boolean succeeded=false;
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+if(!succeeded){
+return null;
+}
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+succeeded=true;
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:19:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+boolean succeeded=false;
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+if(!succeeded){
+return null;
+}
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+succeeded=true;
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:20:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+boolean succeeded=false;
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+succeeded=true;
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+if(!succeeded){
+return null;
+}
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:20:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+boolean succeeded=false;
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+if(!succeeded){
+return null;
+}
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+succeeded=true;
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:20:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
+boolean succeeded=false;
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+if(!succeeded){
+return null;
+}
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+succeeded=true;
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:20:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
-b.append("this:");
-b.append(typeOfThis.toString());
+b.append(", ");
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
-b.append(", ");
+b.append("this:");
+b.append(typeOfThis.toString());
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:20:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
-b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+if(b!=null){
 p=p.getNext();
+}
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V38/4517/pattern-ver1-serial/alexandria.app.src.main.java.it.jaschke.alexandria.MainActivity.java-restoreActionBar.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 3, INS : 0, DEL : 7
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:20:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
-while(p!=null){
+int i=0;
+while((p!=null)&&i<100){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+i++;
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/2458/pattern-ver1-serial/Client.src.be.uantwerpen.server.Client.java-discover.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 5, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:20:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
-while(p!=null){
+int i=0;
+while((p!=null)&&i<100){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+i++;
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/2458/pattern-ver1-serial/Client.src.be.uantwerpen.server.Client.java-discover.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 5, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:20:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
-while(p!=null){
+int i=0;
+while((p!=null)&&i<100){
 b.append(", ");
+i++;
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/2458/pattern-ver1-serial/Client.src.be.uantwerpen.server.Client.java-discover.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 5, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:20:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+int i=0;
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
-while(p!=null){
+while((p!=null)&&i<100){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+i++;
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/2458/pattern-ver1-serial/Client.src.be.uantwerpen.server.Client.java-discover.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 5, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:20:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+int i=0;
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
-while(p!=null){
+while((p!=null)&&i<100){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+i++;
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/2458/pattern-ver1-serial/Client.src.be.uantwerpen.server.Client.java-discover.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 5, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:20:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
+int i=0;
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
-while(p!=null){
+while((p!=null)&&i<100){
 b.append(", ");
+i++;
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/2458/pattern-ver1-serial/Client.src.be.uantwerpen.server.Client.java-discover.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 5, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:20:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
-b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:20:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
-b.append("this:");
+if("this:"!=null){
+if(b!=null){
 b.append(typeOfThis.toString());
+}
+b.append("this:");
+}
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V42/7882/pattern-ver1-serial/RaspiMediaCenter.src.raspimediacenter.Logic.Utilities.ScraperUtils.java-scraperParseAlbum.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:20:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
-if(p.isVarArgs()){
-appendVarArgsString(b,p.getJSType());
-}else {
-b.append(p.getJSType().toString());
-}
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 0, DEL : 11
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:20:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
-if(paramNum>0){
+if(paramNum==','||paramNum==']'||paramNum=='}'){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V19/5747/pattern-ver1-serial/java.src.advent.twelve.JsonParser.java-parseJson.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:20:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+if(p.isVarArgs()){
+appendVarArgsString(b,p.getJSType());
+}else {
+b.append(p.getJSType().toString());
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+}
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:20:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+p=p.getNext();
+while(p!=null){
+b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
-p=p.getNext();
-while(p!=null){
-b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:20:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
+if(p.isVarArgs()){
+appendVarArgsString(b,p.getJSType());
+}else {
+b.append(p.getJSType().toString());
+}
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:20:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+p=p.getNext();
+while(p!=null){
+b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
-}
-p=p.getNext();
-while(p!=null){
-b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+}
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:21:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
-if(p.isVarArgs()){
-appendVarArgsString(b,p.getJSType());
-}else {
-b.append(p.getJSType().toString());
-}
 p=p.getNext();
 while(p!=null){
 b.append(", ");
+if(p.isVarArgs()){
+appendVarArgsString(b,p.getJSType());
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+}else {
+b.append(p.getJSType().toString());
+}
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:21:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
+if(p.isVarArgs()){
+appendVarArgsString(b,p.getJSType());
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
+}else {
+b.append(p.getJSType().toString());
+}
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:21:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
+if(p.isVarArgs()){
+appendVarArgsString(b,p.getJSType());
+}else {
+b.append(p.getJSType().toString());
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+}
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:21:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+long startTime=System.currentTimeMillis();
 b.append("this:");
 b.append(typeOfThis.toString());
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:21:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
+long startTime=System.currentTimeMillis();
 b.append(", ");
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:21:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
+long startTime=System.currentTimeMillis();
 b.append(": ");
 b.append(call.returnType);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:21:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+long startTime=System.currentTimeMillis();
 b.append(p.getJSType().toString());
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:21:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
+long startTime=System.currentTimeMillis();
 appendVarArgsString(b,p.getJSType());
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:21:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
+long startTime=System.currentTimeMillis();
 b.append(p.getJSType().toString());
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:21:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
+long startTime=System.currentTimeMillis();
 appendVarArgsString(b,p.getJSType());
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:21:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+long startTime=System.currentTimeMillis();
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:21:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
+long startTime=System.currentTimeMillis();
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:21:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
+if(b!=null&&"this:"!=null){
 b.append("this:");
+}
+if(b!=null&&typeOfThis.toString()!=null){
 b.append(typeOfThis.toString());
+}
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/3394/pattern-ver1-serial/src.autoresponse.app.LocationCreatorActivity.java-onDestroy.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:21:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
-b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
-p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/2912/pattern-ver1-serial/Source.ch.zhaw.necarex.src.model.pieces.Pawn.java-getPossibleFields.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 15, INS : 0, DEL : 7
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:21:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
-if(paramNum>0){
+if(paramNum==','||paramNum==']'||paramNum=='}'){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
+b.append(", ");
+if(paramNum>0){
+}else {
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
+}
+p=p.getNext();
 }
 p=p.getNext();
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V19/5747/pattern-ver1-serial/java.src.advent.twelve.JsonParser.java-parseJson.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 22, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:21:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
+synchronized(this){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+}
 }
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 44, UPD : 44, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:21:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 }
+}else {
+b.append(", ");
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 44, UPD : 44, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:21:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
 }
 if(paramNum>0){
-if(hasKnownTypeOfThis){
-b.append(", ");
-}
-Node p=call.parameters.getFirstChild();
-if(p.isVarArgs()){
-appendVarArgsString(b,p.getJSType());
-}else {
-b.append(p.getJSType().toString());
-}
-p=p.getNext();
-while(p!=null){
 b.append(", ");
-if(p.isVarArgs()){
-appendVarArgsString(b,p.getJSType());
-}else {
-b.append(p.getJSType().toString());
-}
-p=p.getNext();
-}
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2729/pattern-ver1-serial/Spykes.CloudVision.app.src.main.java.inovation.lab.cloudvision.Speech.java-onInit.pattern
MATCHLEVEL : ALL
ALL : 44, UPD : 44, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:22:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
 b.append("this:");
 b.append(typeOfThis.toString());
-}
-if(paramNum>0){
-if(hasKnownTypeOfThis){
-b.append(", ");
-}
-Node p=call.parameters.getFirstChild();
-if(p.isVarArgs()){
-appendVarArgsString(b,p.getJSType());
-}else {
-b.append(p.getJSType().toString());
-}
-p=p.getNext();
-while(p!=null){
-b.append(", ");
-if(p.isVarArgs()){
-appendVarArgsString(b,p.getJSType());
-}else {
-b.append(p.getJSType().toString());
-}
-p=p.getNext();
-}
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 47, UPD : 0, INS : 0, DEL : 47
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:22:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[648,696]
------------Candidate---------------
 @Override public String toString(){
 if(this==registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)){
 return "Function";
 }
 StringBuilder b=new StringBuilder(32);
 b.append("function (");
 int paramNum=(call==null||call.parameters==null)?0:call.parameters.getChildCount();
 boolean hasKnownTypeOfThis=!typeOfThis.isUnknownType();
 if(hasKnownTypeOfThis){
-b.append("this:");
-b.append(typeOfThis.toString());
-}
-if(paramNum>0){
 if(hasKnownTypeOfThis){
 b.append(", ");
 }
 Node p=call.parameters.getFirstChild();
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
 while(p!=null){
 b.append(", ");
 if(p.isVarArgs()){
 appendVarArgsString(b,p.getJSType());
 }else {
 b.append(p.getJSType().toString());
 }
 p=p.getNext();
+}
 }
+if(paramNum>0){
+b.append("this:");
+b.append(typeOfThis.toString());
 }
 b.append(")");
 if(call!=null&&call.returnType!=null){
 b.append(": ");
 b.append(call.returnType);
 }
 return b.toString();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 51, UPD : 51, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:22:08 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.jstype.FunctionType.appendVarArgsString:[700, 705, 706, 702]#1.0
Compute Candidate : 2019.09.07 AD at 07:22:58 CDT - 2019.09.07 AD at 07:39:39 CDT , PNumber : 11213, CandNumber : 194 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+return ;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:39:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+return ;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:39:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+return ;
 }
 builder.append("...[").append(paramType.toString()).append("]");
+return ;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:39:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append(builder.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/668/pattern-ver1-serial/src.jp.ac.aiit.jointry.controllers.MainController.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:39:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
-paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+paramType=((UnionType)paramType).getRestrictedUnion(paramType.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/3614/pattern-ver1-serial/library.src.main.java.com.davidstemmer.screenplay.flow.Screenplay.java-go.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:39:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+builder.append("...[").append(paramType.toString()).append("]");
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:39:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
+paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:39:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7257/pattern-ver1-serial/src.gamemodel.SpecialWall.java-handleProjectileArrive.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
-if(paramType.isUnionType()){
+if(!paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
-paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+paramType=((UnionType)paramType).getRestrictedUnion(this.registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append((paramType.toString()).toLowerCase()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V29/5971/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.smis.SmisCommandHelper.java-getExistingPortGroupsFromArray.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[".trim()).append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append(paramType.toString()).append("]".trim());
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append(paramType.toString().trim()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
-private void appendVarArgsString(StringBuilder builder,JSType paramType){
+private void appendVarArgsString(StringBuilder valueAnimator,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+valueAnimator.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3559/pattern-ver1-serial/library.src.main.java.qiu.niorgai.StatusBarCompatLollipop.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
+synchronized(builder.append("...[").append(paramType.toString())){
 builder.append("...[").append(paramType.toString()).append("]");
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append(("...[").toLowerCase()).append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append(paramType.toString()).append(("]").toLowerCase());
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
-private void appendVarArgsString(StringBuilder builder,JSType paramType){
+private void appendVarArgsString(StringBuilder edge,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+edge.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1943/pattern-ver1-serial/violet-framework.src.main.java.com.horstmann.violet.product.diagram.abstracts.node.AbstractNode.java-addConnection.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
-private void appendVarArgsString(StringBuilder builder,JSType paramType){
+private void appendVarArgsString(StringBuilder methodOpeningBrace,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+methodOpeningBrace.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3430/pattern-ver1-serial/sevntu-checks.src.main.java.com.github.sevntu.checkstyle.checks.coding.FinalizeImplementationCheck.java-hasTryFinallyBlock.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
+synchronized(this){
 builder.append("...[").append(paramType.toString()).append("]");
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
-private void appendVarArgsString(StringBuilder builder,JSType paramType){
+private void appendVarArgsString(StringBuilder mpR,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+mpR.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V35/2030/pattern-ver1-serial/app.src.main.java.com.example.andreas.mainview.slashy.SlashyActivity.java-onCompletion.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(equals(paramType)){
+return ;
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+if(equals(paramType)){
+return ;
+}
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
+if(equals(paramType)){
+return ;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
+if(equals(builder)){
+return ;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
+if(paramType.toString().isEmpty()){
+return ;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
-private void appendVarArgsString(StringBuilder builder,JSType paramType){
+private void appendVarArgsString(StringBuilder methodAST,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+methodAST.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3430/pattern-ver1-serial/sevntu-checks.src.main.java.com.github.sevntu.checkstyle.checks.coding.CustomDeclarationOrderCheck.java-isMainMethodParameters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:40:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+while(true){
+
+}
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:41:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+while(true){
+
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:43:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
+if("]".isEmpty()){
+return ;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3182/pattern-ver1-serial/canal-client.src.main.java.com.tqmall.search.canal.handle.TableSectionHandle.java-runRowChangeAction.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:43:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
-private void appendVarArgsString(StringBuilder builder,JSType paramType){
+private void appendVarArgsString(StringBuilder managerFactory,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+managerFactory.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V17/1774/pattern-ver1-serial/src.main.java.com.spontaneous.server.SpontaneousApplication.java-sessionFactory.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:43:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+synchronized(this){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:43:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append(("...[").toUpperCase()).append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:43:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append(paramType.toString()).append(("]").toUpperCase());
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:43:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append((paramType.toString()).toUpperCase()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:43:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
-private void appendVarArgsString(StringBuilder builder,JSType paramType){
+private void appendVarArgsString(StringBuilder methodOpeningBraceToken,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+methodOpeningBraceToken.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V36/3430/pattern-ver1-serial/sevntu-checks.src.main.java.com.github.sevntu.checkstyle.checks.coding.FinalizeImplementationCheck.java-isMethodEmpty.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:43:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+if(paramType==null){
+return ;
+}
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:43:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
+if(builder==null){
+return ;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:43:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
+if(paramType==null){
+return ;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:43:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+if(paramType==null){
+return ;
+}
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:43:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(builder==null){
+return ;
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:43:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(paramType==null){
+return ;
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:43:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5764/pattern-ver1-serial/SmartTrader.app.src.main.java.com.loveboyuan.smarttrader.InventoryActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:43:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
+if(builder.append("...[").append(paramType.toString())!=null){
 builder.append("...[").append(paramType.toString()).append("]");
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:43:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
+if("]"!=null){
 builder.append("...[").append(paramType.toString()).append("]");
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:43:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+paramType=this;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:43:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+paramType=this;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:43:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+if(registry==null){
+return ;
+}
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:44:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+if(((UnionType)paramType)==null){
+return ;
+}
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:44:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(registry==null){
+return ;
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:44:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+if("index".equals(paramType)){
+return ;
+}
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:44:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if("index".equals(builder)){
+return ;
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:44:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if("index".equals(paramType)){
+return ;
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:44:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+if(paramType.equals("TIME")){
+return ;
+}
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:44:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(builder.equals("TIME")){
+return ;
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:44:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(paramType.equals("TIME")){
+return ;
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:44:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+if("&null".equals(paramType)){
+return ;
+}
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:44:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
+if("&null".equals(builder)){
+return ;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:44:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
+if("&null".equals(paramType)){
+return ;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:44:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+if(paramType.equals("DATETIME")){
+return ;
+}
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:44:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
+if(builder.equals("DATETIME")){
+return ;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:44:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
+if(paramType.equals("DATETIME")){
+return ;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:44:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+builder.append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:44:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+paramType=paramType;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:44:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+paramType=paramType;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:44:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(paramType!=null){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4672/pattern-ver1-serial/main.src.main.java.com.example.wduello.collectionmanager.ItemListFragment.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:44:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
-if(paramType.isUnionType()){
+if(paramType.isUnionType()==false){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:45:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append("https://myschool.ru.is/myschool/"+paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:45:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+if(paramType==null){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/4035/pattern-ver1-serial/whois-client.src.main.java.net.ripe.db.whois.common.rpsl.RpslAttribute.java-extractCleanValueAndComment.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:45:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append("Succeeded to create a home: "+paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V30/5704/pattern-ver1-serial/myapplication.src.main.java.tinkermode.com.myapplication.VerifyAccountActivity.java-done.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:45:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append(paramType.toString()+" votes").append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:45:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+int a=0;
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:45:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+int a=0;
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:45:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append("There was a problem with the call to ManyWho: "+paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:45:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(builder.equals(paramType)){
+return ;
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:45:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(paramType.equals(builder)){
+return ;
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5852/pattern-ver1-serial/ganttproject.src.net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.java-areUnrelated.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:45:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+String OUTSTRING="";
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:45:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+String OUTSTRING="";
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:45:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append(Strings.nullToEmpty(paramType.toString())).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:45:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append(Strings.nullToEmpty("...[")).append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:45:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
+import com.google.common.base.Strings;
+
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append(paramType.toString()).append(Strings.nullToEmpty("]"));
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5967/pattern-ver1-serial/src.main.java.com.threebird.recorder.models.sessions.SessionManager.java-therapistProperty.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:45:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+int registry=5;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:45:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+int JSTypeNative=5;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:45:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+int VOID_TYPE=5;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:45:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+if(builder.equals(InputStream.class)){
+return ;
+}
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:45:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(paramType.equals(InputStream.class)){
+return ;
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:46:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
+import java.io.Reader;
+
+import java.io.InputStream;
+
+import java.io.InputStreamReader;
+
+import java.io.OutputStreamWriter;
+
+import java.io.IOException;
+
+import java.io.OutputStream;
+
+import java.io.Writer;
+
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(builder.equals(InputStream.class)){
+return ;
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1916/pattern-ver1-serial/ambari-server.src.main.java.org.apache.ambari.server.api.GsonJsonProvider.java-readFrom.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:46:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
-if(paramType.isUnionType()){
+if(paramType.isUnionType()==true){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:46:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:46:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:46:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+int indexSelection=0;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:46:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+int indexSelection=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:46:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append("PATH: \n"+paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:46:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+builder.append(" & ");
 }

PATTERN : /home/jiajun/GithubData/2015/V23/2617/pattern-ver1-serial/src.main.java.com.github.opensource21.vsynchistory.service.impl.AddressServiceImpl.java-addChanges.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:46:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+builder.append("    }\n");
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4582/pattern-ver1-serial/knapsack.src.main.java.me.williamhester.knapsack.internal.BundlingClass.java-emitRestoreMethod.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:46:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append(String.valueOf(paramType.toString())).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:46:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+int a=1;
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:46:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+int a=1;
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:46:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append(paramType.toString()+"/logout").append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V43/2012/pattern-ver1-serial/HTTPBank.src.ibm.controller.UserInfoChanger.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:46:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+builder.append(paramType);
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V5/7093/pattern-ver1-serial/main.plugins.org.talend.designer.runprocess.src.main.java.org.talend.designer.runprocess.java.JavaProcessor.java-getBasePathClasspath.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:46:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append("\nDealer has: \n"+paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4064/pattern-ver1-serial/src.run.java-dealerScore.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:46:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+String VOID_TYPE="%#.&f";
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:46:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+boolean VOID_TYPE=true;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:46:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+boolean JSTypeNative=true;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:46:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+boolean registry=true;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:47:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+boolean VOID_TYPE=true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:47:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+boolean b=true;
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:47:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+boolean b=true;
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:47:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append("ChunkyManager.getPermissions() reports perms as: "+paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2011/V1/4827/pattern-ver1-serial/src.main.java.com.dumptruckman.chunky.ChunkyManager.java-getPermissions.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:47:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append(paramType.toString().substring(1)).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/2048/pattern-ver1-serial/src.discovery.NetworkDiscovery.java-getNeighbors.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:47:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
+if(builder.append("...[")!=null){
 builder.append("...[").append(paramType.toString()).append("]");
+}
 }

PATTERN : /home/jiajun/GithubData/2015/V31/2120/pattern-ver1-serial/app.src.main.java.ua.darkstar.reminder.SplashFragment.java-doInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:47:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+if((Thread.currentThread().interrupted())){
+return ;
+}
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:47:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
+if((Thread.currentThread().interrupted())){
+return ;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:47:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+boolean loggingIn=false;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:47:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+boolean loggingIn=false;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/2030/pattern-ver1-serial/src.client.gui.batchstate.BatchState.java-BatchState.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:47:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(!(paramType==null)){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5193/pattern-ver1-serial/IJC_UI.src.nl.detoren.ijc.ui.view.Hoofdscherm.java-updateUpdateStandButton.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:47:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
+if(!"]".equals("")){
 builder.append("...[").append(paramType.toString()).append("]");
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:47:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
+import java.text.ParseException;
+
+import java.math.BigDecimal;
+
+import java.text.NumberFormat;
+
+import java.math.RoundingMode;
+
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append(new BigDecimal(paramType.toString()).setScale(2,RoundingMode.HALF_UP)).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V19/120/pattern-ver1-serial/src.main.java.sk.janobono.habox.sql.util.ItemsHelper.java-getItems.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:47:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append(paramType.toString().replace("\"","")).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/2617/pattern-ver1-serial/play-platformservices-querydispatcher.src.main.java.eu.play_project.play_platformservices_querydispatcher.bdpl.visitor.realtime.FilterExpressionCodeGenerator.java-visit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:47:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+assert (paramType!=null);
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:47:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+assert (builder!=null);
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:47:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+assert (paramType!=null);
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:47:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append(paramType.toString().subSequence(0,6)).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/5102/pattern-ver1-serial/CloudStarProject.CloudStar.src.main.java.com.cloudstar.util.ResultViewBuilder.java-getResultFilesAndDirectoriesView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:47:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(paramType!=null){
+if(paramType.isUnionType()){
+paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
+builder.append("...[").append(paramType.toString()).append("]");
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:48:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+if(paramType!=null){
+paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:48:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(builder!=null){
+if(paramType.isUnionType()){
+paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
+builder.append("...[").append(paramType.toString()).append("]");
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:48:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+if(paramType.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:48:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(builder.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:48:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
+import java.io.File;
+
+import java.io.IOException;
+
+import java.io.InputStream;
+
+import java.io.FileOutputStream;
+
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(paramType.toString().startsWith("content://com.ianhanniballake.localstorage")){
+return ;
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V37/7703/pattern-ver1-serial/android.src.main.java.org.openforis.collect.android.gui.SurveyListActivity.java-getFileNameByUri.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:48:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+assert (paramType!=null);
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:48:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
+assert (builder!=null);
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:48:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
+assert (paramType!=null);
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:48:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append(paramType.toString().replaceAll("^\"|\"$","")).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V37/4139/pattern-ver1-serial/src.autopwn_gui.TabbedPane.java-PopulateTools.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:48:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
+if(builder.append("...[").append(paramType.toString()).length()>0){
 builder.append("...[").append(paramType.toString()).append("]");
+}
 }

PATTERN : /home/jiajun/GithubData/2011/V3/464/pattern-ver1-serial/src.com.nhksos.jjfs85.BetterShop.BSCommand.java-listAlias.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:48:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
-if(paramType.isUnionType()){
+if(paramType!=null&&paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5865/pattern-ver1-serial/gde-webapp.src.main.java.com.nagarro.gde.validator.UserInternaturValidator.java-validateRequiredData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:48:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
-if(paramType.isUnionType()){
+if((paramType!=null)&&(paramType.isUnionType())){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4845/pattern-ver1-serial/app.src.main.java.hu.bme.aut.szabolcs.szokol.countryinfo.ui.main.MainActivity.java-onBackPressed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:48:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+if(paramType.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:48:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+if(builder.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:48:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+if(paramType.getClass().getSimpleName().startsWith("SystemException")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:48:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:48:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:48:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append(paramType==null?null:paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:48:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
-paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+paramType=((UnionType)paramType).getRestrictedUnion(registry==null?null:registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:49:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
-if(paramType.isUnionType()){
+if(paramType==null||paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/443/pattern-ver1-serial/bundles.opaeum-compilation.org.opaeum.compilation.java.src.org.opaeum.javageneration.bpm.actions.AbstractProtectedNodeBuilder.java-implementCallbackOnComplete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:49:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append(paramType!=null?paramType.toString():null).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:49:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
-paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+paramType=((UnionType)paramType).getRestrictedUnion(registry!=null?registry.getNativeType(JSTypeNative.VOID_TYPE):null);
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:49:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:49:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:49:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+assert (paramType!=null):"Appointments day is not allowed to be null!";
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:49:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+assert (builder!=null):"Appointments day is not allowed to be null!";
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:49:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+assert (paramType!=null):"Appointments day is not allowed to be null!";
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:49:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
+if(!builder.append("...[").append(paramType.toString()).toString().endsWith("]")){
 builder.append("...[").append(paramType.toString()).append("]");
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V4/2640/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiMigrationManager.java-updateVolumeInfoAfterCommitDeviceMigration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:49:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("...[").append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5764/pattern-ver1-serial/SmartTrader.app.src.main.java.com.loveboyuan.smarttrader.InventoryActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:49:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
-paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+paramType=this;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/3216/pattern-ver1-serial/instagram_integration.app.src.main.java.com.hha.instagram_integration.Photo.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:49:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(paramType==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:49:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+if(registry==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:49:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
+if(paramType==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:49:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
+if(builder==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:49:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+if(((UnionType)paramType)==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:49:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(registry==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:49:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
+if("...["==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:49:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+if(JSTypeNative.VOID_TYPE==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:50:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
+if("]"==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:50:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
+builder.append(" (");
 builder.append("...[").append(paramType.toString()).append("]");
+builder.append(") ");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:50:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
-paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+paramType=paramType;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:50:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
+builder.append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V4/168/pattern-ver1-serial/src.main.java.joshie.harvest.animals.render.RenderHarvestAnimal.java-getEntityTexture.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:50:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(builder==null){
+return ;
+}
+if(paramType==null){
+return ;
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:50:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(paramType==null){
+return ;
+}
+if(builder==null){
+return ;
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2011/V4/5645/pattern-ver1-serial/model.src.main.java.uk.ac.ebi.bioinvindex.utils.datasourceload.DataLocationManager.java-buildLocationFromRawParam.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:50:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
-paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+paramType=null;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:50:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+if(paramType.equals("CALL_RECEIVED_AT")){
+return ;
+}
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+if(paramType.equals("NAME")){
+return ;
+}
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:50:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(builder.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+if(builder.equals("NAME")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:50:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(paramType.equals("CALL_RECEIVED_AT")){
+return ;
+}
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+if(paramType.equals("NAME")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V30/4139/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.IL.ILMadisonCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:50:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+if(paramType.equals("INFO")){
+return ;
+}
+if(paramType.equals("UNIT")){
+return ;
+}
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:50:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+if(builder.equals("INFO")){
+return ;
+}
+if(builder.equals("UNIT")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:50:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+if(paramType.equals("INFO")){
+return ;
+}
+if(paramType.equals("UNIT")){
+return ;
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V25/4313/pattern-ver1-serial/cadpage-parsers.src.main.java.net.anei.cadpage.parsers.VA.VAAlbemarleCountyCParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:50:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
-paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+paramType=registry.getNativeType(JSTypeNative.VOID_TYPE);
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V27/5553/pattern-ver1-serial/src.jas.common.command.CommandCanDespawnHere.java-getTargetEntity.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:50:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+synchronized(this){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:50:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
+if("]"!=null){
 builder.append("...[").append(paramType.toString()).append("]");
+}else {
+builder.append("...[").append(paramType.toString()).append("");
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V38/6520/pattern-ver1-serial/src.main.java.org.metadatacenter.submission.biosample.core.BioSampleValidator.java-generateBioSampleSubmissionXML.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:50:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+builder.append("...[").append(paramType.toString()).append("]");
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:50:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:51:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
-}
 builder.append("...[").append(paramType.toString()).append("]");
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:51:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
-paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
+paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:51:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
-if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+if(paramType.isUnionType()){
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:51:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
+try{
 builder.append("...[").append(paramType.toString()).append("]");
+}finally{
+paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 1, INS : 0, DEL : 8
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:51:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+if(paramType==null){
+return ;
+}else {
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3795/pattern-ver1-serial/opentripplanner-routing.src.main.java.org.opentripplanner.routing.edgetype.PlainStreetEdge.java-calculateSpeed.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:51:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+for(int i=0;i<24;i++){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7063/pattern-ver1-serial/src.application.rmi.Serveur.java-initalisationMain.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:51:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
+for(int i=0;i<24;i++){
 builder.append("...[").append(paramType.toString()).append("]");
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7063/pattern-ver1-serial/src.application.rmi.Serveur.java-initalisationMain.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:51:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
+if(paramType!=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE))){
 builder.append("...[").append(paramType.toString()).append("]");
+}
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/568/pattern-ver1-serial/src.net.skycraftmc.SkyQuest.utilitygui.ObjectiveEditPanel.java-clear.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 3, INS : 0, DEL : 8
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:51:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+long startTime=System.currentTimeMillis();
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:51:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
+long startTime=System.currentTimeMillis();
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
 builder.append("...[").append(paramType.toString()).append("]");
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:51:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 8, INS : 0, DEL : 8
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:51:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
-}
 builder.append("...[").append(paramType.toString()).append("]");
+paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
+}
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1600/pattern-ver1-serial/src.main.java.org.cyberpwn.phantom.clust.ConfigurationHandler.java-fromMysql.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 2, DEL : 16
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:51:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/FunctionType.java[698,706]
------------Candidate---------------
 private void appendVarArgsString(StringBuilder builder,JSType paramType){
 if(paramType.isUnionType()){
+builder.append("...[").append(paramType.toString()).append("]");
+paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 paramType=((UnionType)paramType).getRestrictedUnion(registry.getNativeType(JSTypeNative.VOID_TYPE));
 }
-builder.append("...[").append(paramType.toString()).append("]");
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5607/pattern-ver1-serial/src.main.java.com.jsoft.iot.mqttloadapp.runtime.RunningLoadConfiguration.java-stop.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 2, DEL : 16
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:51:36 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.jstype.PrototypeObjectType.toString:[322]#1.0
Compute Candidate : 2019.09.07 AD at 07:52:19 CDT - 2019.09.07 AD at 07:58:28 CDT , PNumber : 11192, CandNumber : 22 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
-return getReferenceName();
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:58:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
-return getReferenceName();
+return "";
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:58:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
-return getReferenceName();
+return toString();
 }

PATTERN : /home/jiajun/GithubData/2015/V31/7441/pattern-ver1-serial/HelloWorld.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:58:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
-return getReferenceName();
+return this.getReferenceName();
 }

PATTERN : /home/jiajun/GithubData/2015/V26/1924/pattern-ver1-serial/src.main.java.org.spongepowered.api.util.command.ImmutableCommandMapping.java-getCallable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:58:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
-return getReferenceName();
+return this.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:58:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
+this.toString();
 return getReferenceName();
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:58:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
-return getReferenceName();
+return getReferenceName().trim();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:58:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
-return getReferenceName();
+return new String(getReferenceName());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:58:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
-return getReferenceName();
+return (String)getReferenceName();
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:58:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
-return getReferenceName();
+return getReferenceName().toLowerCase();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:58:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
-return getReferenceName();
+return (String)(getReferenceName());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:59:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
+int a=0;
 return getReferenceName();
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:59:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
+String OUTSTRING="";
 return getReferenceName();
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:59:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
-return getReferenceName();
+return "FolderPersister for '"+this;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/1833/pattern-ver1-serial/src.main.de.dal33t.powerfolder.disk.Folder.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:59:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
+int a=1;
 return getReferenceName();
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:59:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
+boolean b=true;
 return getReferenceName();
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:59:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public String toString(){
-return getReferenceName();
+return getReferenceName()+".*";
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6165/pattern-ver1-serial/src.main.java.com.oneandone.network.snmpman.configuration.type.WildcardOID.java-toString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:59:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
-return getReferenceName();
+return getReferenceName().replaceAll("\r","");
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:59:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
-return getReferenceName();
+return String.format("%s",getReferenceName());
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:59:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
-return getReferenceName();
+return getReferenceName()==null?"":getReferenceName();
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:59:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
-return getReferenceName();
+return getReferenceName()!=null?getReferenceName():new String();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:59:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java[320,323]
------------Candidate---------------
 @Override public String toString(){
-return getReferenceName();
+return getReferenceName()==null?new String():getReferenceName();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 07:59:36 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.jstype.ObjectType.getParameterType:[97]#1.0
Compute Candidate : 2019.09.07 AD at 08:00:28 CDT - 2019.09.07 AD at 08:03:12 CDT , PNumber : 11286, CandNumber : 6 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/ObjectType.java[92,98]
------------Candidate---------------
 public JSType getParameterType(){
-return null;
+return this;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4081/pattern-ver1-serial/src.com.bthorson.torule.screens.MessageScreen.java-respondToMouseClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 08:03:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/ObjectType.java[92,98]
------------Candidate---------------
 public JSType getParameterType(){
+this.getParameterType();
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 08:03:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/ObjectType.java[92,98]
------------Candidate---------------
 public JSType getParameterType(){
+int a=0;
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 08:03:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/ObjectType.java[92,98]
------------Candidate---------------
 public JSType getParameterType(){
+String OUTSTRING="";
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 08:03:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/ObjectType.java[92,98]
------------Candidate---------------
 public JSType getParameterType(){
+int a=1;
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 08:03:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/jstype/ObjectType.java[92,98]
------------Candidate---------------
 public JSType getParameterType(){
+boolean b=true;
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 08:03:29 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.propToString:[177, 197, 222, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 213, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 236, 240]#1.0
Compute Candidate : 2019.09.07 AD at 08:04:16 CDT - 2019.09.07 AD at 09:05:57 CDT , PNumber : 11186, CandNumber : 136 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
-return null;
+return new String();
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5649/pattern-ver1-serial/src.todolist.logic.FunctionChecker.java-deleteChecker.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:06:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return null;
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:06:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return null;
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return null;
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:06:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return null;
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:06:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return null;
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:06:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
-return "label_id_prop";
+return null;
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:06:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return null;
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:06:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return null;
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:06:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
-return "continue";
+return null;
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:06:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
-return "enum";
+return null;
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:06:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:06:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:06:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return "";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:06:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return "";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:06:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return "";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:06:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
-return "label_id_prop";
+return "";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:06:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return "";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:06:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return "";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:06:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
-return "continue";
+return "";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:07:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
-return "enum";
+return "";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:07:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
-return null;
+return "";
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/5469/pattern-ver1-serial/OnlineBookStoreServer.src.Server.Routines.java-getMYSQLPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:07:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
+case 401 :
+
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1693/pattern-ver1-serial/src.main.java.uk.ac.ic.wlgitbridge.snapshot.getdoc.GetDocResult.java-fromJSON.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:07:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return propToString(0);
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:07:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return propToString(0);
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:07:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return propToString(0);
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:07:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return propToString(0);
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:07:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return propToString(0);
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:07:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
-return "label_id_prop";
+return propToString(0);
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:07:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return propToString(0);
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:07:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return propToString(0);
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:07:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
-return "continue";
+return propToString(0);
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:07:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
-return "enum";
+return propToString(0);
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V40/1788/pattern-ver1-serial/src.org.expression.parser.ExpressionParser.java-expr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:07:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
+propType++;
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:07:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename".trim();
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:07:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic".trim();
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:07:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return "local_block".trim();
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:07:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return "object_ids_prop".trim();
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:07:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return "target".trim();
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return "catch_scope_prop".trim();
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return "break".trim();
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
-return "continue";
+return "continue".trim();
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
-return "label_id_prop";
+return "label_id_prop".trim();
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
-return "enum";
+return "enum".trim();
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return new String("sourcename");
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return new String("synthetic");
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return new String("local_block");
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return new String("object_ids_prop");
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return new String("catch_scope_prop");
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return new String("target");
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return new String("break");
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
-return "label_id_prop";
+return new String("label_id_prop");
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
-return "continue";
+return new String("continue");
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
-return "enum";
+return new String("enum");
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
+propType--;
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename".toLowerCase();
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic".toLowerCase();
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return "local_block".toLowerCase();
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return "object_ids_prop".toLowerCase();
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:08:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return "catch_scope_prop".toLowerCase();
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:09:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return "target".toLowerCase();
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:09:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
-return "label_id_prop";
+return "label_id_prop".toLowerCase();
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:09:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return "break".toLowerCase();
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:09:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
-return "continue";
+return "continue".toLowerCase();
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:09:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
-return "enum";
+return "enum".toLowerCase();
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:09:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return (String)("sourcename");
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:09:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return (String)("synthetic");
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:09:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return (String)("local_block");
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:09:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return (String)("object_ids_prop");
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:09:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return (String)("catch_scope_prop");
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:09:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
-return "label_id_prop";
+return (String)("label_id_prop");
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:09:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return (String)("target");
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:09:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return (String)("break");
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:09:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
-return "continue";
+return (String)("continue");
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:09:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
-return "enum";
+return (String)("enum");
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:09:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
-private static final String propToString(int propType){
-switch (propType){
+private static final String propToString(int stepNumber){
+switch (stepNumber){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/6757/pattern-ver1-serial/app.src.main.java.verticalstepperform.ernestoyaquello.com.verticalstepperform.NewAlarmFormActivity.java-createStepContentView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:09:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
+int a=0;
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:09:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
+String OUTSTRING="";
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:09:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
+int a=1;
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:09:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
+boolean b=true;
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:10:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
+}
+if("&null".equals(propType)){
+return null;
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:10:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
+if(propType<0){
+return null;
+}
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:10:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename".replaceAll("\r","");
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:10:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic".replaceAll("\r","");
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:10:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return "local_block".replaceAll("\r","");
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:10:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return "object_ids_prop".replaceAll("\r","");
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:10:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return "target".replaceAll("\r","");
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:10:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return "catch_scope_prop".replaceAll("\r","");
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:10:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return "break".replaceAll("\r","");
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:10:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
-return "continue";
+return "continue".replaceAll("\r","");
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:10:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
-return "label_id_prop";
+return "label_id_prop".replaceAll("\r","");
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:10:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
-return "enum";
+return "enum".replaceAll("\r","");
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:10:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return String.format("%s","sourcename");
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:10:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return String.format("%s","synthetic");
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:10:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return String.format("%s","local_block");
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:10:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return String.format("%s","object_ids_prop");
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:10:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return String.format("%s","catch_scope_prop");
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:10:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return String.format("%s","target");
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:10:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return String.format("%s","break");
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:11:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
-return "label_id_prop";
+return String.format("%s","label_id_prop");
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:11:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
-return "continue";
+return String.format("%s","continue");
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:11:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
-return "enum";
+return String.format("%s","enum");
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:11:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
+}
+if((Thread.currentThread().interrupted())){
+return null;
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:11:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename"==null?"":"sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:11:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic"==null?"":"synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:11:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return "local_block"==null?"":"local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:11:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return "object_ids_prop"==null?"":"object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:11:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return "target"==null?"":"target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:11:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return "catch_scope_prop"==null?"":"catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:11:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return "break"==null?"":"break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:11:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
-return "continue";
+return "continue"==null?"":"continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:11:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
-return "label_id_prop";
+return "label_id_prop"==null?"":"label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:11:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
-return "enum";
+return "enum"==null?"":"enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:11:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename"!=null?"sourcename":new String();
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:11:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic"!=null?"synthetic":new String();
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:11:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return "local_block"!=null?"local_block":new String();
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:11:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return "object_ids_prop"!=null?"object_ids_prop":new String();
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:11:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return "target"!=null?"target":new String();
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:12:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return "catch_scope_prop"!=null?"catch_scope_prop":new String();
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:12:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return "break"!=null?"break":new String();
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:12:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
-return "continue";
+return "continue"!=null?"continue":new String();
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:12:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
-return "label_id_prop";
+return "label_id_prop"!=null?"label_id_prop":new String();
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:12:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
-return "enum";
+return "enum"!=null?"enum":new String();
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:12:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
-return "sourcename";
+return "sourcename"==null?new String():"sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:12:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
-return "synthetic";
+return "synthetic"==null?new String():"synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:12:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
-return "local_block";
+return "local_block"==null?new String():"local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:12:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
-return "object_ids_prop";
+return "object_ids_prop"==null?new String():"object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:12:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
-return "target";
+return "target"==null?new String():"target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:12:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
-return "break";
+return "break"==null?new String():"break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:12:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
-return "catch_scope_prop";
+return "catch_scope_prop"==null?new String():"catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:12:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
-return "continue";
+return "continue"==null?new String():"continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:12:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
-return "enum";
+return "enum"==null?new String():"enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:12:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
-return "label_id_prop";
+return "label_id_prop"==null?new String():"label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:12:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
+assert (propType>=0):"Receive a negative tratment";
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:12:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private static final String propToString(int propType){
+assert (propType!=0):"Receive a size tratment";
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:12:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[176,241]
------------Candidate---------------
 private static final String propToString(int propType){
+if(propType>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 switch (propType){
 case LOCAL_BLOCK_PROP :
 
 return "local_block";
 case OBJECT_IDS_PROP :
 
 return "object_ids_prop";
 case CATCH_SCOPE_PROP :
 
 return "catch_scope_prop";
 case LABEL_ID_PROP :
 
 return "label_id_prop";
 case TARGET_PROP :
 
 return "target";
 case BREAK_PROP :
 
 return "break";
 case CONTINUE_PROP :
 
 return "continue";
 case ENUM_PROP :
 
 return "enum";
 case FUNCTION_PROP :
 
 return "function";
 case TEMP_PROP :
 
 return "temp";
 case LOCAL_PROP :
 
 return "local";
 case CODEOFFSET_PROP :
 
 return "codeoffset";
 case FIXUPS_PROP :
 
 return "fixups";
 case VARS_PROP :
 
 return "vars";
 case USES_PROP :
 
 return "uses";
 case REGEXP_PROP :
 
 return "regexp";
 case CASES_PROP :
 
 return "cases";
 case DEFAULT_PROP :
 
 return "default";
 case CASEARRAY_PROP :
 
 return "casearray";
 case SOURCENAME_PROP :
 
 return "sourcename";
 case TYPE_PROP :
 
 return "type";
 case SPECIAL_PROP_PROP :
 
 return "special_prop";
 case LABEL_PROP :
 
 return "label";
 case FINALLY_PROP :
 
 return "finally";
 case LOCALCOUNT_PROP :
 
 return "localcount";
 case TARGETBLOCK_PROP :
 
 return "targetblock";
 case VARIABLE_PROP :
 
 return "variable";
 case LASTUSE_PROP :
 
 return "lastuse";
 case ISNUMBER_PROP :
 
 return "isnumber";
 case DIRECTCALL_PROP :
 
 return "directcall";
 case SPECIALCALL_PROP :
 
 return "specialcall";
 case DEBUGSOURCE_PROP :
 
 return "debugsource";
 case JSDOC_INFO_PROP :
 
 return "jsdoc_info";
 case SKIP_INDEXES_PROP :
 
 return "skip_indexes";
 case INCRDECR_PROP :
 
 return "incrdecr";
 case MEMBER_TYPE_PROP :
 
 return "member_type";
 case NAME_PROP :
 
 return "name";
 case PARENTHESIZED_PROP :
 
 return "parenthesized";
 case QUOTED_PROP :
 
 return "quoted";
 case SYNTHETIC_BLOCK_PROP :
 
 return "synthetic";
 case SOURCEFILE_PROP :
 
 return "sourcefile";
 case EMPTY_BLOCK :
 
 return "empty_block";
 case ORIGINALNAME_PROP :
 
 return "originalname";
 case NO_SIDE_EFFECTS_CALL :
 
 return "no_side_effects_call";
 case IS_CONSTANT_NAME :
 
 return "is_constant_name";
 case IS_OPTIONAL_PARAM :
 
 return "is_optional_param";
 case IS_VAR_ARGS_PARAM :
 
 return "is_var_args_param";
 case IS_NAMESPACE :
 
 return "is_namespace";
 case IS_DISPATCHER :
 
 return "is_dispatcher";
 case DIRECTIVES :
 
 return "directives";
 case DIRECT_EVAL :
 
 return "direct_eval";
 default :
 
 Kit.codeBug();
 }
 return null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:13:00 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.getSortedPropTypes:[803, 804, 805, 808, 809, 810, 811, 814, 815]#1.0
Compute Candidate : 2019.09.07 AD at 09:13:47 CDT - 2019.09.07 AD at 09:31:20 CDT , PNumber : 11393, CandNumber : 203 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+continue;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:31:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+continue;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:31:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
-int count=0;
+ int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:31:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
-int[] keys=new int[count];
+ int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:31:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x==null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:31:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x==null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:31:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+keys[count]=1;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:31:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+return null;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:31:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+return null;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:31:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
-return keys;
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:31:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+x=x.next;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2554/pattern-ver1-serial/src.GreenTeaScript.java-CommentToken.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:31:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.Collection;
+
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,myUid;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:31:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.Collection;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,myUid;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:32:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,DEFAULT_TIMEOUT2;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:32:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,DEFAULT_TIMEOUT2;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:32:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+keys[count]=0;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:32:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,MAX_SERVICE_NODES;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:32:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,MAX_SERVICE_NODES;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:32:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,MAX_ZK_WAIT_RETRY_TIMES;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:32:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,MAX_ZK_WAIT_RETRY_TIMES;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:32:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+break;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:32:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+break;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:32:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
-count++;
+count--;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:32:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x!=null;x=x){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:34:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x!=null;x=x){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:34:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+keys[1]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:34:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
-int count=0;
+Integer count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:34:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,localLevel;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:34:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,localLevel;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:34:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+keys[count]=count;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/3010/pattern-ver1-serial/rakam-spi.src.main.java.com.facebook.presto.sql.RakamSqlFormatter.java-Formatter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:34:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+keys[count]=2;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:34:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x!=null;x=x.next,new ArrayList<KeyBinding>()){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:34:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x!=null;x=x.next,new ArrayList<KeyBinding>()){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
-int[] keys=new int[count];
+int[] keys=new int[(count)];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x!=null;x=null){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x!=null;x=null){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
-count--;
+count++;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/12/pattern-ver1-serial/src.main.java.com.quadcoder.coinpet.page.signup.SignupFormFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
-Arrays.sort(keys);
+Arrays.toString(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/7441/pattern-ver1-serial/HelloWorld.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,_afterComposeMethodCache;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,_afterComposeMethodCache;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
-Arrays.sort(keys);
+Arrays.stream(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/1949/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.webapp.QueryExecutorServlet.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
+count--;
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.List;
+
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,mActions;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.List;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,mActions;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+Arrays.sort(keys);
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3884/pattern-ver1-serial/TcpChat.src.client.gui.ClientGuiThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,mRelationId;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,mRelationId;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+keys[count]=10;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/386/pattern-ver1-serial/GlassApp.HackathonPerseusGlass.src.com.github.barcodeeye.scan.ResultsActivity.java-onDetected.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
-return keys;
+return this.getSortedPropTypes();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+keys[count]=-1;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
-int count=0;
+ int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
-int[] keys=new int[count];
+ int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+this.getSortedPropTypes();
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+this.getSortedPropTypes();
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
+this.getSortedPropTypes();
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:35:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+count++;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:36:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+count++;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:36:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
-return keys;
+return keys.clone();
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4683/pattern-ver1-serial/backend.src.main.java.com.benine.backend.camera.ipcameracontrol.IPCamera.java-getPresets.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:36:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+count--;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:36:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+synchronized(this){
 keys[count]=x.type;
+}
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/3450/pattern-ver1-serial/hbase-server.src.main.java.org.apache.hadoop.hbase.security.visibility.VisibilityController.java-postOpen.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:36:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
+synchronized(this){
 Arrays.sort(keys);
+}
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:36:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+synchronized(this){
 count++;
+}
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:36:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+synchronized(this){
 count--;
+}
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:36:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,continentName,countryCode;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:36:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,continentName,countryCode;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:36:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
-return keys;
+return (int[])(keys);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:36:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+return null;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+return null;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:36:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+while(true){
+
+}
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:38:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+while(true){
+
+}
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:40:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,userEmail;x!=null;x=x.next,x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:40:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,userEmail;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x!=null;x=x.next,x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:40:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x!=null;x=x.next,x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead,userEmail;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:40:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+break;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+break;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:40:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x!=null;x=x.next,Charset.forName("UTF-8")){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:40:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;x!=null;x=x.next,Charset.forName("UTF-8")){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:40:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
+if(keys!=null){
 Arrays.sort(keys);
+}
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:40:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
+next=this;
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4878/pattern-ver1-serial/app.src.main.java.com.trukr.shipper.activity.Notification.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:41:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+if(x.type!=0){
 keys[count]=x.type;
+}
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+x.type=count;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:41:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+type=count;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:41:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+count=count;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:41:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+keys[count]=count;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:41:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+count=count;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:41:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+count=count;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:41:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+count--;
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/1950/pattern-ver1-serial/Node.java-eventDelete.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:41:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+if(count==4){
+continue;
+}
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:41:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+count--;
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:41:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+count++;
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:41:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+count=1000;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:41:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+Arrays.sort(keys);
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:41:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+Arrays.sort(keys);
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import javax.annotation.Nonnull;
+
+import javax.annotation.Nullable;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
-return keys;
+return (int[])keys.clone();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/4389/pattern-ver1-serial/src.main.java.net.steveperkins.fitnessjiffy.etl.model.Food.java-getLastUpdatedTime.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:42:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+for(PropListItem x=propListHead;x!=null;x=x.next){
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:42:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+count--;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
-count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:42:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+int a=0;
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:42:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+int a=0;
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:42:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
+int a=0;
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:42:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+String OUTSTRING="";
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:42:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+String OUTSTRING="";
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:42:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
+String OUTSTRING="";
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:42:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
+try{
 Arrays.sort(keys);
+}finally{
+count++;
+}
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 1, INS : 0, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:42:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
+try{
 Arrays.sort(keys);
+}finally{
+count--;
+}
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 1, INS : 0, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:42:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
+int x=5;
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:42:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
+int propListHead=5;
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:42:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
+int next=5;
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:42:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:42:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:42:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:42:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+x.type=count;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/697/pattern-ver1-serial/umldiag.java-setLineArrow.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:43:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(equals(count)){
+return null;
+}
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:43:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(equals(count)){
+return null;
+}
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:43:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+if(equals(count)){
+return null;
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:43:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+}
+if(equals(count)){
+return null;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:43:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+int indexSelection=0;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:43:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+int indexSelection=0;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:43:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+int indexSelection=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:43:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.Arrays;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+keys[count-1]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:43:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+int a=1;
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:43:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+int a=1;
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:43:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
+int a=1;
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:43:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
+String next="%#.&f";
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:43:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+boolean b=true;
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:43:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+boolean b=true;
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:43:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
+boolean b=true;
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:43:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(keys==null){
+continue;
+}
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:43:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+if(keys==null){
+return null;
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:43:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(keys==null){
+return null;
+}
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:43:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+if(count==0){
+return keys;
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:44:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+}
+if(keys==null){
+return null;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:44:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+if("&null".equals(count)){
+return null;
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:44:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+if("&null".equals(count)){
+return null;
+}
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:44:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+if("&null".equals(count)){
+return null;
+}
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:44:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+if("&null".equals(keys)){
+return null;
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:44:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+if("&null".equals(keys)){
+return null;
+}
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:44:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+Arrays.sort(keys);
 count--;
 keys[count]=x.type;
 }
-Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:44:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+Arrays.sort(keys);
 keys[count]=x.type;
 }
-Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:44:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
-}
 Arrays.sort(keys);
+}
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:44:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
+if(!keys.equals("")){
 Arrays.sort(keys);
+}
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:44:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(count<0){
+return null;
+}
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:44:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(count<0){
+return null;
+}
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:44:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+if(count<0){
+return null;
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:44:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+}
+if(count<0){
+return null;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:44:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+if(keys.equals("-1")){
+return null;
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:44:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+assert (keys!=null);
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:44:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+assert (keys!=null);
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:44:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+if(keys[count]==0){
+return null;
+}
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:44:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+}
+if(keys[count]==0){
+return null;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:45:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+assert (count!=0);
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:45:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+assert (keys!=new int[count]);
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:45:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+assert (x!=null);
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:45:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+count++;
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+count++;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 2, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:45:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+count++;
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+count++;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 2, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:45:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+count--;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+count--;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 2, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:45:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+count--;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+count--;
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 2, DEL : 2
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:45:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+keys[count]=-1;
+keys[count]++;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:45:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
-keys[count]=x.type;
+keys[count]=-1;
 }
+keys[count]++;
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:45:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+assert (keys!=null);
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:45:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+if((Thread.currentThread().interrupted())){
+return null;
+}
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:45:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
+if((Thread.currentThread().interrupted())){
+return null;
+}
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:45:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+if((Thread.currentThread().interrupted())){
+return null;
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:45:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+keys[count]=x.type;
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:45:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:45:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:45:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:45:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;null!=x&&x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1691/pattern-ver1-serial/src.main.java.net.imadz.lifecycle.meta.builder.impl.helpers.CallbackMethodConfigureScanner.java-evaluateObserverMethod.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:46:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
-for(PropListItem x=propListHead;x!=null;x=x.next){
+for(PropListItem x=propListHead;null!=x&&x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1691/pattern-ver1-serial/src.main.java.net.imadz.lifecycle.meta.builder.impl.helpers.CallbackMethodConfigureScanner.java-evaluateObserverMethod.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:46:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+assert (count>=0):"Receive a negative tratment";
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:46:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+assert (count>=0):"Receive a negative tratment";
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:46:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+assert (count>=0):"Receive a negative tratment";
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Book.java-setChapters.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:46:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:46:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:46:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:46:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+assert (keys!=null):"Appointments day is not allowed to be null!";
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:46:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+assert (keys!=null):"Appointments day is not allowed to be null!";
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:46:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+assert (count!=0):"Receive a size tratment";
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:46:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+assert (count!=0):"Receive a size tratment";
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:46:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
+import java.util.Calendar;
+
+import java.util.Date;
+
 private int[] getSortedPropTypes(){
 int count=0;
+assert (count!=0):"Receive a size tratment";
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6481/pattern-ver1-serial/QualCurso.app.src.main.java.models.Course.java-newArray.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:46:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+if(count>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:46:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+}
+if(count>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:46:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(count>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:46:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(count>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:46:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+}
+if(keys==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:46:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+if(count<=0){
+count=1;
+}
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/2376/pattern-ver1-serial/src.br.com.siva.pinkmusic.list.RadioStationList.java-cancel.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+}
+if(count<=0){
+count=1;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/2376/pattern-ver1-serial/src.br.com.siva.pinkmusic.list.RadioStationList.java-cancel.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+if(keys[count]<0){
+keys[count]=0;
+}
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+}
+if(keys[count]<0){
+keys[count]=0;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+if(count<=0){
+count=1;
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+if(count<=0){
+count=1;
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+if(count==100){
+count=0;
+}
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/7421/pattern-ver1-serial/MyDate.java-increment.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
+}
+if(count==100){
+count=0;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/7421/pattern-ver1-serial/MyDate.java-increment.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(keys[count]!=x.type){
 count--;
-keys[count]=x.type;
+}
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/529/pattern-ver1-serial/src.com.crankcode.threads.MediaThread.java-end.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+int[] t=keys;
+keys=null;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
-return keys;
+return t;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5100/pattern-ver1-serial/CityGenJava.src.gameObjects.player.Player.java-drop.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+if(keys==null){
+throw new IllegalStateException("User isn't registered! "+count);
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
+boolean succeeded=false;
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+succeeded=true;
+}
+if(!succeeded){
+return null;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(count==3){
+System.out.println("debug");
+}
 count--;
 keys[count]=x.type;
+if(count==3){
+System.out.println("debug");
+}
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
+if(count==3){
+System.out.println("debug");
+}
+if(count==3){
+System.out.println("debug");
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+if(count==3){
+System.out.println("debug");
+}
 count++;
+if(count==3){
+System.out.println("debug");
+}
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
-Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
+long startTime=System.currentTimeMillis();
 count++;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
+long startTime=System.currentTimeMillis();
 count--;
 keys[count]=x.type;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
+long startTime=System.currentTimeMillis();
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+keys[28]=(byte)0x88;
+keys[29]=0x58;
+keys[30]=0x01;
+keys[31]=0x00;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
+keys[28]=(byte)0x88;
+keys[29]=0x58;
+keys[30]=0x01;
+keys[31]=0x00;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:47:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[802,816]
------------Candidate---------------
 private int[] getSortedPropTypes(){
 int count=0;
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count++;
 }
 int[] keys=new int[count];
+for(int i=0;i<4;i++){
+keys[i]=Math.min(1,Math.max(0,keys[i]));
+}
 for(PropListItem x=propListHead;x!=null;x=x.next){
 count--;
 keys[count]=x.type;
 }
 Arrays.sort(keys);
 return keys;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/2980/pattern-ver1-serial/megamek.src.megamek.client.ui.swing.MiniMap.java-paintBVSection.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 20, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:48:00 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.toString:[872]#1.0
Compute Candidate : 2019.09.07 AD at 09:48:48 CDT - 2019.09.07 AD at 09:51:57 CDT , PNumber : 11327, CandNumber : 26 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(false,true,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V13/6998/pattern-ver1-serial/api.src.main.java.org.ednovo.gooru.domain.service.ScollectionServiceImpl.java-createCollectionItem.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:52:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(true,false,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V13/6998/pattern-ver1-serial/api.src.main.java.org.ednovo.gooru.domain.service.ScollectionServiceImpl.java-createCollectionItem.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:52:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(true,true,false);
 }

PATTERN : /home/jiajun/GithubData/2015/V13/6998/pattern-ver1-serial/api.src.main.java.org.ednovo.gooru.domain.service.ScollectionServiceImpl.java-createCollectionItem.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:52:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
+this.toString();
 return toString(true,true,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:52:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(false,false,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/505/pattern-ver1-serial/app.src.main.java.com.door43.translationstudio.core.ExportUsfm.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:52:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(false,true,false);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/505/pattern-ver1-serial/app.src.main.java.com.door43.translationstudio.core.ExportUsfm.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:52:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(true,false,false);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/505/pattern-ver1-serial/app.src.main.java.com.door43.translationstudio.core.ExportUsfm.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:52:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
+int a=0;
 return toString(true,true,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:52:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
+String OUTSTRING="";
 return toString(true,true,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:52:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
+int a=1;
 return toString(true,true,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:52:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
+boolean b=true;
 return toString(true,true,true);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:52:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return this.toString();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:52:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:52:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return "";
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2133/pattern-ver1-serial/modules.cpr.src.main.java.org.atmosphere.cpr.AtmosphereRequestImpl.java-getServletPath.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:52:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(true,true,true).trim();
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/1192/pattern-ver1-serial/NewsReader.src.com.example.net_ex04.SinaNewsParser.java-getTitle.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:52:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return new String(toString(true,true,true));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:52:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return (String)toString(true,true,true);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:52:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(true,true,true).toLowerCase();
 }

PATTERN : /home/jiajun/GithubData/2016/V31/301/pattern-ver1-serial/DODO.src.Parser.Parser.java-getUserCommand.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:52:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(true,true,true).replaceAll("\r","");
 }

PATTERN : /home/jiajun/GithubData/2016/V17/6011/pattern-ver1-serial/NonHTTPProxy.src.josh.nonHttp.PythonMangler.java-getPyCode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:52:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return (String)(toString(true,true,true));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:53:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return String.format("%s",toString(true,true,true));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4308/pattern-ver1-serial/src.com.github.danfickle.cpptojavasourceconverter.ExpressionModels.java-toStringRhOnly.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:53:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return "FolderPersister for '"+this;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/1833/pattern-ver1-serial/src.main.de.dal33t.powerfolder.disk.Folder.java-toString.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:53:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 @Override public String toString(){
-return toString(true,true,true);
+return toString(true,true,true)+".*";
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6165/pattern-ver1-serial/src.main.java.com.oneandone.network.snmpman.configuration.type.WildcardOID.java-toString.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:53:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(true,true,true)==null?"":toString(true,true,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/319/pattern-ver1-serial/Flattitude.app.src.main.java.com.aseupc.flattitude.Models.IDs.java-getUserToken.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:53:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(true,true,true)!=null?toString(true,true,true):new String();
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4736/pattern-ver1-serial/server.src.main.java.com.paypal.selion.grid.SeLionStandaloneConfiguration.java-getStandaloneConfiguration.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:53:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[870,873]
------------Candidate---------------
 @Override public String toString(){
-return toString(true,true,true);
+return toString(true,true,true)==null?new String():toString(true,true,true);
 }

PATTERN : /home/jiajun/GithubData/2016/V2/5999/pattern-ver1-serial/persistence.src.main.java.com.softserve.osbb.model.Bill.java-getApartment.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 09:53:22 CDT
--------------- END -----------------
Location : com.google.javascript.rhino.Node.toString:[900, 901, 910, 911, 912, 913, 915, 916, 917, 918, 919, 922, 923, 926, 927, 928, 929, 934, 935, 936, 937, 938, 939, 940, 942, 978, 979, 980, 982, 986, 987, 992, 993, 994, 995, 996, 897, 898, 903, 904, 909, 921, 895, 896, 899, 902, 925, 933, 991, 1001, 905, 906, 907, 944, 945, 947, 948, 950, 952, 953, 955, 956, 958, 959, 961, 965, 967, 968, 970, 971, 974]#1.0
Compute Candidate : 2019.09.07 AD at 09:54:12 CDT - 2019.09.07 AD at 10:42:03 CDT , PNumber : 4274, CandNumber : 520 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+return ;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+return ;
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
+return ;
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+return ;
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+return ;
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
+return ;
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
+return ;
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+return ;
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+return ;
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4522/pattern-ver1-serial/core.src.main.java.io.undertow.server.protocol.framed.AbstractFramedChannel.java-receive.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/4522/pattern-ver1-serial/core.src.main.java.io.undertow.server.protocol.framed.AbstractFramedChannel.java-receive.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+return ;
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/1695/pattern-ver1-serial/src.fr.project.bluechat.layout.activity.MainActivity.java-newName.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+return ;
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/1695/pattern-ver1-serial/src.fr.project.bluechat.layout.activity.MainActivity.java-newName.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
+return ;
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+return ;
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
+return ;
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
+return ;
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
+return ;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
-Object obj=x.objectValue;
+ Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type==0){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==0){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
+if(obj==null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString==null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/1240/pattern-ver1-serial/flexo-foundation.src.main.java.org.openflexo.foundation.viewpoint.FlexoConceptInstanceRole.java-applyValidation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+long lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<=keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i>keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno==-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type<=Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type<=Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+float lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+break;
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2900/pattern-ver1-serial/BlueMesh.src.blue.mesh.ServerThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+break;
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/2900/pattern-ver1-serial/BlueMesh.src.blue.mesh.ServerThread.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
-for(int i=0;i<keys.length;i++){
+for(int i=0;i<keys.length;i--){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
+if(obj!=""){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/276/pattern-ver1-serial/src.edu.cpp.cs.cs141.final_project.User_Interface.TextUI.TextUserInterface.java-drawAlertText.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=""){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/276/pattern-ver1-serial/src.edu.cpp.cs.cs141.final_project.User_Interface.TextUI.TextUserInterface.java-drawAlertText.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type>=Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type>=Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+int type=keys[1];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type!=Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type!=Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+Integer type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+Integer lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
-if(printSource){
+if(true){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
-if(printAnnotations){
+if(true){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
-if(printType){
+if(true){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
-if(printSource){
+if(true){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
+}
 }
 }
+if(printSource){
+int lineno=getLineno();
+if(lineno!=-1){
+sb.append(' ');
+sb.append(lineno);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
+}
+}
 }
+if(printType){
+if(jsType!=null){
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
+case 203 :
+
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4533/pattern-ver1-serial/src.com.orange.network.game.protocol.constants.GameConstantsProtos.java-valueOf.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+int type=keys[0];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5785/pattern-ver1-serial/src.Seminars.first.collections.ArrayPriorityQueue.java-extractMin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno<-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
-Object obj=x.objectValue;
+ final Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final int type=keys[i];
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ final FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4668/pattern-ver1-serial/src.main.java.accountService.AccountServiceImpl.java-updateUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4668/pattern-ver1-serial/src.main.java.accountService.AccountServiceImpl.java-updateUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ final FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ final FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-sb.append(first.getString());
+sb.append(this.first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/4298/pattern-ver1-serial/src.main.java.org.spongepowered.api.service.command.SimpleCommandService.java-getHelp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+this.toString();
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+this.toString();
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
+this.toString();
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+this.toString();
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+this.toString();
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+this.toString();
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+this.toString();
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+this.toString();
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+this.toString();
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+this.toString();
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-sb.append(first.getString());
+sb.append(first.getString().trim());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
-sb.append(" [source name: ");
+sb.append(" [source name: ".trim());
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
+sb.append("] [encoded source length: ".trim());
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
+sb.append("] [base line: ".trim());
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
+sb.append("] [end line: ".trim());
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
-sb.append(" [");
+sb.append(" [".trim());
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append(propToString(type).trim());
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
-sb.append(": ");
+sb.append(": ".trim());
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
-sb.append(value);
+sb.append(value.trim());
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
-sb.append(" : ");
+sb.append(" : ".trim());
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.Iterator;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type==-1){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.Iterator;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==-1){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.isEmpty()){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2729/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.DiskLruImageCache.java-getBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+lineno++;
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+lineno++;
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+type++;
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
+type++;
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
+type++;
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
-if(printSource){
+if(!printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
-if(printType){
+if(!printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
-if(printSource){
+if(!printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5542/pattern-ver1-serial/RedZone.redzone.blocks.Pipe.java-onBlockPlaced.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+lineno++;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+i++;
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+i++;
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
-if(this instanceof ScriptOrFnNode){
+if(true){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
+if(true){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
-if(this instanceof StringNode){
+if(true){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+lineno--;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+lineno--;
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append(sof.getEncodedSourceEnd()-2);
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+i--;
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+i--;
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
-value=obj.toString();
+if(first!=null){
+value=first.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/2709/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.expressions.Point2DExpression.java-getTablesInvolved.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
+if(first!=null){
+String jsTypeString=first.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/2709/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.expressions.Point2DExpression.java-getTablesInvolved.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+if(sb==null){
+return ;
+}
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+if(sb==null){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(sb==null){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(sb==null){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+if(sb==null){
+return ;
+}
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+if(keys==null){
+return ;
+}
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb==null){
+return ;
+}
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(sb==null){
+return ;
+}
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if(sb==null){
+return ;
+}
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb==null){
+return ;
+}
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+if(sb==null){
+return ;
+}
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+if(sb==null){
+return ;
+}
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+if(sb==null){
+return ;
+}
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if(sb==null){
+return ;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+if(sb==null){
+return ;
+}
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/5349/pattern-ver1-serial/drools-wb-screens.drools-wb-guided-dtable-editor.drools-wb-guided-dtable-editor-client.src.main.java.org.drools.workbench.screens.guided.dtable.client.widget.table2.columns.dom.textbox.TextBoxLongSingletonDOMElementFactory.java-convert.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+if(sb==null){
+return ;
+}
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+if(sb==null){
+return ;
+}
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(x==null){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+if(keys==null){
+return ;
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString==null){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+if(fn==null){
+return ;
+}
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3545/pattern-ver1-serial/server.src.main.java.nl.inl.blacklab.server.requesthandlers.SearchParameters.java-docSortSettings.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(sof==null){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/3545/pattern-ver1-serial/server.src.main.java.nl.inl.blacklab.server.requesthandlers.SearchParameters.java-docSortSettings.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
+if(sb!=null){
 sb.append(" [source name: ");
+}
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+if(sb!=null){
 sb.append(sof.getSourceName());
+}
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
+if(sb!=null){
 sb.append("] [encoded source length: ");
+}
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+if(sb!=null){
 sb.append("] [base line: ");
+}
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
+if(sb!=null){
 sb.append("] [end line: ");
+}
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6555/pattern-ver1-serial/app.src.main.java.com.example.uaharoni.tourdeplace.view.MapFragment.java-addPlaceMarker.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(first.getString()!=null){
 sb.append(first.getString());
+}
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
+if(fn.getFunctionName()!=null){
 sb.append(fn.getFunctionName());
+}
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(getString()!=null){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
+if(sb!=null){
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+}
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/3708/pattern-ver1-serial/mifosng-android.src.main.java.com.mifos.mifosxdroid.online.ClientListFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
+if(sb!=null){
 sb.append(sof.getBaseLineno());
+}
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/3708/pattern-ver1-serial/mifosng-android.src.main.java.com.mifos.mifosxdroid.online.ClientListFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(sb!=null){
 sb.append(first.getString());
+}
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb!=null){
 sb.append(' ');
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+if(sb!=null){
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+if(sb!=null){
 sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/6565/pattern-ver1-serial/MarioAI.src.ch.idsia.agents.controllers.AdvancedMarioAIAgent.java-getAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(sb==null){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+if(sb==null){
+return ;
+}
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(sb==null){
+return ;
+}
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(first==null){
+return ;
+}
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(sb==null){
+return ;
+}
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(first==null){
+return ;
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+if(first==null){
+return ;
+}
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(first==null){
+return ;
+}
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(type==keys[i]){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
+if(type==keys[i]){
+return ;
+}
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
+if(x==lookupProperty(type)){
+return ;
+}
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5920/pattern-ver1-serial/FileReaders.gff.GVFReader.java-get_detail.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+if(sb==null){
+return ;
+}
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+if(sb==null){
+return ;
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if(jsTypeString==null){
+return ;
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
+if(obj.equals(null)){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if(sb!=null){
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/5324/pattern-ver1-serial/src.main.java.de.cismet.cids.custom.objecteditors.wrrl_db_mv.HydrologRouteEditor.java-sldZoomStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
+if(sb==null){
+return ;
+}
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
+if(sb==null){
+return ;
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
+if(sb==null){
+return ;
+}
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
+}
+if(value==null){
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
+if(x==null){
+return ;
+}
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(' '>0){
 sb.append(' ');
+}
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+if(lineno>0){
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+if(getDouble()>0){
 sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+if(' '>0){
 sb.append(' ');
+}
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/1583/pattern-ver1-serial/core.src.main.java.tachyon.client.CountingWritableBlockChannel.java-write.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if("index".equals(sb)){
+return ;
+}
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+if("index".equals(sb)){
+return ;
+}
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if("index".equals(sb)){
+return ;
+}
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+if("index".equals(sb)){
+return ;
+}
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+if("index".equals(sb)){
+return ;
+}
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+if("index".equals(sb)){
+return ;
+}
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if("index".equals(sb)){
+return ;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if("index".equals(sb)){
+return ;
+}
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+if("index".equals(sb)){
+return ;
+}
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+if("index".equals(sb)){
+return ;
+}
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb.equals("TIME")){
+return ;
+}
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if(sb.equals("TIME")){
+return ;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+if(sb.equals("TIME")){
+return ;
+}
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
+if(sb.equals("TIME")){
+return ;
+}
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+if(sb.equals("TIME")){
+return ;
+}
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+if(sb.equals("TIME")){
+return ;
+}
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+if(sb.equals("TIME")){
+return ;
+}
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+if(sb.equals("TIME")){
+return ;
+}
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
+if(sb.equals("TIME")){
+return ;
+}
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/4918/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MI.MIMobileMedicalResponseParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+if("&null".equals(sb)){
+return ;
+}
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+if("&null".equals(sb)){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if("&null".equals(sb)){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if("&null".equals(sb)){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+if("&null".equals(sb)){
+return ;
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+if("&null".equals(printSource)){
+return ;
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if("&null".equals(printSource)){
+return ;
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if("&null".equals(printSource)){
+return ;
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
+if(x==null){
+continue;
+}
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/ui.src.main.java.thredds.ui.monitor.MultipleAxisChart.java-finish.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+if(sb.equals("DATETIME")){
+return ;
+}
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+if(sb.equals("DATETIME")){
+return ;
+}
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(sb.equals("DATETIME")){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
+if(sb.equals("DATETIME")){
+return ;
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
+if(sb.equals("DATETIME")){
+return ;
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+if(sb.equals("DATETIME")){
+return ;
+}
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+if(sb.equals("DATETIME")){
+return ;
+}
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+if(sb.equals("DATETIME")){
+return ;
+}
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if(sb.equals("DATETIME")){
+return ;
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.util.regex.Matcher;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(sb.equals("DATETIME")){
+return ;
+}
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6302/pattern-ver1-serial/cadpage.src.net.anei.cadpage.parsers.MO.MOWarrenCountyParser.java-getField.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ final FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+}
+if(sof==null){
+return ;
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4514/pattern-ver1-serial/src.main.java.com.muzima.service.HTMLFormObservationCreator.java-createObservation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+if(jsType==null){
+return ;
+}
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2437/pattern-ver1-serial/app.src.main.java.org.gdg.frisbee.android.onboarding.FirstStartStep1Fragment.java-addChapters.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+if(jsType==null){
+return ;
+}
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2437/pattern-ver1-serial/app.src.main.java.org.gdg.frisbee.android.onboarding.FirstStartStep1Fragment.java-addChapters.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ final String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ final ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString.isEmpty()){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ final FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+sb.append("]");
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
+sb.append("]");
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2811/pattern-ver1-serial/src.main.java.no.anderska.wta.engines.MinesweeperEngine.java-generateBoard.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ @SuppressWarnings("UnusedAssignment") int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ @SuppressWarnings("UnusedAssignment") PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ @SuppressWarnings("UnusedAssignment") int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ @SuppressWarnings("UnusedAssignment") String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ @SuppressWarnings("UnusedAssignment") int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ @SuppressWarnings("UnusedAssignment") String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ @SuppressWarnings("UnusedAssignment") PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ @SuppressWarnings("UnusedAssignment") String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
-PropListItem x=lookupProperty(type);
+ @SuppressWarnings("UnusedAssignment") PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ @SuppressWarnings("UnusedAssignment") String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
-String value;
+ @SuppressWarnings("UnusedAssignment") String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ @SuppressWarnings("UnusedAssignment") String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
+ @SuppressWarnings("UnusedAssignment") FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ @SuppressWarnings("UnusedAssignment") int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
+ @SuppressWarnings("UnusedAssignment") ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ @SuppressWarnings("UnusedAssignment") int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ @SuppressWarnings("UnusedAssignment") int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+sb=sb;
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
+sb=sb;
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
-int[] keys=getSortedPropTypes();
+ final int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
-Object obj=x.objectValue;
+ final Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
-PropListItem x=lookupProperty(type);
+ final int type=keys[i];
+ final PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
-int lineno=getLineno();
+ final int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
-int type=keys[i];
+ final int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
-String jsTypeString=jsType.toString();
+ final String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+if(keys.equals("")){
+return ;
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(x.equals("")){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.equals("")){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/6228/pattern-ver1-serial/src.engine.QueryEngine.java-slice.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+if(i==4){
+continue;
+}
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+x.objectValue=1000;
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+x.intValue=1000;
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+lineno=1000;
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
+if(true){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
+if(true){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(true){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-sb.append(first.getString());
+sb.append("Error, "+first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4103/pattern-ver1-serial/src.recommendations.nodes.Product.java-Product.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append("Error, "+getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4103/pattern-ver1-serial/src.recommendations.nodes.Product.java-Product.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-sb.append(first.getString());
+sb.append("https://myschool.ru.is/myschool/"+first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
-sb.append(sof.getSourceName());
+sb.append("https://myschool.ru.is/myschool/"+sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
-sb.append(getDouble());
+sb.append("https://myschool.ru.is/myschool/"+getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
+sb.append("https://myschool.ru.is/myschool/"+sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
+sb.append("https://myschool.ru.is/myschool/"+sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
-sb.append(getString());
+sb.append("https://myschool.ru.is/myschool/"+getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
-sb.append(fn.getFunctionName());
+sb.append("https://myschool.ru.is/myschool/"+fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
+sb.append("https://myschool.ru.is/myschool/"+propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
+Arrays.sort(keys);
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+Arrays.sort(keys);
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V24/5055/pattern-ver1-serial/cli.src.main.java.com.vmware.bdd.cli.commands.ClusterCommands.java-getCluster.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+if(" : "!=null){
 sb.append(" : ");
+}
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/7255/pattern-ver1-serial/parser.src.main.java.me.vertretungsplan.objects.Substitution.java-setTeacher.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+if(jsTypeString!=null){
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/7255/pattern-ver1-serial/parser.src.main.java.me.vertretungsplan.objects.Substitution.java-setTeacher.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(x.equals("-1")){
+return ;
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
+if(keys.equals("-1")){
+return ;
+}
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.equals("-1")){
+return ;
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/4405/pattern-ver1-serial/src.edu.ucsb.cs.Main.java-editGuardianGivenName.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null||jsTypeString.isEmpty()){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+synchronized(this){
 value=obj.toString();
+}
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+sb.append(" [source name: ");
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
+sb.append(" [source name: ");
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+sb.append("] [encoded source length: ");
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
+sb.append("] [encoded source length: ");
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+sb.append("] [base line: ");
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(" [source name: ");
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append("] [encoded source length: ");
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append("] [encoded source length: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append("] [base line: ");
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+sb.append(' ');
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append(' ');
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+sb.append(' ');
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(' ');
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(' ');
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(' ');
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+sb.append(' ');
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
-sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+sb.append(" [source name: ");
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
-sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+sb.append(" [source name: ");
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
-sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+sb.append(" [source name: ");
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
-sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+sb.append(" [source name: ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
-sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+sb.append(" [source name: ");
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+sb.append(" [source name: ");
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
-sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+sb.append(" [source name: ");
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
-sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
-sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+sb.append(" [source name: ");
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(" [source name: ");
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
-sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
-sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(" [source name: ");
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2466/pattern-ver1-serial/tajo-core.src.main.java.org.apache.tajo.worker.Task.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
+sb.append(" [source name: ");
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
+sb.append("] [encoded source length: ");
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(" [source name: ");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append("] [encoded source length: ");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append("] [base line: ");
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+sb.append(' ');
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+sb.append(' ');
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+sb.append(' ');
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
+sb.append(' ');
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+sb.append(' ');
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
+sb.append(' ');
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
+sb.append(" [source name: ");
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
+sb.append("] [encoded source length: ");
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
+sb.append("] [base line: ");
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+sb.append(lineno);
 if(lineno!=-1){
 sb.append(' ');
-sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+sb.append(jsTypeString);
 if(jsTypeString!=null){
 sb.append(" : ");
-sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(' ');
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append(' ');
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
+sb.append(' ');
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append(' ');
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+value="target block property";
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+value="last local block";
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+value="both";
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(" [source name: ");
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/2884/pattern-ver1-serial/src.edu.asu.laits.gui.nodeeditor.CalculationsPanelView.java-processNodeEquation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
 sb.append(' ');
+if(type==Token.FUNCTION){
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+sb.append(' ');
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+sb.append(' ');
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+sb.append(' ');
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+sb.append(' ');
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
-sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+sb.append(" [");
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
-sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+sb.append(": ");
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+sb.append(value);
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
-sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+sb.append(']');
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
-sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
-sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+sb.append(" [");
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
-sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+sb.append(": ");
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+sb.append(" [source name: ");
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+sb.append("] [encoded source length: ");
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+sb.append("] [base line: ");
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+sb.append("] [end line: ");
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+sb.append(']');
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+sb.append(' ');
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
+sb.append(' ');
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/3268/pattern-ver1-serial/ShopNow.src.shopnow.accountEdit.java-get_new_address.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
+sb.append(" [source name: ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/3268/pattern-ver1-serial/ShopNow.src.shopnow.accountEdit.java-get_new_address.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
+sb.append("] [encoded source length: ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/3268/pattern-ver1-serial/ShopNow.src.shopnow.accountEdit.java-get_new_address.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
+sb.append("] [base line: ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/3268/pattern-ver1-serial/ShopNow.src.shopnow.accountEdit.java-get_new_address.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+if(!first.getString().equals("")){
 sb.append(first.getString());
+}
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+if(!getString().equals("")){
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
+if(!fn.getFunctionName().equals("")){
 sb.append(fn.getFunctionName());
+}
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+sb.append(getDouble());
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+sb.append(lineno);
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
+sb.append(' ');
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+sb.append(' ');
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
+sb.append(' ');
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
+sb.append(' ');
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1||lineno==Long.MIN_VALUE){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type==Token.NUMBER||type==Long.MIN_VALUE){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
 sb.append(' ');
+if(lineno!=-1){
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
+sb.append(getDouble());
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(getDouble());
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append(' ');
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
-sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
+sb.append(' ');
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
+sb.append(" [source name: ");
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+sb.append(value);
 }
 break;
 }
-sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+sb.append(']');
 }
 break;
 }
 sb.append(value);
-sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
-value=String.valueOf(x.intValue);
+value=String.valueOf(x.intValue).replaceAll("\n","");
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
-value=obj.toString();
+value=obj.toString().replaceAll("\n","");
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
-value="target block property";
+value="target block property".replaceAll("\n","");
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
-value="last local block";
+value="last local block".replaceAll("\n","");
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
-value="both";
+value="both".replaceAll("\n","");
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
-value="right";
+value="right".replaceAll("\n","");
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
-value="left";
+value="left".replaceAll("\n","");
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
-value="eval";
+value="eval".replaceAll("\n","");
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
-value="with";
+value="with".replaceAll("\n","");
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
-value=String.valueOf(x.intValue);
+value=(String.valueOf(x.intValue)).replace("\\","\\\\");
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
-value=obj.toString();
+value=(obj.toString()).replace("\\","\\\\");
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
-value="target block property";
+value=("target block property").replace("\\","\\\\");
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
-value="last local block";
+value=("last local block").replace("\\","\\\\");
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
-value="both";
+value=("both").replace("\\","\\\\");
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
-value="right";
+value=("right").replace("\\","\\\\");
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
-value="left";
+value=("left").replace("\\","\\\\");
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
-value="eval";
+value=("eval").replace("\\","\\\\");
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
-value="with";
+value=("with").replace("\\","\\\\");
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
+if(obj!=null||"查看红包".equals(obj)){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null||"查看红包".equals(jsTypeString)){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
+if(jsType!=null||"查看红包".equals(jsType)){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1||"查看红包".equals(lineno)){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno!=-1||lineno==3){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type==Token.FUNCTION||type==3){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type==Token.NUMBER||type==3){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+sb.append(sof.getSourceName());
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
+sb.append(sof.getSourceName());
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(sof.getSourceName());
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append(sof.getSourceName());
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
+sb.append(sof.getSourceName());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(first.getString());
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+sb.append(first.getString());
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+sb.append(first.getString());
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null||jsTypeString==""){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
-if(obj!=null){
+if(obj!=null||obj==""){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
-if(lineno!=-1){
+if(lineno<0||lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
-if(type==Token.NUMBER){
+if(type<0||type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
-if(type==Token.FUNCTION){
+if(type<0||type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
+sb.append(first.getString());
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
+sb.append(first.getString());
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
+sb.append(first.getString());
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+sb.append(first.getString());
 if(type==Token.FUNCTION){
 sb.append(' ');
-sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+sb.append(first.getString());
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
-sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
+sb.append(propToString(type));
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
-sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+sb.append(propToString(type));
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+value=obj.toString();
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
+value=obj.toString();
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
+sb.append(first.getString());
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/3268/pattern-ver1-serial/ShopNow.src.shopnow.accountEdit.java-get_new_address.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+sb.append(sof.getSourceName());
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append(sof.getBaseLineno());
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+sb.append(sof.getBaseLineno());
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
+sb.append(first.getString());
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
+sb.append(first.getString());
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
+value=obj.toString();
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+synchronized(this){
 sb.append(' ');
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
+synchronized(this){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+synchronized(this){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
+synchronized(this){
 sb.append(' ');
 sb.append(getString());
+}
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+if(sof==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
+if(sof==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
+if(sof==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
+if(sb==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
+if(type>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
+if(type>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+}
+if(" [source name: "==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+}
+if("] [encoded source length: "==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+}
+if("] [base line: "==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+}
+if("] [end line: "==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+}
+if(sof.getSourceName()==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
+sb.append(" (");
 sb.append(lineno);
+sb.append(") ");
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
+sb.append(" (");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
+sb.append(") ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+sb.append(" (");
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
+sb.append(") ");
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
+sb.append(" (");
 sb.append(' ');
 sb.append(fn.getFunctionName());
+sb.append(") ");
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
+sb.append(" (");
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
+sb.append(") ");
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
+sb.append(" (");
+sb.append(") ");
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
+sb.append(" (");
 sb.append(getDouble());
+sb.append(") ");
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
+sb.append(" (");
 sb.append(first.getString());
+sb.append(") ");
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
+sb.append(" (");
 sb.append(getString());
+sb.append(") ");
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+sb.append(" (");
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
+sb.append(") ");
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/4157/pattern-ver1-serial/SMSListServ.src.TransSMSServ.MessageParser.java-parseCats.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+if(sb!=null){
 sb.append(first.getString());
+}
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
+if(sb!=null){
 sb.append(" [source name: ");
+}
 sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
-sb.append(' ');
+if(sb!=null){
 sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+if(sb!=null){
 sb.append(' ');
-sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 0, DEL : 3
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
+value=String.valueOf(x.intValue);
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
+value=String.valueOf(x.intValue);
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb!=null){
 sb.append(' ');
+}
+if(sb!=null){
 sb.append(first.getString());
+}
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/1406/pattern-ver1-serial/src.com.netease.qa.emmagee.utils.TrafficInfo.java-getTrafficInfo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
+if(sb!=null){
 sb.append(' ');
+}
+if(sb!=null){
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/1406/pattern-ver1-serial/src.com.netease.qa.emmagee.utils.TrafficInfo.java-getTrafficInfo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
+if(sb!=null){
 sb.append(' ');
+}
+if(sb!=null){
 sb.append(getDouble());
+}
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/1406/pattern-ver1-serial/src.com.netease.qa.emmagee.utils.TrafficInfo.java-getTrafficInfo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
+sb.append(' '+",");
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
-sb.append(']');
+sb.append(']'+",");
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
-sb.append(']');
+sb.append(']'+",");
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
-sb.append(' ');
+sb.append(' '+",");
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+synchronized(this){
 sb.append(' ');
 sb.append(first.getString());
+}
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
+if(propToString(type)!=null){
 sb.append(propToString(type));
+}else {
+sb.append("");
+}
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/6520/pattern-ver1-serial/src.main.java.org.metadatacenter.submission.biosample.core.BioSampleValidator.java-generateBioSampleSubmissionXML.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
+if(value!=null){
 sb.append(value);
+}else {
+sb.append("");
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/6520/pattern-ver1-serial/src.main.java.org.metadatacenter.submission.biosample.core.BioSampleValidator.java-generateBioSampleSubmissionXML.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(" ["!=null){
 sb.append(" [");
+}else {
+sb.append("");
+}
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/6520/pattern-ver1-serial/src.main.java.org.metadatacenter.submission.biosample.core.BioSampleValidator.java-generateBioSampleSubmissionXML.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
+if(": "!=null){
 sb.append(": ");
+}else {
+sb.append("");
+}
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/6520/pattern-ver1-serial/src.main.java.org.metadatacenter.submission.biosample.core.BioSampleValidator.java-generateBioSampleSubmissionXML.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
+}
+if(value==null||x==null){
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3334/pattern-ver1-serial/src.org.nschmidt.ldparteditor.data.VM03Adjacency.java-linkedCommonFaces.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
+}
+if(x==null||value==null){
+return ;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3334/pattern-ver1-serial/src.org.nschmidt.ldparteditor.data.VM03Adjacency.java-linkedCommonFaces.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
+if(sb!=null){
 sb.append(' ');
-sb.append(first.getString());
+}
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
+if(sb!=null){
 sb.append(" [source name: ");
-sb.append(sof.getSourceName());
+}
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5851/pattern-ver1-serial/src.main.java.com.dynious.refinedrelocation.grid.GridMemberHandler.java-onTileRemoved.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 3, INS : 0, DEL : 4
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
+if(x==null){
+throw new IllegalStateException("User isn't registered! "+type);
+}
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
+if(value!=String.valueOf(x.intValue)){
 sb.append(value);
+}
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
+synchronized(this){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
+}
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
+synchronized(this){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
+synchronized(this){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
+}
 }
 }
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 1, DEL : 13
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(printSource){
+int lineno=getLineno();
+if(lineno!=-1){
+sb.append(' ');
+sb.append(lineno);
+}
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
-}
 }
 }
-if(printSource){
-int lineno=getLineno();
-if(lineno!=-1){
-sb.append(' ');
-sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
-}
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
+}
+}
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+synchronized(this){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/1889/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.internal.partition.impl.PartitionReplicaStateChecker.java-isReplicaInSyncState.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 0, DEL : 16
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
+if(jsType!=null){
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
+}
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 1, DEL : 16
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
+if(jsType!=null){
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
+}
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
-if(jsType!=null){
-String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
-sb.append(" : ");
-sb.append(jsTypeString);
-}
-}
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 1, DEL : 16
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
+if(jsType!=null){
+String jsTypeString=jsType.toString();
+if(jsTypeString!=null){
+sb.append(" : ");
+sb.append(jsTypeString);
+}
+}
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 1, DEL : 16
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
+if(jsTypeString.substring(11,19).equals("00:00:00")){
+jsTypeString=jsTypeString.substring(0,11)+"23:59:59"+jsTypeString.substring(19);
+}
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/2005/pattern-ver1-serial/dspace-oai.src.main.java.org.dspace.xoai.filter.DateUntilFilter.java-buildSolrQuery.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
-if(jsTypeString!=null){
+if(jsTypeString!=null&&jsTypeString.trim().length()==0){
+jsTypeString=null;
+}
+if(jsTypeString!=null||jsTypeString.trim().length()==0){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5053/pattern-ver1-serial/src.edu.clemson.lph.civet.prefs.CivetConfig.java-getEmailErrorsDirPath.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 7, INS : 12, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 36, UPD : 0, INS : 1, DEL : 35
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
 }else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/1889/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.internal.partition.impl.PartitionReplicaStateChecker.java-isReplicaInSyncState.pattern
MATCHLEVEL : ALL
ALL : 63, UPD : 0, INS : 0, DEL : 63
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 63, UPD : 63, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
 }
 }
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 63, UPD : 63, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-sb.append(first.getString());
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
 }else {
-if(type==Token.NUMBER){
-sb.append(' ');
-sb.append(getDouble());
-}
-}
-}
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4121/pattern-ver1-serial/main.plugins.org.talend.dataprofiler.core.src.org.talend.dataprofiler.core.ImageLib.java-getImageNameByRepositoryNode.pattern
MATCHLEVEL : ALL
ALL : 73, UPD : 0, INS : 0, DEL : 73
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 73, UPD : 73, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
-}else {
-if(type==Token.FUNCTION){
-sb.append(' ');
-sb.append(first.getString());
-}else {
-if(this instanceof ScriptOrFnNode){
-ScriptOrFnNode sof=(ScriptOrFnNode)this;
-if(this instanceof FunctionNode){
-FunctionNode fn=(FunctionNode)this;
-sb.append(' ');
-sb.append(fn.getFunctionName());
-}
-if(printSource){
-sb.append(" [source name: ");
-sb.append(sof.getSourceName());
-sb.append("] [encoded source length: ");
-sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
-sb.append("] [base line: ");
-sb.append(sof.getBaseLineno());
-sb.append("] [end line: ");
-sb.append(sof.getEndLineno());
-sb.append(']');
-}
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
-}
-}
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 73, UPD : 73, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
+}
+}
+}else {
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
 }
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7797/pattern-ver1-serial/src.com.felhr.usbserial.UsbSerialDevice.java-createUsbSerialDevice.pattern
MATCHLEVEL : ALL
ALL : 73, UPD : 73, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/closure/closure_102_buggy/src/com/google/javascript/rhino/Node.java[888,1001]
------------Candidate---------------
 private void toString(StringBuilder sb,boolean printSource,boolean printAnnotations,boolean printType){
 if(Token.printTrees){
 sb.append(Token.name(type));
 if(this instanceof StringNode){
 sb.append(' ');
 sb.append(getString());
 }else {
 if(type==Token.FUNCTION){
 sb.append(' ');
 sb.append(first.getString());
 }else {
 if(this instanceof ScriptOrFnNode){
 ScriptOrFnNode sof=(ScriptOrFnNode)this;
 if(this instanceof FunctionNode){
 FunctionNode fn=(FunctionNode)this;
 sb.append(' ');
 sb.append(fn.getFunctionName());
 }
 if(printSource){
 sb.append(" [source name: ");
 sb.append(sof.getSourceName());
 sb.append("] [encoded source length: ");
 sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
 sb.append("] [base line: ");
 sb.append(sof.getBaseLineno());
 sb.append("] [end line: ");
 sb.append(sof.getEndLineno());
 sb.append(']');
 }
 }else {
 if(type==Token.NUMBER){
 sb.append(' ');
 sb.append(getDouble());
 }
 }
 }
 }
 if(printSource){
 int lineno=getLineno();
 if(lineno!=-1){
 sb.append(' ');
 sb.append(lineno);
 }
 }
 if(printAnnotations){
 int[] keys=getSortedPropTypes();
 for(int i=0;i<keys.length;i++){
 int type=keys[i];
 PropListItem x=lookupProperty(type);
 sb.append(" [");
 sb.append(propToString(type));
 sb.append(": ");
 String value;
 switch (type){
 case TARGETBLOCK_PROP :
 
 value="target block property";
 break;
 case LOCAL_BLOCK_PROP :
 
 value="last local block";
 break;
 case ISNUMBER_PROP :
 
 switch (x.intValue){
 case BOTH :
 
 value="both";
 break;
 case RIGHT :
 
 value="right";
 break;
 case LEFT :
 
 value="left";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 case SPECIALCALL_PROP :
 
 switch (x.intValue){
 case SPECIALCALL_EVAL :
 
 value="eval";
 break;
 case SPECIALCALL_WITH :
 
 value="with";
 break;
 default :
 
 throw Kit.codeBug();
 }
 break;
 default :
 
 Object obj=x.objectValue;
 if(obj!=null){
 value=obj.toString();
 }else {
 value=String.valueOf(x.intValue);
 }
 break;
 }
 sb.append(value);
 sb.append(']');
 }
 }
 if(printType){
 if(jsType!=null){
 String jsTypeString=jsType.toString();
 if(jsTypeString!=null){
 sb.append(" : ");
 sb.append(jsTypeString);
+}
+}
+}
+}else {
+if(type==Token.FUNCTION){
+sb.append(' ');
+sb.append(first.getString());
+}else {
+if(this instanceof ScriptOrFnNode){
+ScriptOrFnNode sof=(ScriptOrFnNode)this;
+if(this instanceof FunctionNode){
+FunctionNode fn=(FunctionNode)this;
+sb.append(' ');
+sb.append(fn.getFunctionName());
+}
+if(printSource){
+sb.append(" [source name: ");
+sb.append(sof.getSourceName());
+sb.append("] [encoded source length: ");
+sb.append(sof.getEncodedSourceEnd()-sof.getEncodedSourceStart());
+sb.append("] [base line: ");
+sb.append(sof.getBaseLineno());
+sb.append("] [end line: ");
+sb.append(sof.getEndLineno());
+sb.append(']');
+}
+}else {
+if(type==Token.NUMBER){
+sb.append(' ');
+sb.append(getDouble());
 }
 }
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 207, UPD : 207, INS : 0, DEL : 0
Failing Tests:[com.google.javascript.jscomp.CompilerRunnerTest::testIssue115]
---------START : 2019.09.07 AD at 05:41:20 CDT
---------TIME : 2019.09.07 AD at 10:42:03 CDT
--------------- END -----------------
Finish : closure-102 > patch : 0 | Start : Sat Sep 07 05:41:20 CDT 2019 | End : 2019.09.07 AD at 10:42:03 CDT
